<?xml version="1.0"?>
<doc>
    <assembly>
        <name>ComputeSharp</name>
    </assembly>
    <members>
        <member name="T:ComputeSharp.EmbeddedBytecodeAttribute">
            <summary>
            An attribute that indicates that a given shader should be precompiled at build time and embedded
            directly into the containing assembly as static bytecode, to avoid compiling it at runtime.
            <para>
            This attribute can be used to annotate shader types as follows:
            <code>
            // A compute shader that is dispatched on a target buffer
            [EmbeddedBytecode(DispatchAxis.X)]
            struct MyShader : IComputeShader
            {
            }
            </code>
            Or similarly, for a pixel shader:
            <code>
            // A pixel shader that is dispatched on a target texture
            [EmbeddedBytecode(DispatchAxis.XY)]
            struct MyShader : IPixelShader&lt;float4&gt;
            {
            }
            </code>
            </para>
            <para>
            Using <see cref="T:ComputeSharp.DispatchAxis"/> is an easier way to precompile shaders when dispatching them over known dimensions. For more
            fine grained control over the thread size values when dispatching, use <see cref="M:ComputeSharp.EmbeddedBytecodeAttribute.#ctor(System.Int32,System.Int32,System.Int32)"/>.
            </para>
            <para>
            </para>
            The runtime compilation will automatically be skipped if the shader is invoked using matching thread count values,
            otherwise the usual runtime compilation will be used as fallback if the <c>ComputeSharp.Dynamic</c> library is
            referenced. If not, <see cref="T:System.NotSupportedException"/> will be thrown when trying to dispatch the shader.
            </summary>
            <remarks>
            <para>
            Using this attribute is mandatory when not referencing <c>ComputeSharp.Dynamic</c>.
            </para>
            <para>
            This attribute can only be used when the shader type being annotated does not require dynamic
            features. Specifically, this attribute is not supported if the shader captures any delegates.
            </para>
            </remarks>
        </member>
        <member name="M:ComputeSharp.EmbeddedBytecodeAttribute.#ctor(ComputeSharp.DispatchAxis)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.EmbeddedBytecodeAttribute"/> instance with the specified parameters.
            </summary>
            <param name="dispatchAxis">The target dispatch axes for the shader to run.</param>
        </member>
        <member name="M:ComputeSharp.EmbeddedBytecodeAttribute.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.EmbeddedBytecodeAttribute"/> instance with the specified parameters.
            </summary>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
        </member>
        <member name="P:ComputeSharp.EmbeddedBytecodeAttribute.ThreadsX">
            <summary>
            Gets the number of threads in each thread group for the X axis
            </summary>
        </member>
        <member name="P:ComputeSharp.EmbeddedBytecodeAttribute.ThreadsY">
            <summary>
            Gets the number of threads in each thread group for the Y axis
            </summary>
        </member>
        <member name="P:ComputeSharp.EmbeddedBytecodeAttribute.ThreadsZ">
            <summary>
            Gets the number of threads in each thread group for the Z axis
            </summary>
        </member>
        <member name="T:ComputeSharp.GroupSharedAttribute">
            <summary>
            An attribute that indicates that an array static field in a shader type will be shared in a thread group.
            <para>
            This attribute can be used to declare fields as follows:
            <code>
            struct MyShader : IComputeShader
            {
                [GroupShared(32)]
                static float[] MyBuffer;
            }
            </code>
            </para>
            The buffer shouldn't be manually initialized, as each shader invocation will automatically receive the
            right buffer in use for the thread group it belongs to. If there is an assignment for the field, it
            will just be ignored in the shader. Additionally, buffer types are not allowed as array items.
            </summary>
        </member>
        <member name="M:ComputeSharp.GroupSharedAttribute.#ctor">
            <summary>
            Creates a new <see cref="T:ComputeSharp.GroupSharedAttribute"/> instance with the specified parameters.
            </summary>
        </member>
        <member name="M:ComputeSharp.GroupSharedAttribute.#ctor(System.Int32)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.GroupSharedAttribute"/> instance with the specified parameters.
            </summary>
            <param name="size">The size of the shared buffer to declare.</param>
        </member>
        <member name="P:ComputeSharp.GroupSharedAttribute.Size">
            <summary>
            Gets the size of the shared buffer being declared.
            If <see langword="null"/>, the thread group size will be used.
            </summary>
        </member>
        <member name="T:ComputeSharp.DispatchAxis">
            <summary>
            A <see langword="enum"/> to be used with <see cref="T:ComputeSharp.EmbeddedBytecodeAttribute"/> to indicate the dispatch axis to precompile a shader for.
            </summary>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.X">
            <summary>
            Indicates a shader dispatch only along the X axis.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,``0@)"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,``0@)"/>.
            </remarks>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.Y">
            <summary>
            Indicates a shader dispatch only along the Y axis.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,``0@)"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,``0@)"/>,
            but only as long as the input dispatch size on both the X and Z axes is <c>1</c>. Using any other combination will not be able to leverage the precompiled shader bytecode.
            </remarks>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.Z">
            <summary>
            Indicates a shader dispatch only along the Z axis.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,``0@)"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,``0@)"/>,
            but only as long as the input dispatch size on both the X and Y axes is <c>1</c>. Using any other combination will not be able to leverage the precompiled shader bytecode.
            </remarks>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.XY">
            <summary>
            Indicates a shader dispatch along the X and Y axes.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,``0@)"/>, <see cref="M:ComputeSharp.GraphicsDeviceExtensions.ForEach``2(ComputeSharp.GraphicsDevice,ComputeSharp.IReadWriteNormalizedTexture2D{``1})"/>,
            <see cref="M:ComputeSharp.GraphicsDeviceExtensions.ForEach``2(ComputeSharp.GraphicsDevice,ComputeSharp.IReadWriteNormalizedTexture2D{``1},``0@)"/>, <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,``0@)"/>,
            <see cref="M:ComputeSharp.ComputeContextExtensions.ForEach``2(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``1})"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.ForEach``2(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``1},``0@)"/>.
            </remarks>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.XZ">
            <summary>
            Indicates a shader dispatch along the X and Z axes.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,``0@)"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,``0@)"/>,
            but only as long as the input dispatch size on the Y axis <c>1</c>. Using any other combination will not be able to leverage the precompiled shader bytecode.
            </remarks>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.YZ">
            <summary>
            Indicates a shader dispatch along the Y and Z axes.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,``0@)"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,``0@)"/>,
            but only as long as the input dispatch size on the X axis <c>1</c>. Using any other combination will not be able to leverage the precompiled shader bytecode.
            </remarks>
        </member>
        <member name="F:ComputeSharp.DispatchAxis.XYZ">
            <summary>
            Indicates a shader dispatch along the X, Y and Z axes.
            </summary>
            <remarks>
            This applies to using <see cref="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,``0@)"/> or <see cref="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,``0@)"/>.
            </remarks>
        </member>
        <member name="T:ComputeSharp.DispatchSize">
            <summary>
            A <see langword="class"/> that indicates the size of the current shader dispatch being executed.
            That is, it enables a shader to access info on the targeted number of invocations along each axis.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.Count">
            <summary>
            Gets the total number of dispatch invocations being executed.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.X">
            <summary>
            Gets the number of dispatch invocations being executed on the X axis.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.Y">
            <summary>
            Gets the number of dispatch invocations being executed on the Y axis.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.Z">
            <summary>
            Gets the number of dispatch invocations being executed on the Z axis.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.XZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.YZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.DispatchSize.ZZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>, <see cref="P:ComputeSharp.DispatchSize.Z"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.GridIds">
            <summary>
            A <see langword="class"/> that indicates the ids of the current thread group within the dispatch grid.
            That is, it enables a shader to access info on the index of the current thread group with respect to the dispatch grid.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.X">
            <summary>
            Gets the X id of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.Y">
            <summary>
            Gets the Y id of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.Z">
            <summary>
            Gets the Z id of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.XZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.YZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GridIds.ZZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>, <see cref="P:ComputeSharp.GridIds.Z"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.GroupIds">
            <summary>
            A <see langword="class"/> that indicates the ids of a given GPU thread running a compute shader within a dispatch group.
            That is, it enables a shader to access info on the index of the current thread with respect to the currently running group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.Index">
            <summary>
            Gets the flattened index of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.X">
            <summary>
            Gets the X id of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.Y">
            <summary>
            Gets the Y id of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.Z">
            <summary>
            Gets the Z id of the current thread with respect to the dispatch group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.XZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.YZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupIds.ZZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>, <see cref="P:ComputeSharp.GroupIds.Z"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.GroupSize">
            <summary>
            A <see langword="class"/> that indicates the size info of a given GPU thread group running a compute shader.
            That is, it enables a shader to access info on the size of the thread groups being used.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.Count">
            <summary>
            Gets the total size of the current thread group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.X">
            <summary>
            Gets the size of the X axis of the current thread group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.Y">
            <summary>
            Gets the size of the Y axis of the current thread group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.Z">
            <summary>
            Gets the size of the Z axis of the current thread group.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.XZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.YZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.GroupSize.ZZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>, <see cref="P:ComputeSharp.GroupSize.Z"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.ThreadIds">
            <summary>
            A <see langword="class"/> that indicates the ids of a given GPU thread running a compute shader.
            That is, it enables a shader to access info on the current iteration index along each axis.
            </summary>
            <inheritdoc cref="T:ComputeSharp.ThreadIds"/>
        </member>
        <member name="P:ComputeSharp.ThreadIds.X">
            <summary>
            Gets the X id of the current thread.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Y">
            <summary>
            Gets the Y id of the current thread.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Z">
            <summary>
            Gets the Z id of the current thread.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.XZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.YZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZXX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZXY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZXZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZYX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZYY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZYZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZZX">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZZY">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.ZZZ">
            <summary>
            Gets an <see cref="T:ComputeSharp.Int3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Z"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.ThreadIds.Normalized">
            <summary>
            A <see langword="class"/> that indicates the normalized ids of a given GPU thread running a compute shader.
            These ids represent equivalent info to those from <see cref="T:ComputeSharp.ThreadIds"/>, but normalized in the [0, 1] range.
            The range used for the normalization is the one given by the target dispatch size (see <see cref="T:ComputeSharp.DispatchSize"/>).
            </summary>
            <remarks>
            When the dispatch size on a given axis is 1, the normalized value along that axis will be 0. Otherwise, it will just
            be the normalization over [0, 1] for the current dispatch progress along that axis. That is, for instance:
            <list type="number">
              <item>[0].</item>
              <item>[0, 1].</item>
              <item>[0, 0.5, 1].</item>
              <item>[0, 0.333..., 0.666..., 1].</item>
              <item>[0, 0.25, 0.5, 0.75, 1].</item>
            </list>
            And so on depending on the dispatch size along the requested dispatch axis.
            </remarks>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.X">
            <summary>
            Gets the normalized X id of the current thread.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.Y">
            <summary>
            Gets the normalized Y id of the current thread.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.Z">
            <summary>
            Gets the normalized Z id of the current thread.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float2"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XXX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XXY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XXZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XYX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XYY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XYZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XZX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XZY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.XZZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YXX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YXY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YXZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YYX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YYY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YYZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YZX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YZY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.YZZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZXX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZXY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZXZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZYX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZYY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZYZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZZX">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.X"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZZY">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Y"/>.
            </summary>
        </member>
        <member name="P:ComputeSharp.ThreadIds.Normalized.ZZZ">
            <summary>
            Gets a <see cref="T:ComputeSharp.Float3"/> value with the components <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>, <see cref="P:ComputeSharp.ThreadIds.Normalized.Z"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.FloatExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.Float2"/>, <see cref="T:ComputeSharp.Float3"/> and <see cref="T:ComputeSharp.Float4"/> types.
            </summary>
        </member>
        <member name="M:ComputeSharp.FloatExtensions.AsVector2(System.Span{ComputeSharp.Float2})">
            <summary>
            Converts a <see cref="T:ComputeSharp.Float2"/> <see cref="T:System.Span`1"/> into a <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="span">The input <see cref="T:ComputeSharp.Float2"/> <see cref="T:System.Span`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector2"/>, mapping the original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.FloatExtensions.AsVector2(System.ReadOnlySpan{ComputeSharp.Float2})">
            <summary>
            Converts a <see cref="T:ComputeSharp.Float2"/> <see cref="T:System.ReadOnlySpan`1"/> into a <see cref="T:System.ReadOnlySpan`1"/> with items of type <see cref="T:System.Numerics.Vector2"/>.
            </summary>
            <param name="span">The input <see cref="T:ComputeSharp.Float2"/> <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector2"/>, mapping the original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.FloatExtensions.AsVector3(System.Span{ComputeSharp.Float3})">
            <summary>
            Converts a <see cref="T:ComputeSharp.Float3"/> <see cref="T:System.Span`1"/> into a <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="span">The input <see cref="T:ComputeSharp.Float3"/> <see cref="T:System.Span`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector3"/>, mapping the original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.FloatExtensions.AsVector3(System.ReadOnlySpan{ComputeSharp.Float3})">
            <summary>
            Converts a <see cref="T:ComputeSharp.Float3"/> <see cref="T:System.ReadOnlySpan`1"/> into a <see cref="T:System.ReadOnlySpan`1"/> with items of type <see cref="T:System.Numerics.Vector3"/>.
            </summary>
            <param name="span">The input <see cref="T:ComputeSharp.Float3"/> <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector3"/>, mapping the original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.FloatExtensions.AsVector4(System.Span{ComputeSharp.Float4})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.Span`1"/> into a <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.Span`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector4"/>, mapping the original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.FloatExtensions.AsVector4(System.ReadOnlySpan{ComputeSharp.Float4})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.ReadOnlySpan`1"/> into a <see cref="T:System.ReadOnlySpan`1"/> with items of type <see cref="T:System.Numerics.Vector4"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:System.Numerics.Vector4"/>, mapping the original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="T:ComputeSharp.VectorExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:System.Numerics.Vector2"/>, <see cref="T:System.Numerics.Vector3"/> and <see cref="T:System.Numerics.Vector4"/> types.
            </summary>
        </member>
        <member name="M:ComputeSharp.VectorExtensions.AsFloat2(System.Span{System.Numerics.Vector2})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector2"/> <see cref="T:System.Span`1"/> into a <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float2"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector2"/> <see cref="T:System.Span`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float2"/>, mapping the original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.VectorExtensions.AsFloat2(System.ReadOnlySpan{System.Numerics.Vector2})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector2"/> <see cref="T:System.ReadOnlySpan`1"/> into a <see cref="T:System.ReadOnlySpan`1"/> with items of type <see cref="T:ComputeSharp.Float2"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector2"/> <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float2"/>, mapping the original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.VectorExtensions.AsFloat3(System.Span{System.Numerics.Vector3})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector3"/> <see cref="T:System.Span`1"/> into a <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float3"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector3"/> <see cref="T:System.Span`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float3"/>, mapping the original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.VectorExtensions.AsFloat3(System.ReadOnlySpan{System.Numerics.Vector3})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector3"/> <see cref="T:System.ReadOnlySpan`1"/> into a <see cref="T:System.ReadOnlySpan`1"/> with items of type <see cref="T:ComputeSharp.Float3"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector3"/> <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float3"/>, mapping the original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.VectorExtensions.AsFloat4(System.Span{System.Numerics.Vector4})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.Span`1"/> into a <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float4"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.Span`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float4"/>, mapping the original <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.VectorExtensions.AsFloat4(System.ReadOnlySpan{System.Numerics.Vector4})">
            <summary>
            Converts a <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.ReadOnlySpan`1"/> into a <see cref="T:System.ReadOnlySpan`1"/> with items of type <see cref="T:ComputeSharp.Float4"/>.
            </summary>
            <param name="span">The input <see cref="T:System.Numerics.Vector4"/> <see cref="T:System.ReadOnlySpan`1"/>.</param>
            <returns>A <see cref="T:System.Span`1"/> with items of type <see cref="T:ComputeSharp.Float4"/>, mapping the original <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="T:ComputeSharp.Core.Helpers.AlignmentHelper">
            <summary>
            A <see langword="class"/> with helper methods to work with alignment and padding.
            </summary>
        </member>
        <member name="M:ComputeSharp.Core.Helpers.AlignmentHelper.Pad(System.Int32,System.Int32)">
            <summary>
            Pads the input size so that its pitch is aligned to a multiple of a specified length.
            </summary>
            <param name="size">The input size to pad, if needed.</param>
            <param name="alignment">The target alignment.</param>
            <returns>The padded value relative to the given inputs.</returns>
        </member>
        <member name="M:ComputeSharp.Core.Helpers.AlignmentHelper.Pad(System.IntPtr,System.IntPtr)">
            <summary>
            Pads the input size so that its pitch is aligned to a multiple of a specified length.
            </summary>
            <param name="size">The input size to pad, if needed.</param>
            <param name="alignment">The target alignment.</param>
            <returns>The padded value relative to the given inputs.</returns>
        </member>
        <member name="M:ComputeSharp.Core.Helpers.AlignmentHelper.AlignToBoundary(System.Int32,System.Int32,System.Int32)">
            <summary>
            Aligns a given offset to a specified boundary, if a given size increment would have crossed it.
            </summary>
            <param name="offset">The starting offset to align, if needed.</param>
            <param name="size">The size increment to apply to <paramref name="offset"/>.</param>
            <param name="alignment">The alignment boundary to calculate the final offset.</param>
            <returns>A valid starting offset for the specified alignment.</returns>
        </member>
        <member name="T:ComputeSharp.Core.Extensions.ComPtrExtensions">
            <summary>
            Helper methods for working with the <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Core.Extensions.ComPtrExtensions.AsIUnknown``1(TerraFX.Interop.Windows.ComPtr{``0}@)">
            <summary>
            Reinterprets the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance as one of type <see cref="T:TerraFX.Interop.Windows.IUnknown"/>.
            </summary>
            <typeparam name="T">The type of the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</typeparam>
            <param name="ptr">The input <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to upcast.</param>
            <returns>A <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance of type <see cref="T:TerraFX.Interop.Windows.IUnknown"/>.</returns>
            <remarks>
            This method is meant to be used in a chained expression and it does not increment the reference
            count for the input pointer. Do not expose the return value of this extension to consumers.
            </remarks>
        </member>
        <member name="M:ComputeSharp.Core.Extensions.ComPtrExtensions.GetVoidAddressOf``1(TerraFX.Interop.Windows.ComPtr{``0}@)">
            <summary>
            Gets the address of the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance as a raw <see langword="void"/> double pointer.
            </summary>
            <typeparam name="T">The type to wrap in the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</typeparam>
            <param name="ptr">The input <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to get the address for.</param>
            <returns>The raw pointer to the input <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</returns>
            <remarks>This method is only valid when the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance is on the stack or pinned.</remarks>
        </member>
        <member name="M:ComputeSharp.Core.Extensions.ComPtrExtensions.Move``1(TerraFX.Interop.Windows.ComPtr{``0}@)">
            <summary>
            Moves the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance and resets it without releasing the reference.
            </summary>
            <typeparam name="T">The type to wrap in the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</typeparam>
            <param name="ptr">The input <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to move.</param>
            <returns>The moved <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</returns>
        </member>
        <member name="T:ComputeSharp.Core.Extensions.HRESULTExtensions">
            <summary>
            Helper methods to efficiently throw exceptions.
            </summary>
        </member>
        <member name="M:ComputeSharp.Core.Extensions.HRESULTExtensions.Assert(TerraFX.Interop.Windows.HRESULT)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.Win32Exception"/> if <paramref name="result"/> represents an error.
            </summary>
            <param name="result">The input <see cref="T:TerraFX.Interop.Windows.HRESULT"/> to check.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if <paramref name="result"/> represents an error.</exception>
        </member>
        <member name="M:ComputeSharp.Core.Extensions.HRESULTExtensions.Assert(System.Int32)">
            <summary>
            Throws a <see cref="T:System.ComponentModel.Win32Exception"/> if <paramref name="result"/> represents an error.
            </summary>
            <param name="result">The input <see cref="T:System.Int32"/> to check.</param>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if <paramref name="result"/> represents an error.</exception>
        </member>
        <member name="M:ComputeSharp.Core.Extensions.HRESULTExtensions.IsDeviceLostReason(TerraFX.Interop.Windows.HRESULT)">
            <summary>
            Checks whether or not a given <see cref="T:TerraFX.Interop.Windows.HRESULT"/> represents a device lost reason.
            </summary>
            <param name="result">The input <see cref="T:TerraFX.Interop.Windows.HRESULT"/> to check.</param>
            <returns>Whether or not a given <see cref="T:TerraFX.Interop.Windows.HRESULT"/> represents a device lost reason.</returns>
            <remarks>
            An <see cref="T:TerraFX.Interop.Windows.HRESULT"/> is a device lost reason when it has one of the following values:
            <list type="bullet">
                <item><see cref="F:TerraFX.Interop.DirectX.DXGI.DXGI_ERROR_DEVICE_HUNG"/></item>
                <item><see cref="F:TerraFX.Interop.DirectX.DXGI.DXGI_ERROR_DEVICE_REMOVED"/></item>
                <item><see cref="F:TerraFX.Interop.DirectX.DXGI.DXGI_ERROR_DEVICE_RESET"/></item>
                <item><see cref="F:TerraFX.Interop.DirectX.DXGI.DXGI_ERROR_DRIVER_INTERNAL_ERROR"/></item>
                <item><see cref="F:TerraFX.Interop.DirectX.DXGI.DXGI_ERROR_INVALID_CALL"/></item>
                <item><see cref="F:TerraFX.Interop.DirectX.DXGI.DXGI_ERROR_ACCESS_DENIED"/></item>
            </list>
            </remarks>
        </member>
        <member name="T:ComputeSharp.Bgra32">
            <summary>
            Packed pixel type containing four 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in blue, green, red, and alpha order (least significant to most significant byte).
            The format is binary compatible with System.Drawing.Imaging.PixelFormat.Format32bppArgb.
            <para>
            Ranges from [0, 0, 0, 0] to [1, 1, 1, 1] in vector form.
            </para>
            </summary>
            <remarks>This struct is fully mutable.</remarks>
        </member>
        <member name="F:ComputeSharp.Bgra32.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Bgra32.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Bgra32.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Bgra32.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:ComputeSharp.Bgra32.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Bgra32"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:ComputeSharp.Bgra32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Bgra32"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="P:ComputeSharp.Bgra32.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.Bgra32"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.Bgra32.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Bgra32.op_Equality(ComputeSharp.Bgra32,ComputeSharp.Bgra32)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Bgra32"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Bgra32"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Bgra32"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Bgra32.op_Inequality(ComputeSharp.Bgra32,ComputeSharp.Bgra32)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Bgra32"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Bgra32"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Bgra32"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Bgra32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Bgra32.Equals(ComputeSharp.Bgra32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Bgra32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Bgra32.ToString">
            <inheritdoc />
        </member>
        <member name="T:ComputeSharp.ImageFormat">
            <summary>
            An <see langword="enum"/> representing a supported image format.
            </summary>
        </member>
        <member name="F:ComputeSharp.ImageFormat.Bmp">
            <summary>
            The BMP format.
            </summary>
        </member>
        <member name="F:ComputeSharp.ImageFormat.Png">
            <summary>
            The PNG format.
            </summary>
        </member>
        <member name="F:ComputeSharp.ImageFormat.Jpeg">
            <summary>
            The JPEG format.
            </summary>
        </member>
        <member name="F:ComputeSharp.ImageFormat.Wmp">
            <summary>
            The WMP format (also used for .jxr, .hdp, .wdp and .wmp files).
            </summary>
        </member>
        <member name="F:ComputeSharp.ImageFormat.Tiff">
            <summary>
            The TIFF format.
            </summary>
        </member>
        <member name="F:ComputeSharp.ImageFormat.Dds">
            <summary>
            The DDS format.
            </summary>
        </member>
        <member name="T:ComputeSharp.IPixel`2">
            <summary>
            An interface representing a pixel type and its normalized representation on the GPU side, when used within a shader.
            </summary>
            <typeparam name="T">The pixel type, when stored in memory (either on the CPU or the GPU side).</typeparam>
            <typeparam name="TPixel">The type of pixel when normalized and used within a shader.</typeparam>
        </member>
        <member name="M:ComputeSharp.IPixel`2.ToPixel">
            <summary>
            Converts the current <typeparamref name="T"/> value into its normalized <typeparamref name="TPixel"/> representation.
            </summary>
            <returns>The <typeparamref name="TPixel"/> representation for the current value.</returns>
            <remarks>
            This method is primarily meant to be used to support
            <see cref="M:ComputeSharp.ComputeContextExtensions.Fill``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``0},``0)"/>
            and <see cref="M:ComputeSharp.ComputeContextExtensions.Fill``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture3D{``0},``0)"/>.
            </remarks>
        </member>
        <member name="T:ComputeSharp.R16">
            <summary>
            Packed pixel type containing a single 16-bit unsigned normalized channel value.
            <para>
            Ranges from [0, 0, 0, 0] to [1, 0, 0, 0] in vector form.
            </para>
            </summary>
        </member>
        <member name="F:ComputeSharp.R16.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="M:ComputeSharp.R16.#ctor(System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.R16"/> struct.
            </summary>
            <param name="r">The red component.</param>
        </member>
        <member name="P:ComputeSharp.R16.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.R16"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.R16.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R16.op_Equality(ComputeSharp.R16,ComputeSharp.R16)">
            <summary>
            Compares two <see cref="T:ComputeSharp.R16"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.R16"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.R16"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.R16.op_Inequality(ComputeSharp.R16,ComputeSharp.R16)">
            <summary>
            Compares two <see cref="T:ComputeSharp.R16"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.R16"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.R16"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.R16.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R16.Equals(ComputeSharp.R16)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R16.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.R8">
            <summary>
            Packed pixel type containing a single 8-bit unsigned normalized channel value.
            <para>
            Ranges from [0, 0, 0, 0] to [1, 0, 0, 0] in vector form.
            </para>
            </summary>
        </member>
        <member name="F:ComputeSharp.R8.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="M:ComputeSharp.R8.#ctor(System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.R8"/> struct.
            </summary>
            <param name="r">The red component.</param>
        </member>
        <member name="P:ComputeSharp.R8.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.R8"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.R8.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R8.op_Equality(ComputeSharp.R8,ComputeSharp.R8)">
            <summary>
            Compares two <see cref="T:ComputeSharp.R8"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.R8"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.R8"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.R8.op_Inequality(ComputeSharp.R8,ComputeSharp.R8)">
            <summary>
            Compares two <see cref="T:ComputeSharp.R8"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.R8"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.R8"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.R8.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R8.Equals(ComputeSharp.R8)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R8.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.R8.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Rg16">
            <summary>
            Packed pixel type containing two 8-bit unsigned normalized values ranging from 0 to 255.
            <para>
            Ranges from [0, 0, 0, 0] to [1, 1, 0, 0] in vector form.
            </para>
            </summary>
        </member>
        <member name="F:ComputeSharp.Rg16.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rg16.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rg16.#ctor(System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Rg16"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
        </member>
        <member name="P:ComputeSharp.Rg16.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.Rg16"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rg16.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg16.op_Equality(ComputeSharp.Rg16,ComputeSharp.Rg16)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rg16"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rg16"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rg16"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rg16.op_Inequality(ComputeSharp.Rg16,ComputeSharp.Rg16)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rg16"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rg16"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rg16"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rg16.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg16.Equals(ComputeSharp.Rg16)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg16.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg16.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Rg32">
            <summary>
            Packed pixel type containing two 16-bit unsigned normalized values ranging from 0 to 255.
            <para>
            Ranges from [0, 0, 0, 0] to [1, 1, 0, 0] in vector form.
            </para>
            </summary>
        </member>
        <member name="F:ComputeSharp.Rg32.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rg32.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rg32.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Rg32"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
        </member>
        <member name="P:ComputeSharp.Rg32.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.Rg32"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rg32.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg32.op_Equality(ComputeSharp.Rg32,ComputeSharp.Rg32)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rg32"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rg32"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rg32"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rg32.op_Inequality(ComputeSharp.Rg32,ComputeSharp.Rg32)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rg32"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rg32"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rg32"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rg32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg32.Equals(ComputeSharp.Rg32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rg32.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Rgba32">
            <summary>
            Packed pixel type containing four 8-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in red, green, blue, and alpha order (least significant to most significant byte).
            <para>
            Ranges from [0, 0, 0, 0] to [1, 1, 1, 1] in vector form.
            </para>
            </summary>
            <remarks>This struct is fully mutable.</remarks>
        </member>
        <member name="F:ComputeSharp.Rgba32.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rgba32.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rgba32.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rgba32.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rgba32.#ctor(System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Rgba32"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:ComputeSharp.Rgba32.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Rgba32"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="P:ComputeSharp.Rgba32.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.Rgba32"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rgba32.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba32.op_Equality(ComputeSharp.Rgba32,ComputeSharp.Rgba32)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rgba32"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rgba32"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rgba32"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rgba32.op_Inequality(ComputeSharp.Rgba32,ComputeSharp.Rgba32)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rgba32"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rgba32"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rgba32"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rgba32.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba32.Equals(ComputeSharp.Rgba32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba32.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba32.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Rgba64">
            <summary>
            Packed pixel type containing four 16-bit unsigned normalized values ranging from 0 to 255.
            The color components are stored in red, green, blue, and alpha order (least significant to most significant byte).
            <para>
            Ranges from [0, 0, 0, 0] to [1, 1, 1, 1] in vector form.
            </para>
            </summary>
            <remarks>This struct is fully mutable.</remarks>
        </member>
        <member name="F:ComputeSharp.Rgba64.R">
            <summary>
            The red component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rgba64.G">
            <summary>
            The green component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rgba64.B">
            <summary>
            The blue component.
            </summary>
        </member>
        <member name="F:ComputeSharp.Rgba64.A">
            <summary>
            The alpha component.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rgba64.#ctor(System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Rgba64"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
        </member>
        <member name="M:ComputeSharp.Rgba64.#ctor(System.UInt16,System.UInt16,System.UInt16,System.UInt16)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Rgba64"/> struct.
            </summary>
            <param name="r">The red component.</param>
            <param name="g">The green component.</param>
            <param name="b">The blue component.</param>
            <param name="a">The alpha component.</param>
        </member>
        <member name="P:ComputeSharp.Rgba64.PackedValue">
            <summary>
            Gets or sets the packed representation of the <see cref="T:ComputeSharp.Rgba64"/> struct.
            </summary>
        </member>
        <member name="M:ComputeSharp.Rgba64.ToPixel">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba64.op_Equality(ComputeSharp.Rgba64,ComputeSharp.Rgba64)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rgba64"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rgba64"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rgba64"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rgba64.op_Inequality(ComputeSharp.Rgba64,ComputeSharp.Rgba64)">
            <summary>
            Compares two <see cref="T:ComputeSharp.Rgba64"/> objects for equality.
            </summary>
            <param name="left">The <see cref="T:ComputeSharp.Rgba64"/> on the left side of the operand.</param>
            <param name="right">The <see cref="T:ComputeSharp.Rgba64"/> on the right side of the operand.</param>
            <returns>
            True if the <paramref name="left"/> parameter is not equal to the <paramref name="right"/> parameter; otherwise, false.
            </returns>
        </member>
        <member name="M:ComputeSharp.Rgba64.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba64.Equals(ComputeSharp.Rgba64)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba64.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Rgba64.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.IComputeShader">
            <summary>
            An <see langword="interface"/> representing a compute shader.
            </summary>
        </member>
        <member name="M:ComputeSharp.IComputeShader.Execute">
            <summary>
            Executes the current compute shader.
            </summary>
        </member>
        <member name="T:ComputeSharp.IPixelShader`1">
            <summary>
            An <see langword="interface"/> representing a pixel shader.
            </summary>
        </member>
        <member name="M:ComputeSharp.IPixelShader`1.Execute">
            <summary>
            Executes the current pixel shader.
            </summary>
            <returns>The pixel value for the current invocation.</returns>
        </member>
        <member name="T:ComputeSharp.__Internals.IBytecodeLoader">
            <summary>
            A base <see langword="interface"/> representing a bytecode loader for a shader being dispatched.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.IBytecodeLoader.LoadDynamicBytecode(System.IntPtr)">
            <summary>
            Loads a dynamic shader bytecode.
            </summary>
            <param name="handle">An opaque handle to the shader bytecode.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the shader has already been initialized.</exception>
            <exception cref="T:System.NotSupportedException">Thrown if <paramref name="handle"/> is <see langword="null"/> (indicating an unsupported configuration).</exception>
        </member>
        <member name="M:ComputeSharp.__Internals.IBytecodeLoader.LoadEmbeddedBytecode(System.ReadOnlySpan{System.Byte})">
            <summary>
            Loads the embedded shader bytecode for the shader being dispatched.
            </summary>
            <param name="bytecode">The shader bytecode.</param>
            <exception cref="T:System.InvalidOperationException">Thrown if the shader has already been initialized.</exception>
        </member>
        <member name="T:ComputeSharp.__Internals.IDispatchDataLoader">
            <summary>
            A base <see langword="interface"/> representing a data loader for a shader being dispatched.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.IDispatchDataLoader.LoadCapturedValues(System.ReadOnlySpan{System.UInt32})">
            <summary>
            Loads the captured values used by the shader to be dispatched.
            </summary>
            <param name="data">The sequence of serialized captured values.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.IDispatchDataLoader.LoadCapturedResources(System.ReadOnlySpan{System.UInt64})">
            <summary>
            Loads the captured resources used by the shader to be dispatched.
            </summary>
            <param name="data">The sequence of serialized resources.</param>
        </member>
        <member name="T:ComputeSharp.__Internals.IDispatchMetadataLoader">
            <summary>
            A base <see langword="interface"/> representing a metadatadata loader for a shader being dispatched.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.IDispatchMetadataLoader.LoadMetadataHandle(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{ComputeSharp.__Internals.ResourceDescriptor},System.IntPtr@)">
            <summary>
            Loads an opaque metadata handle from the given shader metadata.
            </summary>
            <param name="serializedMetadata">The serialized metadata for the current shader.</param>
            <param name="resourceDescriptors">The sequence of resource descriptors for the current shader.</param>
            <param name="result">The resulting opaque metadata handle.</param>
        </member>
        <member name="T:ComputeSharp.__Internals.IShader">
            <summary>
            A base <see langword="interface"/> representing a given shader that can be dispatched.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.IShader.GetDispatchId">
            <summary>
            Gets a unique dispatch identifier for the shader.
            </summary>
            <returns>The unique dispatch identifier for the shader.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.IShader.LoadDispatchData``1(``0@,ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads the dispatch data for the shader.
            </summary>
            <typeparam name="TLoader">The type of data loader being used.</typeparam>
            <param name="loader">The <typeparamref name="TLoader"/> instance to use to load the data.</param>
            <param name="device">The device the shader is being dispatched on.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.IShader.LoadDispatchMetadata``1(``0@,System.IntPtr@)">
            <summary>
            Loads an opaque metadata handle from the metadata of the current shader.
            </summary>
            <typeparam name="TLoader">The type of data loader being used.</typeparam>
            <param name="loader">The <typeparamref name="TLoader"/> instance to use to load the data.</param>
            <param name="result">The resulting opaque metadata handle.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.IShader.BuildHlslSource(ComputeSharp.__Internals.ArrayPoolStringBuilder@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Builds the HLSL source code for the current shader instance.
            </summary>
            <param name="builder">The resulting <see cref="T:ComputeSharp.__Internals.ArrayPoolStringBuilder"/> instance containing the HLSL source.</param>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.IShader.LoadBytecode``1(``0@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Loads the bytecode for the current shader.
            </summary>
            <typeparam name="TLoader">The type of bytecode loader being used.</typeparam>
            <param name="loader">The <typeparamref name="TLoader"/> instance to use to load the bytecode.</param>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
            <exception cref="T:System.NotSupportedException">Thrown if the bytecode required runtime compilation and it wasn't supported on the current configuration.</exception>
        </member>
        <member name="T:ComputeSharp.__Internals.GraphicsResourceHelper">
            <summary>
            A helper class with some proxy methods to expose to generated code in external projects.
            </summary>
        </member>
        <member name="T:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource">
            <summary>
            An interface for non-generic graphics resource types.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given resource for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the resource.</returns> 
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <summary>
            Validates the given resource for usage with a specified device, and retrieves its GPU and CPU descriptor handles for a clear operation.
            </summary>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <param name="isNormalized">Indicates whether the current resource uses a normalized format.</param>
            <returns>The GPU and CPU descriptor handles for the resource.</returns> 
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <summary>
            Validates the given resource for usage with a specified device, and retrieves the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.
            </summary>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <param name="lease">The <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> value for the returned <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.</param>
            <returns>The the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.</returns> 
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <summary>
            Validates the given resource for usage with a specified device, and retrieves the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object, along with the transition states.
            </summary>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <param name="resourceState">The target state to transition the resource to.</param>
            <param name="d3D12Resource">The the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.</param>
            <param name="lease">The <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> value for the returned <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.</param>
            <returns>The resource states for <paramref name="d3D12Resource"/>, before and after the transition.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.Resources.Buffer{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given buffer for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the buffer.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.ReadOnlyTexture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.ReadWriteTexture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadOnlyTexture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadOnlyNormalizedTexture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="TPixel">The type of normalized values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture1D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadWriteNormalizedTexture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="TPixel">The type of normalized values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture1D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.ReadOnlyTexture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.ReadWriteTexture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadOnlyTexture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadOnlyNormalizedTexture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="TPixel">The type of normalized values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture2D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadWriteNormalizedTexture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="TPixel">The type of normalized values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture2D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.ReadOnlyTexture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.ReadWriteTexture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadOnlyTexture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="T">The type of values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadOnlyNormalizedTexture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="TPixel">The type of normalized values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture3D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="M:ComputeSharp.__Internals.GraphicsResourceHelper.ValidateAndGetGpuDescriptorHandle``1(ComputeSharp.IReadWriteNormalizedTexture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Validates the given texture for usage with a specified device, and retrieves its GPU descriptor handle.
            </summary>
            <typeparam name="TPixel">The type of normalized values stored in the input texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture3D`1"/> instance to check.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <returns>The GPU descriptor handle for the texture.</returns>
        </member>
        <member name="T:ComputeSharp.__Internals.ResourceDescriptor">
            <summary>
            An opaque type describing a captured resource to be used in a shader.
            </summary>
        </member>
        <member name="F:ComputeSharp.__Internals.ResourceDescriptor.RangeType">
            <inheritdoc cref="F:TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1.RangeType"/>
        </member>
        <member name="F:ComputeSharp.__Internals.ResourceDescriptor.NumDescriptors">
            <inheritdoc cref="F:TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1.NumDescriptors"/>
        </member>
        <member name="F:ComputeSharp.__Internals.ResourceDescriptor.BaseShaderRegister">
            <inheritdoc cref="F:TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1.BaseShaderRegister"/>
        </member>
        <member name="F:ComputeSharp.__Internals.ResourceDescriptor.RegisterSpace">
            <inheritdoc cref="F:TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1.RegisterSpace"/>
        </member>
        <member name="F:ComputeSharp.__Internals.ResourceDescriptor.Flags">
            <inheritdoc cref="F:TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1.Flags"/>
        </member>
        <member name="F:ComputeSharp.__Internals.ResourceDescriptor.OffsetInDescriptorsFromTableStart">
            <inheritdoc cref="F:TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1.OffsetInDescriptorsFromTableStart"/>
        </member>
        <member name="M:ComputeSharp.__Internals.ResourceDescriptor.Create(System.Int32,System.UInt32,ComputeSharp.__Internals.ResourceDescriptor@)">
            <summary>
            Initializes a new <see cref="T:ComputeSharp.__Internals.ResourceDescriptor"/> instance.
            </summary>
            <param name="type">The type of resource to create the descriptor for.</param>
            <param name="offset">The offset in the resource from the start of the shader mapping.</param>
            <param name="descriptor">The resulting <see cref="T:ComputeSharp.__Internals.ResourceDescriptor"/> instance.</param>
        </member>
        <member name="T:ComputeSharp.__Internals.ArrayPoolStringBuilder">
            <summary>
            A helper type that implements a pooled buffer writer for <see cref="T:System.Char"/> values.
            </summary>
        </member>
        <member name="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.array">
            <summary>
            The underlying <see cref="T:System.Char"/> array.
            </summary>
        </member>
        <member name="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.index">
            <summary>
            The starting offset within <see cref="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.array"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.Create(System.Int32)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.__Internals.ArrayPoolStringBuilder"/> instance ready to use.
            </summary>
            <param name="sizeHint">The size hint for the internal buffer to allocate.</param>
            <returns>A new <see cref="T:ComputeSharp.__Internals.ArrayPoolStringBuilder"/> instance with default values.</returns>
        </member>
        <member name="P:ComputeSharp.__Internals.ArrayPoolStringBuilder.WrittenSpan">
            <summary>
            Gets the data written to the underlying buffer so far, as a <see cref="T:System.ReadOnlySpan`1"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.Append(System.Char)">
            <summary>
            Appends the input character to the current buffer.
            </summary>
            <param name="value">The input character to write.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.Append(System.String)">
            <summary>
            Appends the input sequence of characters to the current buffer.
            </summary>
            <param name="value">The input characters to write.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.Append(System.Int32)">
            <summary>
            Appends the text representation of the input value to the current buffer.
            </summary>
            <param name="value">The input value to write.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.EnsureCapacity(System.Int32)">
            <summary>
            Ensures that <see cref="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.array"/> has enough free space to contain a given number of new items.
            </summary>
            <param name="requestedSize">The minimum number of items to ensure space for in <see cref="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.array"/>.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.ResizeBuffer(System.Int32)">
            <summary>
            Resizes <see cref="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.array"/> to ensure it can fit the specified number of new items.
            </summary>
            <param name="sizeHint">The minimum number of items to ensure space for in <see cref="F:ComputeSharp.__Internals.ArrayPoolStringBuilder.array"/>.</param>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.__Internals.ArrayPoolStringBuilder.DebugView">
            <summary>
            A debug proxy used for displaying debug info.
            </summary>
        </member>
        <member name="M:ComputeSharp.__Internals.ArrayPoolStringBuilder.DebugView.#ctor(ComputeSharp.__Internals.ArrayPoolStringBuilder)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.__Internals.ArrayPoolStringBuilder.DebugView"/> class with the specified parameters.
            </summary>
            <param name="builder">The input <see cref="T:ComputeSharp.__Internals.ArrayPoolStringBuilder"/> instance to display.</param>
        </member>
        <member name="P:ComputeSharp.__Internals.ArrayPoolStringBuilder.DebugView.Text">
            <summary>
            Gets the text to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Graphics.Commands.CommandList">
            <summary>
            A command list to set and execute operations on the GPU.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.CommandList.device">
            <summary>
            The <see cref="P:ComputeSharp.Graphics.Commands.CommandList.GraphicsDevice"/> instance associated with the current command list.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.CommandList.d3D12CommandListType">
            <summary>
            The command list type being used by the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.CommandList.d3D12GraphicsCommandList">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object in use by the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.CommandList.d3D12CommandAllocator">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> object in use by the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.#ctor(ComputeSharp.GraphicsDevice,TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance with the specified parameters.
            </summary>
            <param name="device">The target <see cref="P:ComputeSharp.Graphics.Commands.CommandList.GraphicsDevice"/> instance to use.</param>
            <param name="d3D12CommandListType">The type of command list to create.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.#ctor(ComputeSharp.GraphicsDevice,TerraFX.Interop.DirectX.ID3D12PipelineState*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance with the specified parameters.
            </summary>
            <param name="device">The target <see cref="P:ComputeSharp.Graphics.Commands.CommandList.GraphicsDevice"/> instance to use.</param>
            <param name="d3D12PipelineState">The <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance to use for the new command list.</param>
        </member>
        <member name="P:ComputeSharp.Graphics.Commands.CommandList.IsAllocated">
            <summary>
            Gets whether or not the curreent <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance is allocated.
            </summary>
        </member>
        <member name="P:ComputeSharp.Graphics.Commands.CommandList.GraphicsDevice">
            <summary>
            Gets the <see cref="P:ComputeSharp.Graphics.Commands.CommandList.GraphicsDevice"/> instance associated with the current command list.
            </summary>
        </member>
        <member name="P:ComputeSharp.Graphics.Commands.CommandList.D3D12CommandListType">
            <summary>
            Gets the command list type being used by the current instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.Graphics.Commands.CommandList.D3D12GraphicsCommandList">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object in use by the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.DetachD3D12CommandAllocator">
            <summary>
            Detaches the <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> object in use by the current instance.
            </summary>
            <returns>The <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> object in use, with ownership.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.DetachD3D12CommandList">
            <summary>
            Detaches the <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object in use by the current instance.
            </summary>
            <returns>The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object in use, with ownership.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.GetD3D12CommandListPinnableAddressOf">
            <summary>
            Gets a pointer to the <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandList"/> object in use by the current instance.
            </summary>
            <returns>A double pointer to the current <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandList"/> object to execute.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.ExecuteAndWaitForCompletion">
            <summary>
            Executes the commands in the current commands list, and waits for completion.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.ExecuteAndWaitForCompletionAsync">
            <summary>
            Executes the commands in the current commands list, returns a <see cref="T:System.Threading.Tasks.ValueTask"/>.
            </summary>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask"/> to await for the operations to complete.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.CommandList.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool">
            <summary>
            A type that acts as a pool to get new <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandList"/> instances wheen needed.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.d3D12CommandListType">
            <summary>
            The command list type being used by the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.d3D12CommandListBundleQueue">
            <summary>
            The queue of <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.D3D12CommandListBundle"/> items with the available command lists.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.#ctor(TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool"/> instance with the specified parameters.
            </summary>
            <param name="d3D12CommandListType">The command list type to use.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.Rent(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.ID3D12PipelineState*,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*@,TerraFX.Interop.DirectX.ID3D12CommandAllocator*@)">
            <summary>
            Rents a <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> and <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> pair.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> renting the command list.</param>
            <param name="d3D12PipelineState">The <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance to use for the new command list.</param>
            <param name="d3D12CommandList">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value.</param>
            <param name="d3D12CommandAllocator">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.Return(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*,TerraFX.Interop.DirectX.ID3D12CommandAllocator*)">
            <summary>
            Returns a <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> and <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> pair.
            </summary>
            <param name="d3D12CommandList">The returned <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value.</param>
            <param name="d3D12CommandAllocator">The returned <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.CreateCommandListAndAllocator(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.ID3D12PipelineState*,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*@,TerraFX.Interop.DirectX.ID3D12CommandAllocator*@)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandList"/> and <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> pair.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> renting the command list.</param>
            <param name="d3D12PipelineState">The <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance to use for the new command list.</param>
            <param name="d3D12CommandList">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value.</param>
            <param name="d3D12CommandAllocator">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.D3D12CommandListBundle">
            <summary>
            A type representing a bundle of a cached command list and related allocator.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.D3D12CommandListBundle.D3D12CommandList">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value for the current entry.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.D3D12CommandListBundle.D3D12CommandAllocator">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value for the current entry.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.D3D12CommandListBundle.#ctor(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*,TerraFX.Interop.DirectX.ID3D12CommandAllocator*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.D3D12CommandListBundle"/> instance with the given parameters.
            </summary>
            <param name="d3D12CommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value to wrap.</param>
            <param name="d3D12CommandAllocator">The <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value to wrap.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator">
            <summary>
            A type that provides logic to create resource descriptors for a <see cref="T:ComputeSharp.GraphicsDevice"/> instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.DescriptorsPerHeap">
            <summary>
            The default number of available descriptors per heap.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.d3D12DescriptorHeap">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12DescriptorHeap"/> in use for the current <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator"/> instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.d3D12DescriptorHeapNonShaderVisible">
            <summary>
            The non shader visible <see cref="T:TerraFX.Interop.DirectX.ID3D12DescriptorHeap"/> in use for the current <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator"/> instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.d3D12DescriptorHandlePairs">
            <summary>
            The array of <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> items with the available descriptor handles.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.head">
            <summary>
            The head index for the queue.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.tail">
            <summary>
            The tail index for the queue.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.size">
            <summary>
            The current size of the queue (ie. the number of remaining pairs in <see cref="F:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.d3D12DescriptorHandlePairs"/>).
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.#ctor(TerraFX.Interop.DirectX.ID3D12Device*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance to use.</param>
        </member>
        <member name="P:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.D3D12DescriptorHeap">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12DescriptorHeap"/> in use for the current <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator"/> instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.Rent(ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles@)">
            <summary>
            Rents a new bundle of CPU and GPU handles to use in a resource.
            </summary>
            <param name="d3D12ResourceDescriptorHandles">The resulting <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.Return(ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles@)">
            <summary>
            Returns a CPU and GPU handle pair for later use.
            </summary>
            <param name="d3D12ResourceDescriptorHandles">The returned <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles">
            <summary>
            A type representing a bundle of reusable resource descriptor handles.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles.D3D12CpuDescriptorHandle">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value for the current entry.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles.D3D12GpuDescriptorHandle">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value for the current entry.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles.D3D12CpuDescriptorHandleNonShaderVisible">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value for the current entry, non shader visible.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles.#ctor(TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance with the given parameters.
            </summary>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value to wrap.</param>
            <param name="d3D12GpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value to wrap.</param>
            <param name="d3D12CpuDescriptorHandleNonShaderVisible">The non shader visible <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value to wrap.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.ID3D12AllocationExtensions">
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12AllocationExtensions.GetD3D12Resource(ComputeSharp.Interop.Allocation.ID3D12Allocation@)">
            <summary>
            Gets the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> for a given <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object.
            </summary>
            <param name="allocation">The input <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> reference for the current <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.</returns>
            <remarks>
            The returned resource should not be used after the current allocation instance has been released.
            </remarks>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions">
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommittedResource(TerraFX.Interop.DirectX.ID3D12Device@,ComputeSharp.Graphics.Resources.Enums.ResourceType,System.UInt64,System.Boolean)">
            <summary>
            Creates a committed resource for a given buffer type.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="sizeInBytes">The size in bytes of the current buffer.</param>
            <param name="isCacheCoherentUMA">Indicates whether or not the current device has a cache coherent UMA architecture.</param>
            <returns>An <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> reference for the current buffer.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommittedResource(TerraFX.Interop.DirectX.ID3D12Device@,ComputeSharp.Graphics.Resources.Enums.ResourceType,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.Boolean,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Creates a committed resource for a given 1D texture type.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="isCacheCoherentUMA">Indicates whether or not the current device has a cache coherent UMA architecture.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <returns>An <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> reference for the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommittedResource(TerraFX.Interop.DirectX.ID3D12Device@,ComputeSharp.Graphics.Resources.Enums.ResourceType,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,System.Boolean,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Creates a committed resource for a given 2D texture type.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="isCacheCoherentUMA">Indicates whether or not the current device has a cache coherent UMA architecture.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <returns>An <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> reference for the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommittedResource(TerraFX.Interop.DirectX.ID3D12Device@,ComputeSharp.Graphics.Resources.Enums.ResourceType,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,System.UInt16,System.Boolean,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Creates a committed resource for a given 3D texture type.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="depth">The depth of the texture resource.</param>
            <param name="isCacheCoherentUMA">Indicates whether or not the current device has a cache coherent UMA architecture.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <returns>An <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> reference for the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateInfoQueue(TerraFX.Interop.DirectX.ID3D12Device@)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12InfoQueue"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the info queue.</param>
            <returns>A pointer to the newly created <see cref="T:TerraFX.Interop.DirectX.ID3D12InfoQueue"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the info queue fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommandQueue(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandQueue"/> of the specified type, for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the command queue.</param>
            <param name="type">The type of command queue to create.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandQueue"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the command queue fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateFence(TerraFX.Interop.DirectX.ID3D12Device@)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12Fence"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the fence.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12Fence"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the command queue fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateDescriptorHeap(TerraFX.Interop.DirectX.ID3D12Device@,System.UInt32,System.Boolean)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12DescriptorHeap"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the descriptor heap.</param>
            <param name="descriptorsCount">The number of descriptors to allocate.</param>
            <param name="isShaderVisible">Whether or not the descriptor heap should be shader visible.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12DescriptorHeap"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the command queue fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateConstantBufferView(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12Resource*,System.IntPtr,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a view for a constant buffer.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to create a view for.</param>
            <param name="bufferSize">The size of the target resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateShaderResourceView(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12Resource*,System.UInt32,System.UInt32,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a view for a readonly buffer.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to create a view for.</param>
            <param name="bufferSize">The size of the target resource.</param>
            <param name="elementSize">The size in byte of each item in the resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateShaderResourceView(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.DXGI_FORMAT,TerraFX.Interop.DirectX.D3D12_SRV_DIMENSION,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a view for a readonly texture.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to create a view for.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="d3D12SrvDimension">The <see cref="T:TerraFX.Interop.DirectX.D3D12_SRV_DIMENSION"/> value for the view to create.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateUnorderedAccessView(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12Resource*,System.UInt32,System.UInt32,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a view for a buffer that can be both read and written to.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to create a view for.</param>
            <param name="bufferSize">The size of the target resource.</param>
            <param name="elementSize">The size in byte of each item in the resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateUnorderedAccessView(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.DXGI_FORMAT,TerraFX.Interop.DirectX.D3D12_UAV_DIMENSION,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a view for a texture that can be both read and written to.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to create a view for.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="d3D12UavDimension">The <see cref="T:TerraFX.Interop.DirectX.D3D12_UAV_DIMENSION"/> value for the view to create.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateUnorderedAccessViewForClear(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE)">
            <summary>
            Creates a view for a buffer that will need to be cleared.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to create a view for.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="bufferSize">The size of the target resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
            <param name="d3D12CpuDescriptorHandleNonShaderVisible">The non shader visible<see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> instance for the current resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommandAllocator(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the command allocator.</param>
            <param name="d3D12CommandListType">The type of command list allocator to create.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the command allocator fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CreateCommandList(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE,TerraFX.Interop.DirectX.ID3D12CommandAllocator*,TerraFX.Interop.DirectX.ID3D12PipelineState*)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the command list.</param>
            <param name="d3D12CommandListType">The type of command list to create.</param>
            <param name="d3D12CommandAllocator">The command allocator to use to create the command list.</param>
            <param name="d3D12PipelineState">The initial <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> object, if present.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the command list fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.GetCopyableFootprint(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT@,System.UInt64@,System.UInt64@)">
            <summary>
            Gets the layout data for a target resource.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to get the layout info.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="d3D12PlacedSubresourceFootprint">The resulting layout info for the resource.</param>
            <param name="rowSizeInBytes">The size in bytes of each row in the resource.</param>
            <param name="totalSizeInBytes">The total number of bytes for the resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.GetCopyableFootprint(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT@,System.UInt64@,System.UInt64@)">
            <summary>
            Gets the layout data for a target resource.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to get the layout info.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="d3D12PlacedSubresourceFootprint">The resulting layout info for the resource.</param>
            <param name="rowSizeInBytes">The size in bytes of each row in the resource.</param>
            <param name="totalSizeInBytes">The total number of bytes for the resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.GetCopyableFootprint(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,System.UInt16,TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT@,System.UInt64@,System.UInt64@)">
            <summary>
            Gets the layout data for a target resource.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to get the layout info.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="depth">The depth of the texture resource.</param>
            <param name="d3D12PlacedSubresourceFootprint">The resulting layout info for the resource.</param>
            <param name="rowSizeInBytes">The size in bytes of each row in the resource.</param>
            <param name="totalSizeInBytes">The total number of bytes for the resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.CheckFeatureSupport``1(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.D3D12_FEATURE)">
            <summary>
            Checks the feature support of a given type for a given device.
            </summary>
            <typeparam name="TFeature">The type of feature support data to retrieve.</typeparam>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to check features for.</param>
            <param name="d3D12Feature">The type of features to check.</param>
            <returns>A <see typeparamref="TFeature"/> value with the features data.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.IsDxgiFormatSupported(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.DXGI_FORMAT,TerraFX.Interop.DirectX.D3D12_FORMAT_SUPPORT1)">
            <summary>
            Checks whether or not a given DXGI format is supported for the specified resource type.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to check features for.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> type to check support for.</param>
            <param name="d3D12FormatSupport1">The resource type to check support for.</param>
            <returns>Whether or not the input device supports the requested format for the specified resource type.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12DeviceExtensions.IsShaderModelSupported(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.D3D_SHADER_MODEL)">
            <summary>
            Checks whether or not a given shader model is supported.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to check features for.</param>
            <param name="d3DShaderModel">The <see cref="T:TerraFX.Interop.DirectX.D3D_SHADER_MODEL"/> value to check support for.</param>
            <returns>Whether or not the input device supports the requested shader model.</returns>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions">
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.CopyTextureRegion(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*,System.UInt32,System.UInt32,System.UInt16,TerraFX.Interop.DirectX.ID3D12Resource*,System.UInt32,System.UInt32,System.UInt16,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Copies a texture memory region from one resource (a texture) to another (a buffer).
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12ResourceDestination">The destination <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> (a buffer) to write to.</param>
            <param name="d3D12PlacedSubresourceFootprintDestination">The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> value describing <paramref name="d3D12ResourceDestination"/>.</param>
            <param name="destinationX">The horizontal offset in the destination buffer.</param>
            <param name="destinationY">The vertical offset in the destination buffer.</param>
            <param name="destinationZ">The depthwise offset in the destination buffer.</param>
            <param name="d3D12ResourceSource">The source <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> (a texture) to read from.</param>
            <param name="sourceX">The horizontal offset in the source texture.</param>
            <param name="sourceY">The vertical offset in the source texture.</param>
            <param name="sourceZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to read from.</param>
            <param name="height">The height of the memory area to read from.</param>
            <param name="depth">The depth of the memory area to read from.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.CopyTextureRegion(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*,System.UInt32,System.UInt32,System.UInt16,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT*,System.UInt32,System.UInt32,System.UInt16,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Copies a texture memory region from one resource (a buffer) to another (a texture).
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12ResourceDestination">The destination <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> (a texture) to write to.</param>
            <param name="destinationX">The horizontal offset in the destination texture.</param>
            <param name="destinationY">The vertical offset in the destination texture.</param>
            <param name="destinationZ">The depthwise offset in the destination texture.</param>
            <param name="d3D12ResourceSource">The source <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> (a buffer) to read from.</param>
            <param name="d3D12PlacedSubresourceFootprintSource">The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> value describing <paramref name="d3D12ResourceSource"/>.</param>
            <param name="sourceX">The horizontal offset in the source buffer.</param>
            <param name="sourceY">The vertical offset in the source buffer.</param>
            <param name="sourceZ">The depthwise offset in the source buffer.</param>
            <param name="width">The width of the memory area to read from.</param>
            <param name="height">The height of the memory area to read from.</param>
            <param name="depth">The depth of the memory area to read from.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.CopyTextureRegion(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*,System.UInt32,System.UInt32,System.UInt16,TerraFX.Interop.DirectX.ID3D12Resource*,System.UInt32,System.UInt32,System.UInt16,System.UInt32,System.UInt32,System.UInt16)">
            <summary>
            Copies a texture memory region from one texture to another.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12ResourceDestination">The destination <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> (a buffer) to write to.</param>
            <param name="destinationX">The horizontal offset in the destination buffer.</param>
            <param name="destinationY">The vertical offset in the destination buffer.</param>
            <param name="destinationZ">The depthwise offset in the destination buffer.</param>
            <param name="d3D12ResourceSource">The source <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> (a texture) to read from.</param>
            <param name="sourceX">The horizontal offset in the source texture.</param>
            <param name="sourceY">The vertical offset in the source texture.</param>
            <param name="sourceZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to read from.</param>
            <param name="height">The height of the memory area to read from.</param>
            <param name="depth">The depth of the memory area to read from.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.TransitionBarrier(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES)">
            <summary>
            Creates a resource barrier to transition a resource to a specific state.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to change state for.</param>
            <param name="d3D12ResourceStatesBefore">The starting <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the transition.</param>
            <param name="d3D12ResourceStatesAfter">The destnation <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the transition.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.UnorderedAccessViewBarrier(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*)">
            <summary>
            Inserts a UAV resource barrier for a specific resource.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.ClearUnorderedAccessView(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE,System.Boolean)">
            <summary>
            Clears a target UAV resource.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to clear.</param>
            <param name="d3D12GpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="isNormalized">Indicates whether the target resource uses a normalized format.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.FillUnorderedAccessView(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE,ComputeSharp.Float4)">
            <summary>
            Fills a target UAV resource.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to fill.</param>
            <param name="d3D12GpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="value">The value to use to fill the view.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12GraphicsCommandListExtensions.SetComputeRoot32BitConstants(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList@,System.ReadOnlySpan{System.UInt32})">
            <summary>
            Binds an input constant buffer to the first root parameter.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance in use.</param>
            <param name="data">The input buffer with the constant data to bind.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.ID3D12MemoryAllocatorExtensions">
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12MemoryAllocatorExtensions.AllocateResource(ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator@,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,System.UInt64)">
            <summary>
            Allocates a resource for a given buffer type.
            </summary>
            <param name="allocator">The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="sizeInBytes">The size in bytes of the current buffer.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> reference for the current <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12MemoryAllocatorExtensions.AllocateResource(ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator@,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Allocates a resource for a given 1D texture type.
            </summary>
            <param name="allocator">The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> reference for the current <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12MemoryAllocatorExtensions.AllocateResource(ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator@,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Allocates a resource for a given 2D texture type.
            </summary>
            <param name="allocator">The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> reference for the current <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12MemoryAllocatorExtensions.AllocateResource(ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator@,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,System.UInt16,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Allocates a resource for a given 3D texture type.
            </summary>
            <param name="allocator">The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance in use.</param>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="depth">The depth of the texture resource.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> reference for the current <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object.</returns>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.ID3D12ResourceExtensions">
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12ResourceExtensions.Map(TerraFX.Interop.DirectX.ID3D12Resource@)">
            <summary>
            Maps the current resource to a specified subresource.
            </summary>
            <param name="d3D12Resource">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to map.</param>
            <returns>A <see cref="T:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap"/> instance representing the mapped resource.</returns>
            <exception cref="T:System.Exception">Thrown when the mapping operation fails.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12ResourceExtensions.Unmap(TerraFX.Interop.DirectX.ID3D12Resource@)">
            <summary>
            Maps a given <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> memory area.
            </summary>
            <param name="d3D12Resource">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to map.</param>
            <returns>A pointer to the mapped area for <paramref name="d3D12Resource"/>.</returns>
            <remarks>Only use this method to unmap resources that were mapped with <see cref="M:ComputeSharp.Graphics.Extensions.ID3D12ResourceExtensions.Map(TerraFX.Interop.DirectX.ID3D12Resource@)"/>.</remarks>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.ID3D12ResourceExtensions.SetName(TerraFX.Interop.DirectX.ID3D12Resource@,System.Object)">
            <summary>
            Assigns a name to a given <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/>.
            </summary>
            <param name="d3D12Resource">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to set the name for.</param>
            <param name="wrapper">The wrapper object to get the name from.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:TerraFX.Interop.Windows.IWICStream"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.InitializeFromBufferWriter(TerraFX.Interop.Windows.IWICStream@,System.Buffers.IBufferWriter{System.Byte})">
            <summary>
            Initializes an input <see cref="T:TerraFX.Interop.Windows.IWICStream"/> wrapping a given <see cref="T:System.Buffers.IBufferWriter`1"/> instance.
            </summary>
            <param name="stream">The target <see cref="T:TerraFX.Interop.Windows.IWICStream"/> object to initialize.</param>
            <param name="destination">The input <see cref="T:System.Buffers.IBufferWriter`1"/> instance to wrap.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.HRESULT"/> value indicating the operation result.</returns>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper">
            <summary>
            A manual CCW implementation for an <see cref="T:TerraFX.Interop.Windows.IStream"/> object wrapping an <see cref="T:System.Buffers.IBufferWriter`1"/> instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.QueryInterfaceDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.QueryInterface(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Guid*,System.Void**)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.AddRefDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.AddRef(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.ReleaseDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Release(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.ReadDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Read(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.WriteDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Write(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SeekDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Seek(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SetSizeDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SetSize(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CopyToDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CopyTo(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CommitDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Commit(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.RevertDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Revert(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.LockRegionDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.LockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.UnlockRegionDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.UnlockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.StatDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Stat(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.STATSTG*,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CloneDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Clone(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.IStream**)"/>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.QueryInterfaceWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.QueryInterfaceDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.QueryInterface(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Guid*,System.Void**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.AddRefWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.AddRefDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.AddRef(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.ReleaseWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.ReleaseDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Release(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.ReadWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.ReadDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Read(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.WriteWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.WriteDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Write(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SeekWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SeekDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Seek(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SetSizeWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SetSizeDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SetSize(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CopyToWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CopyToDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CopyTo(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CommitWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CommitDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Commit(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.RevertWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.RevertDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Revert(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.LockRegionWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.LockRegionDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.LockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.UnlockRegionWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.UnlockRegionDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.UnlockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.StatWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.StatDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Stat(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.STATSTG*,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CloneWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CloneDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Clone(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.IStream**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Vtbl">
            <summary>
            The shared vtable pointer for <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper"/> instances.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.InitVtbl">
            <summary>
            Setups the vtable pointer for <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper"/>.
            </summary>
            <returns>The initialized vtable pointer for <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper"/>.</returns>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.lpVtbl">
            <summary>
            The vtable pointer for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.referenceCount">
            <summary>
            The current reference count for the object (from <c>IUnknown</c>).
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.writerHandle">
            <summary>
            The <see cref="T:System.Runtime.InteropServices.GCHandle"/> to the captured <see cref="T:System.Buffers.IBufferWriter`1"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Create(System.Buffers.IBufferWriter{System.Byte},ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper**)">
            <summary>
            Creates and initializes a new <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper"/> instance.
            </summary>
            <param name="writer">The input <see cref="T:System.Buffers.IBufferWriter`1"/> instance to wrap.</param>
            <param name="streamWrapper">The target <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper"/> instance to initialize.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.GetWriter">
            <summary>
            Gets the captured <see cref="T:System.Buffers.IBufferWriter`1"/> instance.
            </summary>
            <returns>The captured <see cref="T:System.Buffers.IBufferWriter`1"/> instance</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.QueryInterface(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Guid*,System.Void**)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.AddRef(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.AddRef"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Release(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Release"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Read(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Void*,System.UInt32,System.UInt32*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Read(System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Write(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.Void*,System.UInt32,System.UInt32*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Write(System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Seek(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Seek(TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.SetSize(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.SetSize(TerraFX.Interop.Windows.ULARGE_INTEGER)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.CopyTo(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.CopyTo(TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Commit(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Commit(System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Revert(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Revert"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.LockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.LockRegion(TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.UnlockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.UnlockRegion(TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Stat(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.STATSTG*,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Stat(TerraFX.Interop.Windows.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper.Clone(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IBufferWriterWrapper*,TerraFX.Interop.Windows.IStream**)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Clone(TerraFX.Interop.Windows.IStream**)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.InitializeFromStream(TerraFX.Interop.Windows.IWICStream@,System.IO.Stream)">
            <summary>
            Initializes an input <see cref="T:TerraFX.Interop.Windows.IWICStream"/> wrapping a given <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <param name="stream">The target <see cref="T:TerraFX.Interop.Windows.IWICStream"/> object to initialize.</param>
            <param name="source">The input <see cref="T:System.IO.Stream"/> instance to wrap.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.HRESULT"/> value indicating the operation result.</returns>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper">
            <summary>
            A manual CCW implementation for an <see cref="T:TerraFX.Interop.Windows.IStream"/> object wrapping a <see cref="T:System.IO.Stream"/> instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.QueryInterfaceDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.QueryInterface(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Guid*,System.Void**)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.AddRefDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.AddRef(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.ReleaseDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Release(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.ReadDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Read(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.WriteDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Write(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SeekDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Seek(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SetSizeDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SetSize(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CopyToDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CopyTo(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CommitDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Commit(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.RevertDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Revert(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.LockRegionDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.LockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.UnlockRegionDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.UnlockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.StatDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Stat(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.STATSTG*,System.UInt32)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CloneDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Clone(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.IStream**)"/>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.QueryInterfaceWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.QueryInterfaceDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.QueryInterface(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Guid*,System.Void**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.AddRefWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.AddRefDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.AddRef(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.ReleaseWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.ReleaseDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Release(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.ReadWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.ReadDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Read(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.WriteWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.WriteDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Write(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Void*,System.UInt32,System.UInt32*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SeekWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SeekDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Seek(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SetSizeWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SetSizeDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SetSize(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CopyToWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CopyToDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CopyTo(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CommitWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CommitDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Commit(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.RevertWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.RevertDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Revert(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.LockRegionWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.LockRegionDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.LockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.UnlockRegionWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.UnlockRegionDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.UnlockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.StatWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.StatDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Stat(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.STATSTG*,System.UInt32)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CloneWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CloneDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Clone(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.IStream**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Vtbl">
            <summary>
            The shared vtable pointer for <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper"/> instances.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.InitVtbl">
            <summary>
            Setups the vtable pointer for <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper"/>.
            </summary>
            <returns>The initialized vtable pointer for <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper"/>.</returns>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.lpVtbl">
            <summary>
            The vtable pointer for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.referenceCount">
            <summary>
            The current reference count for the object (from <c>IUnknown</c>).
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.streamHandle">
            <summary>
            The <see cref="T:System.Runtime.InteropServices.GCHandle"/> to the captured <see cref="T:System.IO.Stream"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Create(System.IO.Stream,ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper**)">
            <summary>
            Creates and initializes a new <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper"/> instance.
            </summary>
            <param name="stream">The input <see cref="T:System.IO.Stream"/> instance to wrap.</param>
            <param name="streamWrapper">The target <see cref="T:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper"/> instance to initialize.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.GetStream">
            <summary>
            Gets the captured <see cref="T:System.IO.Stream"/> instance.
            </summary>
            <returns>The captured <see cref="T:System.IO.Stream"/> instance</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.QueryInterface(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Guid*,System.Void**)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.QueryInterface(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.AddRef(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.AddRef"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Release(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Release"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Read(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Void*,System.UInt32,System.UInt32*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Read(System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Write(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.Void*,System.UInt32,System.UInt32*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Write(System.Void*,System.UInt32,System.UInt32*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Seek(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Seek(TerraFX.Interop.Windows.LARGE_INTEGER,System.UInt32,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.SetSize(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.SetSize(TerraFX.Interop.Windows.ULARGE_INTEGER)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.CopyTo(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.CopyTo(TerraFX.Interop.Windows.IStream*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER*,TerraFX.Interop.Windows.ULARGE_INTEGER*)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Commit(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Commit(System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Revert(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Revert"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.LockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.LockRegion(TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.UnlockRegion(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.UnlockRegion(TerraFX.Interop.Windows.ULARGE_INTEGER,TerraFX.Interop.Windows.ULARGE_INTEGER,System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Stat(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.STATSTG*,System.UInt32)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Stat(TerraFX.Interop.Windows.STATSTG*,System.UInt32)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper.Clone(ComputeSharp.Graphics.Extensions.IWICStreamExtensions.IStreamWrapper*,TerraFX.Interop.Windows.IStream**)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IStream.Clone(TerraFX.Interop.Windows.IStream**)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper">
            <summary>
            A <see langword="class"/> with methods to inspect the available devices on the current machine.
            </summary>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper"/>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.MicrosoftVendorId">
            <summary>
            The vendor id for Microsoft adapters (the "Microsoft Basic Render").
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.WarpDeviceId">
            <summary>
            The device id for the WARP device.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.GetOrCreateDefaultDevice">
            <summary>
            Gets the default <see cref="T:ComputeSharp.GraphicsDevice"/> instance.
            </summary>
            <returns>The default <see cref="T:ComputeSharp.GraphicsDevice"/> instance supporting <see cref="F:TerraFX.Interop.DirectX.D3D_FEATURE_LEVEL.D3D_FEATURE_LEVEL_11_0"/> and <see cref="F:TerraFX.Interop.DirectX.D3D_SHADER_MODEL.D3D_SHADER_MODEL_6_0"/>.</returns>
            <exception cref="T:System.NotSupportedException">Thrown when a default device is not available.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.TryGetDefaultDevice(TerraFX.Interop.DirectX.ID3D12Device**,TerraFX.Interop.DirectX.IDXGIAdapter**,TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1*)">
            <summary>
            Tries to check or create a default <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object.
            </summary>
            <param name="d3D12Device">A pointer to the <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object to create, or <see langword="null"/>.</param>
            <param name="dxgiAdapter">A pointer to the <see cref="T:TerraFX.Interop.DirectX.IDXGIAdapter"/> object used to create <paramref name="d3D12Device"/>, or <see langword="null"/>.</param>
            <param name="dxgiDescription1">A pointer to the <see cref="T:TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1"/> value for the device found.</param>
            <returns>Whether a default device was found with the requested feature level.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the target device was lost and incorrectly disposed (see remarks).</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.TryGetWarpDevice(TerraFX.Interop.DirectX.ID3D12Device**,TerraFX.Interop.DirectX.IDXGIAdapter**,TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1*)">
            <summary>
            Tries to check or create a warp <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object.
            </summary>
            <param name="d3D12Device">A pointer to the <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object to create, or <see langword="null"/>.</param>
            <param name="dxgiAdapter">A pointer to the <see cref="T:TerraFX.Interop.DirectX.IDXGIAdapter"/> object used to create <paramref name="d3D12Device"/>, or <see langword="null"/>.</param>
            <param name="dxgiDescription1">A pointer to the <see cref="T:TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1"/> value for the device found.</param>
            <returns>Whether a warp device was created successfully.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the target device was lost and incorrectly disposed (see remarks).</exception>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery">
            <summary>
            A custom query type that iterates through devices matching a given predicate.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.predicate">
            <summary>
            The <see cref="T:System.Predicate`1"/> instance to use to select devices to create.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.#ctor(System.Predicate{ComputeSharp.GraphicsDeviceInfo})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator"/> instance for the given predicate.
            </summary>
            <param name="predicate">The input predicate to select devices to create.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.System#Collections#IEnumerable#GetEnumerator">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator">
            <summary>
            The enumerator type for a <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery"/> instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.predicate">
            <summary>
            The <see cref="T:System.Predicate`1"/> instance to use to select devices to create, if present.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.dxgiFactory6">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory6"/> instance used to enumerate devices.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.isInitialized">
            <summary>
            Indicates whether or not the enumerator has already been initialized and <see cref="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.dxgiFactory6"/> is set.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.index">
            <summary>
            The current adapter index to enumerate adapters from <see cref="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.dxgiFactory6"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.isCompleted">
            <summary>
            Indicates whether or not the enumerator has completed the enumeration of all possible devices.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.graphicsDevice">
            <summary>
            The current <see cref="T:ComputeSharp.GraphicsDevice"/> instance to return.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.#ctor(System.Predicate{ComputeSharp.GraphicsDeviceInfo})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator"/> instance for the given predicate.
            </summary>
            <param name="predicate">The input predicate to select devices to create.</param>
        </member>
        <member name="P:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.Current">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.System#Collections#IEnumerator#Current">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.MoveNext">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.Reset">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.DeviceQuery.Enumerator.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.DevicesCache">
            <summary>
            The local cache of <see cref="T:ComputeSharp.GraphicsDevice"/> instances that are currently usable.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.D3D12InfoQueueMap">
            <summary>
            The local map of <see cref="T:TerraFX.Interop.DirectX.ID3D12InfoQueue"/> instances for the existing devices.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.defaultDevice">
            <summary>
            The cached default <see cref="T:ComputeSharp.GraphicsDevice"/> instance, if any.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.globalAllocatorFactory">
            <summary>
            The global <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory"/> instance to use, if any.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.GetDefaultDeviceFromCacheOrCreateInstance">
            <summary>
            Gets the cached <see cref="T:ComputeSharp.GraphicsDevice"/> instance or creates and caches a new one.
            </summary>
            <returns>The default <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.NotifyDisposedDevice(ComputeSharp.GraphicsDevice)">
            <summary>
            Removes a <see cref="T:ComputeSharp.GraphicsDevice"/> from the internal cache.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to remove from the internal cache.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.ConfigureAllocatorFactory(ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory*)">
            <summary>
            Configures the global <c>ID3D12MemoryAllocatorFactory</c> instance to use for the current process.
            </summary>
            <param name="allocatorFactory"></param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.GetOrCreateDevice(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.IDXGIAdapter*,TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1*)">
            <summary>
            Retrieves a <see cref="T:ComputeSharp.GraphicsDevice"/> instance for an <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to get a <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</param>
            <param name="dxgiAdapter">The <see cref="T:TerraFX.Interop.DirectX.IDXGIAdapter"/> that <paramref name="d3D12Device"/> was created from.</param>
            <param name="dxgiDescription1">The available info for the <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</param>
            <returns>A <see cref="T:ComputeSharp.GraphicsDevice"/> instance for the input device.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.TryGetMemoryAllocator(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.IDXGIAdapter*,ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator**)">
            <summary>
            Tries to create a new <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance for a given device.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to try to create an allocator for.</param>
            <param name="dxgiAdapter">The <see cref="T:TerraFX.Interop.DirectX.IDXGIAdapter"/> that <paramref name="d3D12Device"/> was created from.</param>
            <param name="memoryAllocator">The resulting <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance.</param>
            <returns>Whether an <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance could be created successfully.</returns>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.infoQueueMessageBuilder">
            <summary>
            A shared <see cref="T:System.Text.StringBuilder"/> used from <see cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.FlushAllID3D12InfoQueueMessagesAndCheckForErrorsOrWarnings"/> to create messages.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.FlushAllID3D12InfoQueueMessagesAndCheckForErrorsOrWarnings">
            <summary>
            Flushes all the pending debug messages for all existing <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instances to the console/debugger.
            It also checks whether or not there are any error messages being logged that didn't result in an actual crash yet.
            </summary>
            <return>Whether or not there are any logged errors or warnings.</return>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactoryCreationFlags">
            <summary>
            The creation flags for <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory"/> instances.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.CreateDXGIFactory6(TerraFX.Interop.DirectX.IDXGIFactory6**)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory6"/> instance to be used to enumerate devices.
            </summary>
            <param name="dxgiFactory6">The resulting <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory6"/> instance.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.EnableDebugMode">
            <summary>
            Enables the debug layer for DirectX APIs.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.EnableDeviceRemovedExtendedDataConfiguration">
            <summary>
            Enables the DRED settings are enabled (see <see href="https://devblogs.microsoft.com/directx/dred/"/>).
            </summary>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat">
            <summary>
            A custom <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory6"/> fallback implementation to use on systems with no support for it.
            </summary>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.ReleaseDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.Release(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdaptersDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapters(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.UInt32,TerraFX.Interop.DirectX.IDXGIAdapter**)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumWarpAdapterDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumWarpAdapter(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.Guid*,System.Void**)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapterByGpuPreferenceDelegate">
            <inheritdoc cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapterByGpuPreference(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.UInt32,TerraFX.Interop.DirectX.DXGI_GPU_PREFERENCE,System.Guid*,System.Void**)"/>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.ReleaseWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.ReleaseDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.Release(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdaptersWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdaptersDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapters(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.UInt32,TerraFX.Interop.DirectX.IDXGIAdapter**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumWarpAdapterWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumWarpAdapterDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumWarpAdapter(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.Guid*,System.Void**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapterByGpuPreferenceWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapterByGpuPreferenceDelegate"/> instance wrapping <see cref="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapterByGpuPreference(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.UInt32,TerraFX.Interop.DirectX.DXGI_GPU_PREFERENCE,System.Guid*,System.Void**)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.Vtbl">
            <summary>
            The shared method table pointer for all <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat"/> instances.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.InitVtbl">
            <summary>
            Builds the custom method table pointer for <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat"/>.
            </summary>
            <returns>The method table pointer for <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat"/>.</returns>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.lpVtbl">
            <summary>
            The method table pointer for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.dxgiFactory4">
            <summary>
            The wrapped <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory4"/> instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.Create(TerraFX.Interop.DirectX.IDXGIFactory4*,TerraFX.Interop.DirectX.IDXGIFactory6**)">
            <summary>
            Creates and initializes a new <see cref="T:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat"/> instance.
            </summary>
            <param name="dxgiFactory4">The <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory4"/> instance to wrap.</param>
            <param name="dxgiFactory6">The resulting <see cref="T:TerraFX.Interop.DirectX.IDXGIFactory6"/> instance.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.Release(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*)">
            <inheritdoc cref="M:TerraFX.Interop.Windows.IUnknown.Release"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapters(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.UInt32,TerraFX.Interop.DirectX.IDXGIAdapter**)">
            <inheritdoc cref="M:TerraFX.Interop.DirectX.IDXGIFactory6.EnumAdapters(System.UInt32,TerraFX.Interop.DirectX.IDXGIAdapter**)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumWarpAdapter(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.Guid*,System.Void**)">
            <inheritdoc cref="M:TerraFX.Interop.DirectX.IDXGIFactory6.EnumWarpAdapter(System.Guid*,System.Void**)"/>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat.EnumAdapterByGpuPreference(ComputeSharp.Graphics.Helpers.DeviceHelper.IDXGIFactory4As6Backcompat*,System.UInt32,TerraFX.Interop.DirectX.DXGI_GPU_PREFERENCE,System.Guid*,System.Void**)">
            <inheritdoc cref="M:TerraFX.Interop.DirectX.IDXGIFactory6.EnumAdapterByGpuPreference(System.UInt32,TerraFX.Interop.DirectX.DXGI_GPU_PREFERENCE,System.Guid*,System.Void**)"/>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.DXGIFormatHelper">
            <summary>
            A helper type with utility methods for <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DXGIFormatHelper.GetForType``1">
            <summary>
            Gets the appropriate <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value for the input type argument.
            </summary>
            <typeparam name="T">The input type argument to get the corresponding <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> for.</typeparam>
            <returns>The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value corresponding to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input type <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DXGIFormatHelper.IsNormalizedType``1">
            <summary>
            Gets whether or not the input type corresponds to a normalized format.
            </summary>
            <typeparam name="T">The input type argument to check.</typeparam>
            <returns>Whether or not the input type corresponds to a normalized format.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input type <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.DXGIFormatHelper.ExtendToNormalizedValue``1(``0)">
            <summary>
            Extends a given pixel type to its <see cref="T:ComputeSharp.Float4"/> equivalent.
            </summary>
            <typeparam name="T">The input pixel value to convert.</typeparam>
            <returns>The <see cref="T:ComputeSharp.Float4"/> equivalent value for <paramref name="value"/>.</returns>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.MemoryHelper">
            <summary>
            A <see langword="class"/> with some helper methods to copy data between memory areas.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.MemoryHelper.Copy``1(System.Void*,System.Void*,System.UInt32,System.UInt32,System.UInt32,System.UInt32,System.UInt32)">
            <summary>
            Copies the content of a source memory area to a target one, accounting for padding if present.
            </summary>
            <typeparam name="T">The type of elements being copied.</typeparam>
            <param name="source">The source memory area to read from.</param>
            <param name="destination">The pointer for the destination memory area.</param>
            <param name="sourceElementOffset">The source offset to start reading data from.</param>
            <param name="destinationElementOffset">The destination offset to start writing data to.</param>
            <param name="sourceElementPitchInBytes">The padded size of each element in <paramref name="source"/>.</param>
            <param name="destinationElementPitchInBytes">The padded size of each element in <paramref name="destination"/>.</param>
            <param name="count">The number of items to copy from <paramref name="source"/> to <paramref name="destination"/>.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.MemoryHelper.Copy(System.Void*,System.Void*,System.UInt32,System.UInt64,System.UInt64)">
            <summary>
            Copies the content of a source memory area to the 2D area pointed by an input pointer.
            The destination memory area has padding in each row, while the source does not.
            </summary>
            <param name="source">The source pointer to read from.</param>
            <param name="destination">The pointer that indicates the 2D memory area to write to.</param>
            <param name="height">The height of the 2D memory area to write to.</param>
            <param name="widthInBytes">The width of the memory area in bytes.</param>
            <param name="pitchInBytes">The pitch (padded width) of the memory area in bytes.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.MemoryHelper.Copy(System.Void*,System.UInt32,System.UInt64,System.UInt64,System.Void*)">
            <summary>
            Copies a 2D memory area pointed by a pointer value to a target memory area.
            The source memory area has padding in each row, while the target does not.
            </summary>
            <param name="source">The pointer that indicates the memory area to read from.</param>
            <param name="height">The height of the 2D memory area to read.</param>
            <param name="widthInBytes">The width of the memory area in bytes.</param>
            <param name="pitchInBytes">The pitch (padded width) of the memory area in bytes.</param>
            <param name="destination">The destination pointer to write to.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.MemoryHelper.Copy(System.Void*,System.Void*,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt64)">
            <summary>
            Copies the content of a source memory area to the 3D area pointed by an input pointer.
            The destination memory area has padding in each row, while the source does not.
            </summary>
            <param name="source">The source memory area to read from.</param>
            <param name="destination">The pointer that indicates the 3D memory area to write to.</param>
            <param name="height">The height of the 3D memory area to write to.</param>
            <param name="depth">The depth of the 3D memory area to write to.</param>
            <param name="widthInBytes">The width of the memory area in bytes.</param>
            <param name="pitchInBytes">The pitch (padded width) of the memory area in bytes.</param>
            <param name="sliceInBytes">The size in bytes of each 2D slice within the target 3D memory area.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.MemoryHelper.Copy(System.Void*,System.UInt32,System.UInt32,System.UInt64,System.UInt64,System.UInt64,System.Void*)">
            <summary>
            Copies a 3D memory area pointed by a pointer value to a target memory area.
            The source memory area has padding in each row, while the target does not.
            </summary>
            <param name="source">The pointer that indicates the memory area to read from.</param>
            <param name="height">The height of the 3D memory area to read.</param>
            <param name="depth">The depth of the 3D memory area to read.</param>
            <param name="widthInBytes">The width of the memory area in bytes.</param>
            <param name="pitchInBytes">The pitch (padded width) of the memory area in bytes.</param>
            <param name="sliceInBytes">The size in bytes of each 2D slice within the source 3D memory area.</param>
            <param name="destination">The destination pointer to write.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.TypeInfo`1">
            <summary>
            A class providing info on specific types.
            </summary>
            <typeparam name="T">The input type to extract info for.</typeparam>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.TypeInfo`1.IsDoubleOrContainsDoubles">
            <summary>
            Whether or not type <typeparamref name="T"/> is <see cref="T:System.Double"/> or contains a <see cref="T:System.Double"/> field.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.TypeInfo`1.ChecksIsDoubleOrContainsDoubles(System.Type)">
            <summary>
            Checks the value for <see cref="F:ComputeSharp.Graphics.Helpers.TypeInfo`1.IsDoubleOrContainsDoubles"/> for type <typeparamref name="T"/>.
            </summary>
            <param name="type">The current type to check.</param>
            <returns>Whether or not <paramref name="type"/> is <see cref="T:System.Double"/> or contains a <see cref="T:System.Double"/> field.</returns>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.WICFormatHelper">
            <summary>
            A helper type with utility methods for WIC formats.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICFormatHelper.GetForType``1">
            <summary>
            Gets the appropriate WIC format <see cref="T:System.Guid"/> value for the input type argument.
            </summary>
            <typeparam name="T">The input type argument to get the corresponding WIC format <see cref="T:System.Guid"/>.</typeparam>
            <returns>The WIC format <see cref="T:System.Guid"/> value corresponding to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input type <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICFormatHelper.TryGetIntermediateFormatForType``1(System.Guid,System.Guid@)">
            <summary>
            Gets the appropriate WIC format <see cref="T:System.Guid"/> value for the input type argument.
            </summary>
            <typeparam name="T">The input type argument to get the corresponding WIC format <see cref="T:System.Guid"/>.</typeparam>
            <returns>The WIC format <see cref="T:System.Guid"/> value corresponding to <typeparamref name="T"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input type <typeparamref name="T"/> is not supported.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICFormatHelper.GetForFilename(System.ReadOnlySpan{System.Char})">
            <summary>
            Gets the appropriate WIC container format <see cref="T:System.Guid"/> value for the input filename.
            </summary>
            <param name="filename">The target filename to get the container format for.</param>
            <returns>The WIC format container <see cref="T:System.Guid"/> value matching <paramref name="filename"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input filename doesn't have a valid file extension.</exception>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICFormatHelper.GetForFormat(ComputeSharp.ImageFormat)">
            <summary>
            Gets the appropriate WIC container format <see cref="T:System.Guid"/> value for the input format.
            </summary>
            <param name="format">The target format to get the container format for.</param>
            <returns>The WIC format container <see cref="T:System.Guid"/> value matching <paramref name="format"/>.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input format isn't valid.</exception>
        </member>
        <member name="T:ComputeSharp.Graphics.Helpers.WICHelper">
            <summary>
            A <see langword="class"/> that uses the WIC APIs to load and decode images.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Helpers.WICHelper.wicImagingFactory2">
            <summary>
            The <see cref="T:TerraFX.Interop.Windows.IWICImagingFactory2"/> instance to use to create decoders.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.#ctor">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Helpers.WICHelper"/> instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.Finalize">
            <summary>
            Destroys the current <see cref="T:ComputeSharp.Graphics.Helpers.WICHelper"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.Graphics.Helpers.WICHelper.Instance">
            <summary>
            Gets a <see cref="T:ComputeSharp.Graphics.Helpers.WICHelper"/> instance to use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Char})">
            <summary>
            Loads an <see cref="T:ComputeSharp.UploadTexture2D`1"/> from a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>An <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Byte})">
            <summary>
            Loads an <see cref="T:ComputeSharp.UploadTexture2D`1"/> from a specified buffer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="span">The buffer with the image data to load and decode into the texture.</param>
            <returns>An <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads an <see cref="T:ComputeSharp.UploadTexture2D`1"/> from a specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="stream">The stream with the image data to load and decode into the texture.</param>
            <returns>An <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.GraphicsDevice,TerraFX.Interop.Windows.IWICBitmapDecoder*)">
            <summary>
            Loads an <see cref="T:ComputeSharp.UploadTexture2D`1"/> from a specified <see cref="T:TerraFX.Interop.Windows.IWICBitmapDecoder"/> object.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="wicBitmapDecoder">The <see cref="T:TerraFX.Interop.Windows.IWICBitmapDecoder"/> object in use.</param>
            <returns>An <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.TextureView2D{``0},System.ReadOnlySpan{System.Char})">
            <summary>
            Loads an image from a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The target <see cref="T:ComputeSharp.TextureView2D`1"/> instance to write data to.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.TextureView2D{``0},System.ReadOnlySpan{System.Byte})">
            <summary>
            Loads an image from a specified buffer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The target <see cref="T:ComputeSharp.TextureView2D`1"/> instance to write data to.</param>
            <param name="span">The buffer with the image data to load and decode into the texture.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.TextureView2D{``0},System.IO.Stream)">
            <summary>
            Loads an image from a specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The target <see cref="T:ComputeSharp.TextureView2D`1"/> instance to write data to.</param>
            <param name="stream">The stream with the image data to load and decode into the texture.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.LoadTexture``1(ComputeSharp.TextureView2D{``0},TerraFX.Interop.Windows.IWICBitmapDecoder*)">
            <summary>
            Loads image data from a specified <see cref="T:TerraFX.Interop.Windows.IWICBitmapDecoder"/> object into a target texture.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The target <see cref="T:ComputeSharp.TextureView2D`1"/> instance to write data to.</param>
            <param name="wicBitmapDecoder">The <see cref="T:TerraFX.Interop.Windows.IWICBitmapDecoder"/> object in use.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.SaveTexture``1(ComputeSharp.TextureView2D{``0},System.ReadOnlySpan{System.Char})">
            <summary>
            Saves a texture to a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture data to save to an image.</param>
            <param name="filename">The filename of the image file to save.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.SaveTexture``1(ComputeSharp.TextureView2D{``0},System.IO.Stream,ComputeSharp.ImageFormat)">
            <summary>
            Saves a texture to a specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture data to save to a stream.</param>
            <param name="stream">The target stream to write to.</param>
            <param name="format">The target image format to use.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.SaveTexture``1(ComputeSharp.TextureView2D{``0},System.Buffers.IBufferWriter{System.Byte},ComputeSharp.ImageFormat)">
            <summary>
            Saves a texture to a specified buffer writer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture data to save to a stream.</param>
            <param name="writer">The target buffer writer to write to.</param>
            <param name="format">The target image format to use.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Helpers.WICHelper.SaveTexture``1(ComputeSharp.TextureView2D{``0},TerraFX.Interop.Windows.IWICBitmapEncoder*,System.Guid)">
            <summary>
            Saves a texture to a specified <see cref="T:TerraFX.Interop.Windows.IWICBitmapEncoder"/> object.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture data to save to an image.</param>
            <param name="wicBitmapEncoder">The <see cref="T:TerraFX.Interop.Windows.IWICBitmapEncoder"/> object in use.</param>
            <param name="format">The <see cref="T:System.Guid"/> identifying the target format.</param>
        </member>
        <member name="T:ComputeSharp.Graphics.Resources.Enums.ResourceType">
            <summary>
            An <see langword="enum"/> that indicates the type of a given HLSL resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.Constant">
            <summary>
            A constant resource, with items aligned to 16 bytes, used for individual values or very small arrays.
            This is only supported for buffers and is mapped to a <see langword="cbuffer"/>.
            Resources of this type are located in <see cref="F:TerraFX.Interop.DirectX.D3D12_HEAP_TYPE.D3D12_HEAP_TYPE_UPLOAD"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadOnly">
            <summary>
            A readonly resource, that can store arbitrary arrays of values and can only be read from by the GPU.
            This is mapped to either <see langword="StructuredBuffer&lt;T&gt;"/> or <see langword="TextureND&lt;T&gt;"/>.
            Resources of this type are located in <see cref="F:TerraFX.Interop.DirectX.D3D12_HEAP_TYPE.D3D12_HEAP_TYPE_DEFAULT"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadWrite">
            <summary>
            A read write resource, that can store arbitrary arrays with both read and write access for the GPU.
            This is mapped to either <see langword="RWStructuredBuffer&lt;T&gt;"/> or <see langword="RWTextureND&lt;T&gt;"/>.
            Resources of this type are located in <see cref="F:TerraFX.Interop.DirectX.D3D12_HEAP_TYPE.D3D12_HEAP_TYPE_DEFAULT"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadBack">
            <summary>
            A readback resource, used temporarily to read data back from <see cref="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadOnly"/> and <see cref="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadWrite"/> resources.
            This has no direct mapping to a type in HLSL, as it's only used for copy operations.
            Resources of this type are located in <see cref="F:TerraFX.Interop.DirectX.D3D12_HEAP_TYPE.D3D12_HEAP_TYPE_READBACK"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.Upload">
            <summary>
            A transfer resource, used temporarily to set data to <see cref="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadOnly"/> and <see cref="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadWrite"/> resources.
            This has no direct mapping to a type in HLSL, as it's only used for copy operations (like <see cref="F:ComputeSharp.Graphics.Resources.Enums.ResourceType.ReadBack"/>).
            Resources of this type are located in <see cref="F:TerraFX.Interop.DirectX.D3D12_HEAP_TYPE.D3D12_HEAP_TYPE_UPLOAD"/>.
            </summary>
        </member>
        <member name="T:ComputeSharp.Graphics.Resources.Helpers.ResourceStateHelper">
            <summary>
            A helper type with utility methods for <see cref="T:ComputeSharp.ResourceState"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Resources.Helpers.ResourceStateHelper.GetD3D12ResourceStates(ComputeSharp.ResourceState)">
            <summary>
            Gets the corresponding <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the input resource state.
            </summary>
            <returns>The <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value corresponding to the input resource state.</returns>
            <exception cref="T:System.ArgumentException">Thrown when the input value is not valid.</exception>
        </member>
        <member name="T:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap">
            <summary>
            A type representing a mapped memory resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap.d3D12Resource">
            <summary>
            The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to map.
            </summary>
        </member>
        <member name="F:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap.Pointer">
            <summary>
            The pointer to the mapped resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap.#ctor(TerraFX.Interop.DirectX.ID3D12Resource*,System.Void*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap"/> instance for a given <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> value.
            </summary>
            <param name="d3D12Resource">The input <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance to map.</param>
            <param name="pointer">The pointer to the mapped resource.</param>
        </member>
        <member name="M:ComputeSharp.Graphics.Resources.Interop.ID3D12ResourceMap.Dispose">
            <inheritdoc cref="M:System.IDisposable.Dispose"/>
        </member>
        <member name="T:ComputeSharp.DeviceLostEventArgs">
            <summary>
            The arguments for the <see cref="E:ComputeSharp.GraphicsDevice.DeviceLost"/> event.
            </summary>
        </member>
        <member name="M:ComputeSharp.DeviceLostEventArgs.#ctor(ComputeSharp.DeviceLostReason)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.DeviceLostEventArgs"/> instance with the specified arguments.
            </summary>
            <param name="reason">The <see cref="T:ComputeSharp.DeviceLostReason"/> value for the event.</param>
        </member>
        <member name="P:ComputeSharp.DeviceLostEventArgs.Reason">
            <summary>
            Gets the reason that caused the device to be lost.
            </summary>
        </member>
        <member name="T:ComputeSharp.DeviceLostReason">
            <summary>
            Indicates a reason a <see cref="T:ComputeSharp.GraphicsDevice"/> instance was lost.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.DeviceHung">
            <summary>
            The application's device failed due to badly formed commands sent by the application.
            This is an design-time issue that should be investigated and fixed.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.DeviceRemoved">
            <summary>
            The video card has been physically removed from the system, or a driver upgrade for
            the video card has occurred. The application should destroy and recreate the device.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.DeviceReset">
            <summary>
            The device failed due to a badly formed command. This is a run-time issue.
            The application should destroy and recreate the device.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.DriverInternalError">
            <summary>
            The driver encountered a problem and was put into the device removed state.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.InvalidCall">
            <summary>
            The application provided invalid parameter data.
            This must be debugged and fixed before the application is released.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.AccessDenied">
            <summary>
            The device was removed after attempting an invalid operation (eg. trying to write to the wrong swapchain buffer).
            The application should destroy and recreate the device. This also likely indicates an application bug.
            </summary>
        </member>
        <member name="F:ComputeSharp.DeviceLostReason.UnspecifiedError">
            <summary>
            The device was lost for an unspecified reason.
            </summary>
        </member>
        <member name="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException">
            <summary>
            A custom <see cref="T:System.InvalidOperationException"/> that indicates when mismatched devices are being used.
            </summary>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Create(ComputeSharp.Interop.IReferenceTrackedObject,ComputeSharp.GraphicsDevice,ComputeSharp.GraphicsDevice)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <param name="resource">The input <see cref="T:ComputeSharp.Interop.IReferenceTrackedObject"/> that was used.</param>
            <param name="sourceDevice">The source <see cref="T:ComputeSharp.GraphicsDevice"/> instance tied to <paramref name="resource"/>.</param>
            <param name="destinationDevice">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
            <returns>A new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance with a formatted error message.</returns>
            <remarks>
            This method only takes a <see cref="T:ComputeSharp.Interop.IReferenceTrackedObject"/> instance and the associated <see cref="T:ComputeSharp.GraphicsDevice"/> instance as
            <see cref="M:System.Object.GetType"/> will still be available, but without the unnecessary generic type specializations for the method.
            </remarks>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.Buffer{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.TransferBuffer{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.TransferTexture1D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.TransferTexture2D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture2D`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.GraphicsDeviceMismatchException.Throw``1(ComputeSharp.Resources.TransferTexture3D{``0},ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the input buffer.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture3D`1"/> that was used.</param>
            <param name="device">The target <see cref="T:ComputeSharp.GraphicsDevice"/> instance that was used.</param>
        </member>
        <member name="T:ComputeSharp.Exceptions.UnsupportedDoubleOperationException">
            <summary>
            A custom <see cref="T:System.NotSupportedException"/> that indicates when a resource was attempted to be created with an unsupported type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedDoubleOperationException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Exceptions.UnsupportedDoubleOperationException"/> instance.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedDoubleOperationException.Create(System.Type)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance from the specified parameters.
            </summary>
            <param name="type">The element type of resource that was being created.</param>
            <returns>A new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance with a formatted error message.</returns>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedDoubleOperationException.Throw``1">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.UnsupportedDoubleOperationException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the resource that couldn't be created.</typeparam>
        </member>
        <member name="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException">
            <summary>
            A custom <see cref="T:System.NotSupportedException"/> that indicates when a texture was attempted to be created with an unsupported type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedTextureTypeException.#ctor(System.String)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedTextureTypeException.Create(System.Int32,System.Type)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance from the specified parameters.
            </summary>
            <param name="rank">The rank of the texture that couldn't be created.</param>
            <param name="type">The element type of texture that was being created.</param>
            <returns>A new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance with a formatted error message.</returns>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedTextureTypeException.ThrowForTexture1D``1">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the texture that couldn't be created.</typeparam>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedTextureTypeException.ThrowForTexture2D``1">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the texture that couldn't be created.</typeparam>
        </member>
        <member name="M:ComputeSharp.Exceptions.UnsupportedTextureTypeException.ThrowForTexture3D``1">
            <summary>
            Throws a new <see cref="T:ComputeSharp.Exceptions.UnsupportedTextureTypeException"/> instance from the specified parameters.
            </summary>
            <typeparam name="T">The type of values in the texture that couldn't be created.</typeparam>
        </member>
        <member name="T:ComputeSharp.BufferExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.Resources.Buffer`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.ToArray``1(ComputeSharp.Resources.Buffer{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the input buffer.</returns>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.ToArray``1(ComputeSharp.Resources.Buffer{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance in a given range and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="offset">The offset to start reading data from.</param>
            <param name="count">The number of items to read.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the specified range from the current buffer.</returns>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyTo``1(ComputeSharp.Resources.Buffer{``0},``0[])">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyTo``1(ComputeSharp.Resources.Buffer{``0},``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyTo``1(ComputeSharp.Resources.Buffer{``0},System.Span{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyTo``1(ComputeSharp.Resources.Buffer{``0},System.Span{``0},System.Int32)">
            <summary>
            Reads the contents of the specified range from a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyTo``1(ComputeSharp.Resources.Buffer{``0},ComputeSharp.Resources.Buffer{``0})">
            <summary>
            Reads the contents of the specified <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and copies them to the target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffers.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyTo``1(ComputeSharp.Resources.Buffer{``0},ComputeSharp.Resources.Buffer{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and copies them to the target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffers.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyFrom``1(ComputeSharp.Resources.Buffer{``0},``0[])">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyFrom``1(ComputeSharp.Resources.Buffer{``0},``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="sourceOffset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="destinationOffset">The offset to start writing data to.</param>
            <param name="count">The number of items to write.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyFrom``1(ComputeSharp.Resources.Buffer{``0},System.ReadOnlySpan{``0})">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyFrom``1(ComputeSharp.Resources.Buffer{``0},System.ReadOnlySpan{``0},System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to a specified area of a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
            <param name="destinationOffset">The offset to start writing data to.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyFrom``1(ComputeSharp.Resources.Buffer{``0},ComputeSharp.Resources.Buffer{``0})">
            <summary>
            Writes the contents of the specified <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to the curreent <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffers.</typeparam>
            <param name="destination">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data data to.</param>
            <param name="source">The source <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.BufferExtensions.CopyFrom``1(ComputeSharp.Resources.Buffer{``0},ComputeSharp.Resources.Buffer{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of the specified range from a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and copies them to the current <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffers.</typeparam>
            <param name="destination">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="source">The source <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to read data from.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="T:ComputeSharp.GraphicsDeviceExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.GraphicsDevice"/> type, used to run compute shaders.
            </summary>
            <inheritdoc cref="T:ComputeSharp.GraphicsDeviceExtensions"/>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.GraphicsDevice"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.GraphicsDevice"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.GraphicsDevice"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.For``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.GraphicsDevice"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.ForEach``2(ComputeSharp.GraphicsDevice,ComputeSharp.IReadWriteNormalizedTexture2D{``1})">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.GraphicsDevice"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of pixel shader to run.</typeparam>
            <typeparam name="TPixel">The type of pixels being processed by the shader.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="texture">The target texture to apply the pixel shader to.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.ForEach``2(ComputeSharp.GraphicsDevice,ComputeSharp.IReadWriteNormalizedTexture2D{``1},``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.GraphicsDevice"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of pixel shader to run.</typeparam>
            <typeparam name="TPixel">The type of pixels being processed by the shader.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="texture">The target texture to apply the pixel shader to.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the pixel shader to run.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.CreateComputeContext(ComputeSharp.GraphicsDevice)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ComputeContext"/> instance to batch compute operations together.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run shaders.</param>
            <returns>A new <see cref="T:ComputeSharp.ComputeContext"/> instance to batch compute operations together.</returns>
            <remarks>
            The returned <see cref="T:ComputeSharp.ComputeContext"/> instance should be used in a <see langword="using"/> block or declaration:
            <code>
            using (var context = device.CreateComputeContext())
            {
                // Dispatch shaders here...
            }
            </code>
            <para>All dispatched shaders will be executed as soon as the context goes out of scope.</para>
            <para>Asynchronous execution is also supported, through the <see cref="T:System.IAsyncDisposable"/> interface:</para>
            <code>
            await using (var context = device.CreateComputeContext())
            {
                // Dispatch shaders here, they will be executed asynchronously
            }
            </code>
            Copying or not disposing the <see cref="T:ComputeSharp.ComputeContext"/> instance results in undefined behavior.
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateConstantBuffer``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new constant buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="length">The length of the buffer to allocate.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ConstantBuffer`1"/> instance of size <paramref name="length"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateConstantBuffer``1(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new constant buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated buffer.</param>
            <returns>A constant <see cref="T:ComputeSharp.ConstantBuffer`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateConstantBuffer``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new constant buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated buffer.</param>
            <returns>A constant <see cref="T:ComputeSharp.ConstantBuffer`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateConstantBuffer``1(ComputeSharp.GraphicsDevice,ComputeSharp.Resources.Buffer{``0})">
            <summary>
            Allocates a new constant buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> with the data to copy on the allocated buffer.</param>
            <returns>A constant <see cref="T:ComputeSharp.ConstantBuffer`1"/> instance with the contents of the input <see cref="T:ComputeSharp.Resources.Buffer`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyBuffer``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="length">The length of the buffer to allocate.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyBuffer`1"/> instance of size <paramref name="length"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyBuffer``1(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new readonly buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated buffer.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyBuffer`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyBuffer``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new readonly buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated buffer.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyBuffer`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyBuffer``1(ComputeSharp.GraphicsDevice,ComputeSharp.Resources.Buffer{``0})">
            <summary>
            Allocates a new readonly buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> with the data to copy on the allocated buffer.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyBuffer`1"/> instance with the contents of the input <see cref="T:ComputeSharp.Resources.Buffer`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance of size [<paramref name="width"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32)">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``1(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``2(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instance of size [<paramref name="width"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32)">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``2(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture1D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new readonly 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``1(ComputeSharp.GraphicsDevice,``0[0:,0:])">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,``0[0:,0:])">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>, <paramref name="depth"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``1(ComputeSharp.GraphicsDevice,``0[0:,0:,0:])">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance with the contents of the input array.</returns>
            <remarks>
            The source 3D array needs to have each 2D plane stacked on the depth axis.
            That is, the expected layout of the input array has to be [depth, height, width].
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``2(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instance of size [<paramref name="width"/>, <paramref name="height"/>, <paramref name="depth"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``2(ComputeSharp.GraphicsDevice,``0[0:,0:,0:])">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instance with the contents of the input array.</returns>
            <remarks>
            The source 3D array needs to have each 2D plane stacked on the depth axis.
            That is, the expected layout of the input array has to be [depth, height, width].
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadOnlyTexture3D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new readonly 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteBuffer``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new read write buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="length">The length of the buffer to allocate.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance of size <paramref name="length"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteBuffer``1(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new read write buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated buffer.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteBuffer``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new read write buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated buffer.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteBuffer``1(ComputeSharp.GraphicsDevice,ComputeSharp.Resources.Buffer{``0})">
            <summary>
            Allocates a new read write buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> with the data to copy on the allocated buffer.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance with the contents of the input <see cref="T:ComputeSharp.Resources.Buffer`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance of size [<paramref name="width"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32)">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``1(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``2(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance of size [<paramref name="width"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32)">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``2(ComputeSharp.GraphicsDevice,``0[])">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture1D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0})">
            <summary>
            Allocates a new writeable 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``1(ComputeSharp.GraphicsDevice,``0[0:,0:])">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,``0[0:,0:])">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A zeroed <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``1(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``1(ComputeSharp.GraphicsDevice,``0[0:,0:,0:])">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance with the contents of the input array.</returns>
            <remarks>
            The source 3D array needs to have each 2D plane stacked on the depth axis.
            That is, the expected layout of the input array has to be [depth, height, width].
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``2(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance of size [<paramref name="width"/>, <paramref name="height"/>, <paramref name="depth"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``2(ComputeSharp.GraphicsDevice,``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <param name="offset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance with the contents of the input array.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``2(ComputeSharp.GraphicsDevice,``0[0:,0:,0:])">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <typeparamref name="T"/> array with the data to copy on the allocated texture.</param>
            <returns>A read write <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance with the contents of the input array.</returns>
            <remarks>
            The source 3D array needs to have each 2D plane stacked on the depth axis.
            That is, the expected layout of the input array has to be [depth, height, width].
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadWriteTexture3D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Allocates a new writeable 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> with the data to copy on the allocated texture.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance with the contents of the input <see cref="T:System.ReadOnlySpan`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateUploadBuffer``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new upload buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="length">The length of the buffer to allocate.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyBuffer`1"/> instance of size <paramref name="length"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateUploadTexture1D``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new upload 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance of size [<paramref name="width"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateUploadTexture2D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new upload 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateUploadTexture3D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new upload 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>, <paramref name="depth"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadBackBuffer``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readback buffer with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="length">The length of the buffer to allocate.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance of size <paramref name="length"/>.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadBackTexture1D``1(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readback 1D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance of size [<paramref name="width"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadBackTexture2D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readback 2D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.AllocateReadBackTexture3D``1(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Allocates a new readback 3D texture with the specified parameters.
            </summary>
            <typeparam name="T">The type of items to store in the buffer.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the buffer.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <returns>A <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance of size [<paramref name="width"/>, <paramref name="height"/>, <paramref name="depth"/>].</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,System.String)">
            <summary>
            Loads a new readonly 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Char})">
            <summary>
            Loads a new readonly 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Byte})">
            <summary>
            Loads a new readonly 2D texture with the contents of the specified buffer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="span">The buffer with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadOnlyTexture2D``2(ComputeSharp.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads a new readonly 2D texture with the contents of the specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="stream">The stream with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,System.String)">
            <summary>
            Loads a new writeable 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Char})">
            <summary>
            Loads a new writeable 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Byte})">
            <summary>
            Loads a new writeable 2D texture with the contents of the specified buffer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="span">The buffer with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadReadWriteTexture2D``2(ComputeSharp.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads a new writeable 2D texture with the contents of the specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="stream">The stream with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadUploadTexture2D``1(ComputeSharp.GraphicsDevice,System.String)">
            <summary>
            Loads a new upload 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadUploadTexture2D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Char})">
            <summary>
            Loads a new upload 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="filename">The filename of the image file to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadUploadTexture2D``1(ComputeSharp.GraphicsDevice,System.ReadOnlySpan{System.Byte})">
            <summary>
            Loads a new upload 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="span">The buffer with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceExtensions.LoadUploadTexture2D``1(ComputeSharp.GraphicsDevice,System.IO.Stream)">
            <summary>
            Loads a new upload 2D texture with the contents of the specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance to use to allocate the texture.</param>
            <param name="stream">The stream with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="T:ComputeSharp.ReadBackBufferExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadBackBuffer`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadBackBufferExtensions.CopyFrom``1(ComputeSharp.ReadBackBuffer{``0},ComputeSharp.Resources.StructuredBuffer{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackBufferExtensions.CopyFrom``1(ComputeSharp.ReadBackBuffer{``0},ComputeSharp.Resources.StructuredBuffer{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="T:ComputeSharp.ReadBackTexture1DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture1DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture1D{``0},ComputeSharp.Resources.Texture1D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture1DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture1DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="T:ComputeSharp.ReadBackTexture2DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture2D{``0},ComputeSharp.Resources.Texture2D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.Save``1(ComputeSharp.ReadBackTexture2D{``0},System.String)">
            <summary>
            Saves a texture to a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="filename">The filename of the image file to save.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.Save``1(ComputeSharp.ReadBackTexture2D{``0},System.ReadOnlySpan{System.Char})">
            <summary>
            Saves a texture to a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="filename">The filename of the image file to save.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.Save``1(ComputeSharp.ReadBackTexture2D{``0},System.IO.Stream,ComputeSharp.ImageFormat)">
            <summary>
            Saves a texture to a specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="stream">The stream to save the image to.</param>
            <param name="format">The target image format to use.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2DExtensions.Save``1(ComputeSharp.ReadBackTexture2D{``0},System.Buffers.IBufferWriter{System.Byte},ComputeSharp.ImageFormat)">
            <summary>
            Saves a texture to a specified buffer writer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="writer">The buffer writer to save the image to.</param>
            <param name="format">The target image format to use.</param>
        </member>
        <member name="T:ComputeSharp.ReadBackTexture3DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture3DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture3D{``0},ComputeSharp.Resources.Texture3D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture3DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture3DExtensions.CopyFrom``1(ComputeSharp.ReadBackTexture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture1DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> and <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> types.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture1D{System.Single})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{System.Single},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float2})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float2},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float3})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float3},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float4})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture1D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float4},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly``2(ComputeSharp.ReadWriteTexture1D{``0,``1})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture1D`1"/> instance for the input resource.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture1D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0,``1},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture2DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> and <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> types.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture2D{System.Single})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{System.Single},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float2})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float2},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float3})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float3},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float4})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture2D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float4},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly``2(ComputeSharp.ReadWriteTexture2D{``0,``1})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture2D`1"/> instance for the input resource.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture2D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0,``1},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture3DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> and <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> types.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture3D{System.Single})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{System.Single},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float2})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float2},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float3})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float3},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float4})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance for the input resource.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyTexture3D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float4},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly``2(ComputeSharp.ReadWriteTexture3D{``0,``1})">
            <summary>
            Retrieves a wrapping <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture3D`1"/> instance for the input resource.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance to create a wrapper for.</param>
            <returns>An <see cref="T:ComputeSharp.IReadOnlyNormalizedTexture3D`1"/> instance wrapping the current resource.</returns>
            <remarks>
            <para>The returned instance can be used in a shader to enable texture sampling.</para>
            <para>
            This is an advanced API that can only be used after the current instance has been transitioned to be in a readonly state. To do so,
            use <see cref="M:ComputeSharp.ComputeContextExtensions.Transition``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0,``1},ComputeSharp.ResourceState)"/>,
            and specify <see cref="F:ComputeSharp.ResourceState.ReadOnly"/>. After that, this method can be used to get a readonly wrapper for
            the current texture to use in a shader. This instance should not be cached or reused, but just passed directly to a shader
            being dispatched through that same <see cref="T:ComputeSharp.ComputeContext"/>, as it will not work if the texture changes state later on.
            Before the end of that list of operations, the texture also needs to be transitioned back to writeable state, using the same
            API as before but specifying <see cref="F:ComputeSharp.ResourceState.ReadWrite"/>. Failing to do so results in undefined behavior.
            </para>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">Thrown if the current instance or its associated device are disposed.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the current instance is not in a readonly state.</exception>
        </member>
        <member name="T:ComputeSharp.StructuredBufferExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.StructuredBufferExtensions.CopyTo``1(ComputeSharp.Resources.StructuredBuffer{``0},ComputeSharp.ReadBackBuffer{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.StructuredBufferExtensions.CopyTo``1(ComputeSharp.Resources.StructuredBuffer{``0},ComputeSharp.ReadBackBuffer{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="M:ComputeSharp.StructuredBufferExtensions.CopyFrom``1(ComputeSharp.Resources.StructuredBuffer{``0},ComputeSharp.UploadBuffer{``0})">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.UploadBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.StructuredBufferExtensions.CopyFrom``1(ComputeSharp.Resources.StructuredBuffer{``0},ComputeSharp.UploadBuffer{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.UploadBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="T:ComputeSharp.Texture1DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.Resources.Texture1D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.ToArray``1(ComputeSharp.Resources.Texture1D{``0})">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.ToArray``1(ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="x">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},``0[])">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},``0[],System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},``0[],System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},System.Span{``0})">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            The input data will be read from the start of the texture.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},System.Span{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.Resources.Texture1D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.ReadBackTexture1D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.ReadBackTexture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyTo``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.ReadBackTexture1D{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},``0[])">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},``0[],System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},``0[],System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="sourceOffset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},System.ReadOnlySpan{``0})">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            The input data will be written to the start of the texture, and all input items will be copied.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},System.ReadOnlySpan{``0},System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.Resources.Texture1D{``0})">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.UploadTexture1D{``0})">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.UploadTexture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture1DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture1D{``0},ComputeSharp.UploadTexture1D{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="T:ComputeSharp.Texture2DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.Resources.Texture2D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.ToArray``1(ComputeSharp.Resources.Texture2D{``0})">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.ToArray``1(ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="x">The horizontal offset in the source texture.</param>
            <param name="y">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},``0[0:,0:])">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},``0[])">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},``0[],System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},System.Span{``0})">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            The input data will be read from the start of the texture.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},System.Span{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.Resources.Texture2D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.ReadBackTexture2D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.ReadBackTexture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyTo``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.ReadBackTexture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},``0[0:,0:])">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},``0[])">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="sourceOffset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},System.ReadOnlySpan{``0})">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            The input data will be written to the start of the texture, and all input items will be copied.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.Resources.Texture2D{``0})">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.UploadTexture2D{``0})">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.UploadTexture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture2D{``0},ComputeSharp.UploadTexture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.Save``1(ComputeSharp.Resources.Texture2D{``0},System.String)">
            <summary>
            Saves a texture to a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="filename">The filename of the image file to save.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.Save``1(ComputeSharp.Resources.Texture2D{``0},System.ReadOnlySpan{System.Char})">
            <summary>
            Saves a texture to a specified file.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="filename">The filename of the image file to save.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.Save``1(ComputeSharp.Resources.Texture2D{``0},System.IO.Stream,ComputeSharp.ImageFormat)">
            <summary>
            Saves a texture to a specified stream.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="stream">The stream to save the image to.</param>
            <param name="format">The target image format to use.</param>
        </member>
        <member name="M:ComputeSharp.Texture2DExtensions.Save``1(ComputeSharp.Resources.Texture2D{``0},System.Buffers.IBufferWriter{System.Byte},ComputeSharp.ImageFormat)">
            <summary>
            Saves a texture to a specified buffer writer.
            </summary>
            <typeparam name="T">The type of items to store in the texture.</typeparam>
            <param name="texture">The texture to save to an image.</param>
            <param name="writer">The buffer writer to save the image to.</param>
            <param name="format">The target image format to use.</param>
        </member>
        <member name="T:ComputeSharp.Texture3DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.Resources.Texture3D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.ToArray``1(ComputeSharp.Resources.Texture3D{``0})">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the current buffer.</returns>
            <remarks>
            The returned array will be using the same memory layout as the texture, that is, each 2D plane
            in the 3D volume represented by the texture is contiguous in memory, and planes are stacked in
            the depth dimension. This means that the resulting 3D array will have a size of [D, H, W].
            </remarks>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.ToArray``1(ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and returns an array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="x">The horizontal offset in the source texture.</param>
            <param name="y">The vertical offset in the source texture.</param>
            <param name="z">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
            <returns>A <typeparamref name="T"/> array with the contents of the current texture.</returns>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},``0[0:,0:,0:])">
            <summary>
            Reads the contents of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <remarks>
            The input 3D array needs to have each 2D plane stacked on the depth axis. That is, the expected
            layout of the input array has to be of shape [depth, height, width].
            </remarks>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},``0[],System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target array.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The input array to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},System.Span{``0})">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},System.Span{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:System.Span`1"/>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The input <see cref="T:System.Span`1"/> to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.Resources.Texture3D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.ReadBackTexture3D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.ReadBackTexture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyTo``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.ReadBackTexture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},``0[0:,0:,0:])">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <remarks>
            The source 3D array needs to have each 2D plane stacked on the depth axis. That is, the expected
            layout of the input array has to be of shape [depth, height, width].
            </remarks>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},``0[])">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
            <param name="depth">The depth of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},``0[],System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <typeparamref name="T"/> array to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <typeparamref name="T"/> array to read data from.</param>
            <param name="sourceOffset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
            <param name="depth">The depth of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},System.ReadOnlySpan{``0})">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            The input data will be written to the start of the texture, and all input items will be copied.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},System.ReadOnlySpan{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:System.ReadOnlySpan`1"/> to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:System.ReadOnlySpan`1"/> to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offseet in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
            <param name="depth">The depth of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.Resources.Texture3D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.UploadTexture3D{``0})">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.UploadTexture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Texture3DExtensions.CopyFrom``1(ComputeSharp.Resources.Texture3D{``0},ComputeSharp.UploadTexture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of an <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="T:ComputeSharp.UploadBufferExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.UploadBuffer`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.UploadBufferExtensions.CopyTo``1(ComputeSharp.UploadBuffer{``0},ComputeSharp.Resources.StructuredBuffer{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.UploadBufferExtensions.CopyTo``1(ComputeSharp.UploadBuffer{``0},ComputeSharp.Resources.StructuredBuffer{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="T:ComputeSharp.UploadTexture1DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.UploadTexture1D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.UploadTexture1DExtensions.CopyTo``1(ComputeSharp.UploadTexture1D{``0},ComputeSharp.Resources.Texture1D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture1DExtensions.CopyTo``1(ComputeSharp.UploadTexture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture1DExtensions.CopyTo``1(ComputeSharp.UploadTexture1D{``0},ComputeSharp.Resources.Texture1D{``0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="T:ComputeSharp.UploadTexture2DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.UploadTexture2D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.CopyTo``1(ComputeSharp.UploadTexture2D{``0},ComputeSharp.Resources.Texture2D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.CopyTo``1(ComputeSharp.UploadTexture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.CopyTo``1(ComputeSharp.UploadTexture2D{``0},ComputeSharp.Resources.Texture2D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.Load``1(ComputeSharp.UploadTexture2D{``0},System.String)">
            <summary>
            Loads a texture from a specified file.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The texture to decode the image into.</param>
            <param name="filename">The filename of the image file to load.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.Load``1(ComputeSharp.UploadTexture2D{``0},System.ReadOnlySpan{System.Char})">
            <summary>
            Loads a texture from a specified file.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The texture to decode the image into.</param>
            <param name="filename">The filename of the image file to load.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.Load``1(ComputeSharp.UploadTexture2D{``0},System.ReadOnlySpan{System.Byte})">
            <summary>
            LLoads a texture from a specified buffer.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The texture to decode the image into.</param>
            <param name="span">The buffer with the image data to load and decode into the texture.</param>
            <returns>A <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the contents of the specified file.</returns>
        </member>
        <member name="M:ComputeSharp.UploadTexture2DExtensions.Load``1(ComputeSharp.UploadTexture2D{``0},System.IO.Stream)">
            <summary>
            Loads a texture from a specified stream.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The texture to decode the image into.</param>
            <param name="stream">The stream to load the image from.</param>
        </member>
        <member name="T:ComputeSharp.UploadTexture3DExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.UploadTexture3D`1"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.UploadTexture3DExtensions.CopyTo``1(ComputeSharp.UploadTexture3D{``0},ComputeSharp.Resources.Texture3D{``0})">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture3DExtensions.CopyTo``1(ComputeSharp.UploadTexture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture3DExtensions.CopyTo``1(ComputeSharp.UploadTexture3D{``0},ComputeSharp.Resources.Texture3D{``0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of a <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="T:ComputeSharp.GraphicsDevice">
            <summary>
            A <see langword="class"/> that represents an <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance that can be used to run compute shaders.
            </summary>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.d3D12Device">
            <summary>
            The underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> wrapped by the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.d3D12ComputeCommandQueue">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandQueue"/> instance to use for compute operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.d3D12CopyCommandQueue">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandQueue"/> instance to use for copy operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.d3D12ComputeFence">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Fence"/> instance used for compute operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.d3D12CopyFence">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Fence"/> instance used for copy operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.shaderResourceViewDescriptorAllocator">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator"/> instance to use when allocating new buffers.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.computeCommandListPool">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool"/> instance for compute operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.copyCommandListPool">
            <summary>
            Gets the <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool"/> instance for copy operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.nextD3D12ComputeFenceValue">
            <summary>
            The next fence value for compute operations using <see cref="F:ComputeSharp.GraphicsDevice.d3D12ComputeCommandQueue"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.nextD3D12CopyFenceValue">
            <summary>
            The next fence value for copy operations using <see cref="F:ComputeSharp.GraphicsDevice.d3D12CopyCommandQueue"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.allocator">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> in use associated to the current device, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.deviceHandle">
            <summary>
            A weak <see cref="T:System.Runtime.InteropServices.GCHandle"/> to the current instance (used to support the device lost callback).
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.deviceRemovedEvent">
            <summary>
            The event for the device removed callback.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.deviceRemovedWaitHandle">
            <summary>
            The wait handle for the device removed callback.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.deviceRemovedReason">
            <summary>
            The reason the device was removed, if any.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.cachedPipelineData">
            <summary>
            The list of cached <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> objects for the current device.
            </summary>
            <remarks>
            A new entry is added to this list every time a shader is dispatched using this device. These cached items
            are stored via a <see cref="T:System.Runtime.CompilerServices.ConditionalWeakTable`2"/>, meaning they will be collected automatically
            when the device is collected. But, due to the fact that could happen at any time, a list is required to guarantee
            the additional references added by the native objects in the pipeline model can be released immediately.
            </remarks>
        </member>
        <member name="E:ComputeSharp.GraphicsDevice.DeviceLost">
            <summary>
            Raised whenever the device is lost.
            </summary>
            <remarks>
            <para>
            "Device lost" refers to a situation where the GPU graphics device becomes unusable for further operations. This can occur
            due to GPU hardware malfunction, driver bugs, driver software updates, or switching the app from one GPU to another.
            </para> 
            <para>
            A lost device can no longer be used, and any attempt to do so will throw an exception. To recover from
            this situation, the app must create a new device and then recreate all its graphics resources.
            </para>
            <para>
            This event will only be raised at most once for a given <see cref="T:ComputeSharp.GraphicsDevice"/> instance. Additionally,
            the event is raised asynchronously with respect to the device being lost, and on a thread pool thread.
            </para>
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.#ctor(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.IDXGIAdapter*,TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1*,ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.GraphicsDevice"/> instance for the input <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/>.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use for the new <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</param>
            <param name="dxgiAdapter">The <see cref="T:TerraFX.Interop.DirectX.IDXGIAdapter"/> that <paramref name="d3D12Device"/> was created from.</param>
            <param name="dxgiDescription1">The available info for the new <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</param>
            <param name="allocator">The optional <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance to use.</param>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.Luid">
            <summary>
            Gets the locally unique identifier for the current device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.Name">
            <summary>
            Gets the name of the current <see cref="T:ComputeSharp.GraphicsDevice"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.DedicatedMemorySize">
            <summary>
            Gets the size of the dedicated memory for the current device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.SharedMemorySize">
            <summary>
            Gets the size of the shared system memory for the current device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.IsHardwareAccelerated">
            <summary>
            Gets whether or not the current device is hardware accelerated.
            This value is <see langword="false"/> for software fallback devices.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.ComputeUnits">
            <summary>
            Gets the number of total lanes on the current device (eg. CUDA cores on an nVidia GPU).
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.WavefrontSize">
            <summary>
            Gets the number of lanes in a SIMD wave on the current device (also known as "wavefront size" or "warp width").
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.D3D12Device">
            <summary>
            Gets the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> wrapped by the current instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDevice.IsCacheCoherentUMA">
            <summary>
            Gets whether or not the current device has a cache coherent UMA architecture.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsDoublePrecisionSupportAvailable">
            <summary>
            Checks whether the current device supports double precision floating point operations in shaders.
            </summary>
            <returns>Whether the current device supports double precision floating point operations in shaders.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsReadOnlyTexture1DSupportedForType``1">
            <summary>
            Checks whether the current device supports the creation of
            <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> resources for a specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values to check support for.</typeparam>
            <returns>Whether <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instances can be created by the current device.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsReadWriteTexture1DSupportedForType``1">
            <summary>
            Checks whether the current device supports the creation of
            <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> resources for a specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values to check support for.</typeparam>
            <returns>Whether <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instances can be created by the current device.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsReadOnlyTexture2DSupportedForType``1">
            <summary>
            Checks whether the current device supports the creation of
            <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> resources for a specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values to check support for.</typeparam>
            <returns>Whether <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instances can be created by the current device.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsReadWriteTexture2DSupportedForType``1">
            <summary>
            Checks whether the current device supports the creation of
            <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> resources for a specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values to check support for.</typeparam>
            <returns>Whether <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instances can be created by the current device.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsReadOnlyTexture3DSupportedForType``1">
            <summary>
            Checks whether the current device supports the creation of
            <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> resources for a specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values to check support for.</typeparam>
            <returns>Whether <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instances can be created by the current device.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.IsReadWriteTexture3DSupportedForType``1">
            <summary>
            Checks whether the current device supports the creation of
            <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> resources for a specified type <typeparamref name="T"/>.
            </summary>
            <typeparam name="T">The type of values to check support for.</typeparam>
            <returns>Whether <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instances can be created by the current device.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.RegisterPipelineData(ComputeSharp.Shaders.Models.PipelineData)">
            <summary>
            Registers a <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> object for the current device to enable early disposal.
            </summary>
            <param name="pipelineData">The <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instance just loaded to run a shader.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.RentShaderResourceViewDescriptorHandles(ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles@)">
            <inheritdoc cref="M:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.Rent(ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles@)"/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ReturnShaderResourceViewDescriptorHandles(ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles@)">
            <inheritdoc cref="M:ComputeSharp.Graphics.Commands.Interop.ID3D12DescriptorHandleAllocator.Return(ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles@)"/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.GetCommandListAndAllocator(TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*@,TerraFX.Interop.DirectX.ID3D12CommandAllocator*@)">
            <inheritdoc cref="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.Rent(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.ID3D12PipelineState*,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*@,TerraFX.Interop.DirectX.ID3D12CommandAllocator*@)"/>
            <param name="d3D12CommandListType">The type of command allocator to rent.</param>
            <param name="d3D12CommandList">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value.</param>
            <param name="d3D12CommandAllocator">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.GetCommandListAndAllocator(TerraFX.Interop.DirectX.ID3D12PipelineState*,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*@,TerraFX.Interop.DirectX.ID3D12CommandAllocator*@)">
            <inheritdoc cref="M:ComputeSharp.Graphics.Commands.Interop.ID3D12CommandListPool.Rent(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.ID3D12PipelineState*,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*@,TerraFX.Interop.DirectX.ID3D12CommandAllocator*@)"/>
            <param name="d3D12PipelineState">The <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance to use for the new command list.</param>
            <param name="d3D12CommandList">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> value.</param>
            <param name="d3D12CommandAllocator">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12CommandAllocator"/> value.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.SetDescriptorHeapForCommandList(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*)">
            <summary>
            Sets the descriptor heap for a given <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance.
            </summary>
            <param name="d3D12GraphicsCommandList">The input <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> instance to use.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForRegisterDeviceLostCallbackWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackDelegate"/> instance wrapping <see cref="M:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForRegisterDeviceLostCallback(System.Void*,System.Byte)"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ThrowIfDeviceLost">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the current device has been lost.
            </summary>
            <exception cref="T:System.InvalidOperationException">Thrown if the current device has been lost.</exception>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.QueueRaiseDeviceLostEventIfNeeded">
            <summary>
            Raises the <see cref="E:ComputeSharp.GraphicsDevice.DeviceLost"/> event if needed.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.QueueRaiseDeviceLostEvent">
            <summary>
            Queues the <see cref="E:ComputeSharp.GraphicsDevice.DeviceLost"/> event being raised on the thread pool.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.RegisterDeviceLostCallback(ComputeSharp.GraphicsDevice,System.Runtime.InteropServices.GCHandle@,TerraFX.Interop.Windows.HANDLE@,TerraFX.Interop.Windows.HANDLE@)">
            <summary>
            Registers a callback to notify whenever the current device is lost.
            </summary>
            <param name="device">The current <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</param>
            <param name="deviceHandle">The resulting <see cref="T:System.Runtime.InteropServices.GCHandle"/> used as callback state.</param>
            <param name="deviceRemovedEvent">The resulting device lost event for the callback.</param>
            <param name="deviceRemovedWaitHandle">The resulting device lost wait handle for the callback.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.UnregisterDeviceLostCallback(ComputeSharp.GraphicsDevice)">
            <summary>
            Unregisters a callback setup by <see cref="M:ComputeSharp.GraphicsDevice.RegisterDeviceLostCallback(ComputeSharp.GraphicsDevice,System.Runtime.InteropServices.GCHandle@,TerraFX.Interop.Windows.HANDLE@,TerraFX.Interop.Windows.HANDLE@)"/>.
            </summary>
            <param name="device">The current <see cref="T:ComputeSharp.GraphicsDevice"/> instance.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForRegisterDeviceLostCallback(System.Void*,System.Byte)">
            <summary>
            The callback to signal a device lost event.
            </summary>
            <param name="pContext">The input context.</param>
            <param name="timedOut">Whether the wait has timed out.</param>
        </member>
        <member name="T:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackDelegate">
            <summary>
            A delegate for a callback to pass to <see cref="M:TerraFX.Interop.Windows.Windows.RegisterWaitForSingleObject(TerraFX.Interop.Windows.HANDLE*,TerraFX.Interop.Windows.HANDLE,System.Void*,System.Void*,System.UInt32,System.UInt32)"/>.
            </summary>
            <param name="pContext">The input context.</param>
            <param name="timedOut">Whether the wait has timed out.</param>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForWaitForFenceAsyncWrapper">
            <summary>
            A cached <see cref="T:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackDelegate"/> instance wrapping <see cref="M:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForWaitForFenceAsync(System.Void*,System.Byte)"/>.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ExecuteCommandList(ComputeSharp.Graphics.Commands.CommandList@)">
            <summary>
            Executes a given command list and waits for the operation to be completed.
            </summary>
            <param name="commandList">The input <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> to execute.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ExecuteCommandListAsync(ComputeSharp.Graphics.Commands.CommandList@)">
            <summary>
            Executes a given command list and returns an awaitable for the operation to be completed.
            </summary>
            <param name="commandList">The input <see cref="T:System.Threading.Tasks.ValueTask"/> to execute.</param>
            <returns>The <see cref="T:System.Threading.Tasks.ValueTask"/> object representing the operation to wait for.</returns>
            <remarks>This method is only supported for compute operations.</remarks>
        </member>
        <member name="T:ComputeSharp.GraphicsDevice.CallbackContext">
            <summary>
            A context to support <see cref="M:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForWaitForFenceAsync(System.Void*,System.Byte)"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.CallbackContext.WaitForFenceValueTaskSourceHandle">
            <summary>
            The <see cref="T:System.Runtime.InteropServices.GCHandle"/> wrapping the <see cref="T:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource"/> object to signal completion.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.CallbackContext.GraphicsDeviceHandle">
            <summary>
            The <see cref="T:System.Runtime.InteropServices.GCHandle"/> wrapping the <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.CallbackContext.D3D12GraphicsCommandList">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> used to queue the operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.CallbackContext.D3D12CommandAllocator">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object backing <see name="D3D12GraphicsCommandList"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.CallbackContext.EventHandle">
            <summary>
            The event handle set when the target fence value is reached.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceAsync(System.UInt64,ComputeSharp.GraphicsDevice,TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*,TerraFX.Interop.DirectX.ID3D12CommandAllocator*)">
            <summary>
            Asynchronously waits for a target fence value to be completed.
            </summary>
            <param name="d3D12FenceValue">The target fence value to wait for.</param>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> instance executing the operations.</param>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> used to queue the operations.</param>
            <param name="d3D12CommandAllocator">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object backing <paramref name="d3D12GraphicsCommandList"/>.</param>
            <returns>The <see cref="T:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource"/> object representing the operation to wait for.</returns>
            <remarks>This method is only supported for compute operations.</remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForSingleObjectCallbackForWaitForFenceAsync(System.Void*,System.Byte)">
            <summary>
            The callback to signal the completion of a compute pipeline.
            </summary>
            <param name="pContext">The input context.</param>
            <param name="timedOut">Whether the wait has timed out.</param>
        </member>
        <member name="T:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource">
            <summary>
            A reusable <see cref="T:System.Threading.Tasks.Sources.IValueTaskSource"/> type.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.ValueTaskSourceQueue">
            <summary>
            The shared <see cref="T:System.Collections.Concurrent.ConcurrentQueue`1"/> holding the reusable <see cref="T:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource"/> instances.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.queuedValueTaskSourceCount">
            <summary>
            The approximate count of currently enqueued instances in <see cref="F:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.ValueTaskSourceQueue"/>.
            </summary>
        </member>
        <member name="F:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.manualResetValueTaskSource">
            <summary>
            The wrapped <see cref="T:System.Threading.Tasks.Sources.ManualResetValueTaskSourceCore`1"/> instance being used.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.Rent">
            <summary>
            Rents a <see cref="T:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource"/> instance.
            </summary>
            <returns>A <see cref="T:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource"/> instance to use.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.AsValueTask">
            <summary>
            Creates a new <see cref="T:System.Threading.Tasks.ValueTask"/> from the current instance.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.ValueTask"/> used to wait for the underlying operation.</returns>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.Complete">
            <summary>
            Signals the current instance for completion.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.GetResult(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.GetStatus(System.Int16)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.WaitForFenceValueTaskSource.OnCompleted(System.Action{System.Object},System.Object,System.Int16,System.Threading.Tasks.Sources.ValueTaskSourceOnCompletedFlags)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.GetDefault">
            <summary>
            Gets or creates the default <see cref="T:ComputeSharp.GraphicsDevice"/> instance for the current machine.
            <para>
            The default define is the first device supporting the required feature level that could
            be created when enumerating the available adapters in performance order. That is, it is
            conceptually equivalent to the first successfully created device from <see cref="M:ComputeSharp.GraphicsDevice.EnumerateDevices"/>.
            </para>
            </summary>
            <returns>The default <see cref="T:ComputeSharp.GraphicsDevice"/> instance for the current machine.</returns>
            <remarks>
            The returned <see cref="T:ComputeSharp.GraphicsDevice"/> is cached across multiple invocations. In order to
            support device lost scenarios (see <see cref="E:ComputeSharp.GraphicsDevice.DeviceLost"/>) and due to how the DirectX 12
            runtime handles caching of device instances, this method has the following behavior:
            <list type="bullet">
              <item>If no device has been created, create the default one, cache it, and return it.</item>
              <item>If a cached device is available, return that.</item>
              <item>If the returned device is disposed, the cache is reset.</item>
              <item>
                If <see cref="M:ComputeSharp.GraphicsDevice.GetDefault"/> is called again after that, the returned device might map to a different adapter.
                This would be the case if the first device was lost due to the adapter being removed from the system.
              </item>
            </list>
            There is one additional caveat to the list above: if <see cref="M:ComputeSharp.GraphicsDevice.GetDefault"/> is called, then that device is lost, then
            the returned <see cref="T:ComputeSharp.GraphicsDevice"/> instance is disposed incorrectly (eg. with some existing resources not being
            disposed, which would keep the underlying device object alive), calling <see cref="M:ComputeSharp.GraphicsDevice.GetDefault"/> again will result in
            an exception instead of a different device being returned. That is, if enumerating adapters and trying to create a device
            fails due to device lost (as opposed to other valid failures when trying to normally create a device), an exception will be
            thrown instead of just skipping that adapter, because that would mean a device had been created but incorrectly disposed.
            </remarks>
            <exception cref="T:System.InvalidOperationException">Thrown if the target device was lost and incorrectly disposed (see remarks).</exception>
            <exception cref="T:System.NotSupportedException">Thrown if no adapter could be created (this should never be the case).</exception>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.EnumerateDevices">
            <summary>
            Enumerates all the currently available devices supporting the minimum necessary feature level.
            Physical devices and integrated GPUs will be enumerated first, and the WARP device will always be last.
            </summary>
            <returns>A sequence of <see cref="T:ComputeSharp.GraphicsDevice"/> instances.</returns>
            <remarks>
            Creating a device is a relatively expensive operation, so consider using <see cref="M:ComputeSharp.GraphicsDevice.QueryDevices(System.Predicate{ComputeSharp.GraphicsDeviceInfo})"/> to be
            able to filter the existing adapters before creating a device from them, to reduce the system overhead.
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.QueryDevices(System.Predicate{ComputeSharp.GraphicsDeviceInfo})">
            <summary>
            Executes a query on the currently available devices matching a given predicate.
            </summary>
            <param name="predicate">The predicate to use to select the devices to create.</param>
            <returns>A sequence of <see cref="T:ComputeSharp.GraphicsDevice"/> instances matching <paramref name="predicate"/>.</returns>
            <remarks>
            Note that only devices matching the minimum necessary feature level will actually be instantiated and returned.
            This means that <paramref name="predicate"/> might not actually be used to match against all existing adapters on
            the current system, if any of them doesn't meet the minimum criteria, and that additional filtering might be done
            after the input predicate is invoked, so a match doesn't necessarily guarantee that that device will be returned.
            </remarks>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.CreateOrAllocateResource(ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,System.UInt64,TerraFX.Interop.Windows.ComPtr{ComputeSharp.Interop.Allocation.ID3D12Allocation}@,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.DirectX.ID3D12Resource}@)">
            <summary>
            Creates or allocates a resource for a given buffer type.
            </summary>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="sizeInBytes">The size in bytes of the current buffer.</param>
            <param name="allocation">The resulting <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object, if one is used.</param>
            <param name="d3D12Resource">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object for the buffer.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.CreateOrAllocateResource(ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,TerraFX.Interop.Windows.ComPtr{ComputeSharp.Interop.Allocation.ID3D12Allocation}@,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.DirectX.ID3D12Resource}@,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Creates or allocates a resource for a given 1D texture type.
            </summary>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <param name="allocation">The resulting <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object, if one is used.</param>
            <param name="d3D12Resource">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object for the 1D texture.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.CreateOrAllocateResource(ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,TerraFX.Interop.Windows.ComPtr{ComputeSharp.Interop.Allocation.ID3D12Allocation}@,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.DirectX.ID3D12Resource}@,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Creates or allocates a resource for a given 2D texture type.
            </summary>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <param name="allocation">The resulting <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object, if one is used.</param>
            <param name="d3D12Resource">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object for the 2D texture.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.CreateOrAllocateResource(ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.DXGI_FORMAT,System.UInt32,System.UInt32,System.UInt16,TerraFX.Interop.Windows.ComPtr{ComputeSharp.Interop.Allocation.ID3D12Allocation}@,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.DirectX.ID3D12Resource}@,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES@)">
            <summary>
            Creates or allocates a resource for a given 3D texture type.
            </summary>
            <param name="resourceType">The resource type currently in use.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="dxgiFormat">The <see cref="T:TerraFX.Interop.DirectX.DXGI_FORMAT"/> value to use.</param>
            <param name="width">The width of the texture resource.</param>
            <param name="height">The height of the texture resource.</param>
            <param name="depth">The depth of the texture resource.</param>
            <param name="d3D12ResourceStates">The default <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the resource.</param>
            <param name="allocation">The resulting <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> object, if one is used.</param>
            <param name="d3D12Resource">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object for the 3D texture.</param>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.GraphicsDevice.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.GraphicsDeviceInfo">
            <summary>
            A type containing info on a given device that can be used.
            </summary>
        </member>
        <member name="M:ComputeSharp.GraphicsDeviceInfo.#ctor(TerraFX.Interop.DirectX.DXGI_ADAPTER_DESC1*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.GraphicsDeviceInfo"/> instance with the specified parameters.
            </summary>
            <param name="dxgiDescription1">The available info for the associated device.</param>
        </member>
        <member name="P:ComputeSharp.GraphicsDeviceInfo.Luid">
            <summary>
            Gets the locally unique identifier for the current device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDeviceInfo.Name">
            <summary>
            Gets the name of the associated device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDeviceInfo.DedicatedMemorySize">
            <summary>
            Gets the size of the dedicated memory for the associated device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDeviceInfo.SharedMemorySize">
            <summary>
            Gets the size of the shared system memory for the associated device.
            </summary>
        </member>
        <member name="P:ComputeSharp.GraphicsDeviceInfo.IsHardwareAccelerated">
            <summary>
            Gets whether or not the associated device is hardware accelerated.
            This value is <see langword="false"/> for software fallback devices.
            </summary>
        </member>
        <member name="T:ComputeSharp.Interop.AllocationServices">
            <summary>
            Provides methods to configure the global allocator factory instance that will be used by all <see cref="T:ComputeSharp.GraphicsDevice"/> objects.
            </summary>
            <remarks>
            <para>
            By default, all resources will be created as committed resources. The <see cref="T:ComputeSharp.Interop.AllocationServices"/> APIs make it possible to change
            this behavior, and instead use a pluggable memory allocator implementing any desired custom logic to manage how resources are created.
            </para>
            <para>
            Memory allocators are created through a factory object that can be configured via <see cref="M:ComputeSharp.Interop.AllocationServices.ConfigureAllocatorFactory(System.Runtime.InteropServices.ICustomQueryInterface)"/>. This object
            needs to implement the <c>ID3D12MemoryAllocatorFactory</c> COM interface, which has the following definition:
            <code>
            [uuid(CC1E74A7-786D-40F4-8AE2-F8B7A255587E)]
            interface ID3D12MemoryAllocatorFactory : IUnknown
            {
                HRESULT CreateAllocator(
                    [in] const ID3D12Device* device,
                    [in] const IDXGIAdapter* adapter,
                    [out] ID3D12MemoryAllocator allocator);
            };
            </code>
            </para>
            <para>
            This is a simple, possibly stateless factory, responsible for creating per-device memory allocators. Those use the following interface:
            <code>
            [uuid(2D5E55D2-9244-431F-868E-0D90AAB6E575)]
            interface ID3D12MemoryAllocator : IUnknown
            {
                HRESULT AllocateResource(
                    [in] const D3D12_RESOURCE_DESC* resourceDescription,
                    const D3D12_HEAP_TYPE heapType,
                    const D3D12_RESOURCE_STATES resourceState,
                    const BOOL clearAllocation,
                    [out] ID3D12Allocation** allocation);
            };
            </code>
            </para>
            <para>
            Finally, each returned allocation object wraps a given native resource, and uses the following interface:
            <code>
            [uuid(D42D5782-2DE7-4539-A817-482E3AA01E2E)]
            interface ID3D12Allocation : IUnknown
            {
                HRESULT GetD3D12Resource([out] ID3D12Resource** resource);
            };
            </code>
            </para>
            <para>
            The implementation of these types can be done in any language, as long as the COM interfaces defined above are correctly supported.
            </para>
            </remarks>
        </member>
        <member name="M:ComputeSharp.Interop.AllocationServices.ConfigureAllocatorFactory(System.Runtime.InteropServices.ICustomQueryInterface)">
            <summary>
            Configures the global <c>ID3D12MemoryAllocatorFactory</c> instance to use for the current process.
            </summary>
            <param name="allocatorFactory">The input <see cref="T:System.Runtime.InteropServices.ICustomQueryInterface"/> instance to use (implementing <c>ID3D12MemoryAllocatorFactory</c>).</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="allocatorFactory"/> is <see langword="null"/>.</exception>
            <exception cref="T:System.InvalidOperationException">Thrown if the allocator factory cannot be configured at this time.</exception>
            <remarks>
            The allocatory factory can only be configured once, and before any <see cref="T:ComputeSharp.GraphicsDevice"/> instance has been created.
            </remarks>
        </member>
        <member name="T:ComputeSharp.Interop.Allocation.ID3D12Allocation">
            <summary>
            An allocation wrapper for a native <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.
            </summary>
        </member>
        <member name="P:ComputeSharp.Interop.Allocation.ID3D12Allocation.Guid">
            <summary>
            Gets the <see cref="T:System.Guid"/> for <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> (<c>D42D5782-2DE7-4539-A817-482E3AA01E2E</c>).
            </summary>
        </member>
        <member name="F:ComputeSharp.Interop.Allocation.ID3D12Allocation.lpVtbl">
            <summary>
            The vtable for the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12Allocation.QueryInterface(System.Guid*,System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12Allocation.AddRef">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12Allocation.Release">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12Allocation.GetD3D12Resource(TerraFX.Interop.DirectX.ID3D12Resource**)">
            <summary>
            Gets the underlying <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> for the current instance.
            </summary>
            <param name="resource">The resulting <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> object.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.HRESULT"/> for the operation.</returns>
            <remarks>
            The returned resource should not be used after the current allocation instance has been released.
            </remarks>
        </member>
        <member name="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator">
            <summary>
            An object that can allocate resources for a given <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator.Guid">
            <summary>
            Gets the <see cref="T:System.Guid"/> for <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> (<c>2D5E55D2-9244-431F-868E-0D90AAB6E575</c>).
            </summary>
        </member>
        <member name="F:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator.lpVtbl">
            <summary>
            The vtable for the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator.QueryInterface(System.Guid*,System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator.AddRef">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator.Release">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator.AllocateResource(TerraFX.Interop.DirectX.D3D12_RESOURCE_DESC*,TerraFX.Interop.DirectX.D3D12_HEAP_TYPE,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES,TerraFX.Interop.Windows.BOOL,ComputeSharp.Interop.Allocation.ID3D12Allocation**)">
            <summary>
            Creates a new resource allocation from the current allocator.
            </summary>
            <param name="resourceDescription">The description of the resource to allocate.</param>
            <param name="heapType">The type of heap to use for the allocation.</param>
            <param name="resourceStates">The resource states to use initially for the resource.</param>
            <param name="clearAllocation">Whether to clear the allocation after creating it.</param>
            <param name="allocation">The resulting allocation.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.HRESULT"/> for the operation.</returns>
        </member>
        <member name="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory">
            <summary>
            A factory type for <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> objects.
            </summary>
        </member>
        <member name="P:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory.Guid">
            <summary>
            Gets the <see cref="T:System.Guid"/> for <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory"/> (<c>CC1E74A7-786D-40F4-8AE2-F8B7A255587E</c>).
            </summary>
        </member>
        <member name="F:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory.lpVtbl">
            <summary>
            The vtable for the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory.QueryInterface(System.Guid*,System.Void**)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory.AddRef">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory.Release">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocatorFactory.CreateAllocator(TerraFX.Interop.DirectX.ID3D12Device*,TerraFX.Interop.DirectX.IDXGIAdapter*,ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator**)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> for a given device.
            </summary>
            <param name="device">The device to create the allocator for.</param>
            <param name="adapter">The <see cref="T:TerraFX.Interop.DirectX.IDXGIAdapter"/> for <paramref name="device"/>.</param>
            <param name="allocator">The resulting <see cref="T:ComputeSharp.Interop.Allocation.ID3D12MemoryAllocator"/> instance.</param>
            <returns>An <see cref="T:TerraFX.Interop.Windows.HRESULT"/> for the operation.</returns>
        </member>
        <member name="T:ComputeSharp.Interop.InteropServices">
            <summary>
            Provides methods to interoperate with the native APIs and the managed types in this library.
            <para>
            None of the APIs in <see cref="T:ComputeSharp.Interop.InteropServices"/> perform input validation, and it is responsibility
            of consumers to ensure the input arguments are in a correct state to be used (eg. not disposed).
            </para>
            <para>
            Manually interfering with the underlying COM objects for any of these types can result in issues if
            the operations are not done correctly, which can prevent other APIs from functioning as expected.
            Consumers should ensure the executed operations do not result in any errors. Furthermore, even when
            the reference count to the returned COM object is incremented, consumers should ensure that the owning
            objects will remain alive as long as the returned pointers are in use, to avoid unexpected issues. This
            is because the lifecycle of certain COM objects (eg. resources) is delegated to an internal allocator
            that relies on resources being disposed as soon as the relative allocation object is disposed.
            </para>
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Device(ComputeSharp.GraphicsDevice,System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given device, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <param name="device">The input <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the device interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="device"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.Buffer{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="buffer"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.Texture1D{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.Texture2D{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.Texture3D{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.TransferBuffer{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="buffer"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.TransferTexture2D{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture2D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.GetID3D12Resource``1(ComputeSharp.Resources.TransferTexture3D{``0},System.Guid*,System.Void**)">
            <summary>
            Gets the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture3D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
            <exception cref="T:System.ComponentModel.Win32Exception">Thrown if the <c>IUnknown::QueryInterface</c> call doesn't return <c>S_OK</c>.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Device(ComputeSharp.GraphicsDevice,System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given device, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <param name="device">The input <see cref="T:ComputeSharp.GraphicsDevice"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the device interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="device"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.Buffer{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="buffer"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.Texture1D{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.Texture2D{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.Texture3D{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.TransferBuffer{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="buffer"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.TransferTexture2D{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture2D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.InteropServices.TryGetID3D12Resource``1(ComputeSharp.Resources.TransferTexture3D{``0},System.Guid*,System.Void**)">
            <summary>
            Tries to get the underlying COM object for a given resource, as a specified interface. This method invokes
            <see href="https://docs.microsoft.com/windows/win32/api/unknwn/nf-unknwn-iunknown-queryinterface(refiid_void)">IUnknown::QueryInterface</see>.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture3D`1"/> instance in use.</param>
            <param name="riid">A reference to the interface identifier (IID) of the resource interface being queried for.</param>
            <param name="ppvObject">The address of a pointer to an interface with the IID specified in <paramref name="riid"/>.</param>
            <returns>
            <c>S_OK</c> if the interface is supported, and <c>E_NOINTERFACE</c> otherwise.
            If ppvObject (the address) is nullptr, then this method returns <c>E_POINTER</c>.
            </returns>
            <exception cref="T:System.ObjectDisposedException">The <paramref name="texture"/> instance has been disposed.</exception>
        </member>
        <member name="T:ComputeSharp.Interop.IReferenceTrackedObject">
            <summary>
            An interface for an object being tracked by an owning <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> object.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker">
            <summary>
            Gets a reference to the owning <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> for the object.
            </summary>
            <returns>A reference to the owning <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> for the object.</returns>
        </member>
        <member name="M:ComputeSharp.Interop.IReferenceTrackedObject.DangerousOnDispose">
            <summary>
            Releases all resources (including unmanaged ones) for the tracked object.
            </summary>
            <remarks>
            This method <b>must never be called directly</b>. It is invoked automatically by <see cref="T:ComputeSharp.Interop.ReferenceTracker"/>
            when a lease is returned, there are no outstanding leases and dispose has been requested on the target object. This ensures
            that <see cref="M:ComputeSharp.Interop.IReferenceTrackedObject.DangerousOnDispose"/> will only be called once per object when there are no active callsites using it anymore.
            </remarks>
        </member>
        <member name="T:ComputeSharp.Interop.ReferenceTrackedObject">
            <summary>
            Base class for a <see cref="T:System.IDisposable"/> class (only to be used for internal types, as it can't leak in the public API surface).
            </summary>
        </member>
        <member name="F:ComputeSharp.Interop.ReferenceTrackedObject.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTrackedObject.#ctor">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Interop.ReferenceTrackedObject"/> instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTrackedObject.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTrackedObject.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTrackedObject.GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTrackedObject.DangerousOnDispose">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.DangerousOnDispose"/>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTrackedObject.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Interop.ReferenceTracker">
            <summary>
            An object acting as reference tracked for a given managed object.
            </summary>
        </member>
        <member name="F:ComputeSharp.Interop.ReferenceTracker.trackedObject">
            <summary>
            The target object to track.
            </summary>
        </member>
        <member name="F:ComputeSharp.Interop.ReferenceTracker.referenceTrackingMask">
            <summary>
            A mask that indicates the state of the current object.
            The mask uses the following schema:
            <list type="bullet">
                <item>[0, 30]: the number of existing reference tracking leases.</item>
                <item>[31]: whether or not <see cref="M:System.IDisposable.Dispose"/> has been called.</item>
            </list>
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.#ctor(ComputeSharp.Interop.IReferenceTrackedObject)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> instance with the specified paramters.
            </summary>
            <param name="trackedObject">The input tracked object to wrap.</param>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.Create(ComputeSharp.Interop.IReferenceTrackedObject,ComputeSharp.Interop.ReferenceTracker@)">
             <summary>
             Creates a new <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> instance with the specified parameters and returns a lease to keep the caller alive.
             </summary>
             <param name="trackedObject">The input tracked object to wrap.</param>
             <param name="referenceTracker">The resulting <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> field to initialize.</param>
             <returns>A <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> object that can extend the lifetime of the tracked object.</returns>
             <remarks>
             <para>
             This method should be used by all types using a <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> object, to ensure that their constructors keep
             the object alive while they're running. This is needed to ensure the GC doesn't start finalizing the object midway through.
             </para>
             <para>
             That is, objects should initialize the tracker as the first thing in their constructors, and keep the lease around like so:
             <code>
             public ManagedObject()
             {
                 using ReferenceTracker.Lease _0 = ReferenceTracker.Create(this, out this.referenceTracker);
            
                 // Rest of the constructor logic here...
             }
             </code>
             This guarantees that if a concurrent GC happens, the code will not accidentally get into an invalid state.
             </para>
             </remarks>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.DangerousCreate(ComputeSharp.Interop.IReferenceTrackedObject,ComputeSharp.Interop.ReferenceTracker@)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> instance with the specified paramters.
            </summary>
            <param name="trackedObject">The input tracked object to wrap.</param>
            <param name="referenceTracker">The resulting <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> field to initialize.</param>
            <remarks>
            Contrary to <see cref="M:ComputeSharp.Interop.ReferenceTracker.Create(ComputeSharp.Interop.IReferenceTrackedObject,ComputeSharp.Interop.ReferenceTracker@)"/>, this method doesn't also keep a lease
            to ensure the object isn't finalized while the constructor is running. Derived types are responsible for getting a new
            lease as the first thing they do in their constructors (using the tracker initialized in the base constructor), and
            keeping that alive for the rest of their logic. This ensures a consistent behavior across derived types as well.
            </remarks>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.DangerousAddRef">
            <summary>
            Adds an untracked reference to the underlying object. This needs to be released with <see cref="M:ComputeSharp.Interop.ReferenceTracker.DangerousRelease"/>.
            </summary>
            <exception cref="T:System.ObjectDisposedException">Thrown if the tracked object has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.DangerousRelease">
            <summary>
            Decrements the reference count for the underlying object. A call to this API has to match a previous <see cref="M:ComputeSharp.Interop.ReferenceTracker.DangerousAddRef"/> call.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.GetLease">
            <summary>
            Gets a <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> value to extend the lifetime of the tracked object.
            </summary>
            <returns>A <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> object that can extend the lifetime of the tracked object.</returns>
            <exception cref="T:System.ObjectDisposedException">Thrown if the tracked object has been disposed.</exception>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.TryGetLease(System.Boolean@)">
            <summary>
            Tries to get a <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> value to extend the lifetime of the tracked object.
            </summary>
            <param name="leaseTaken">Whether or not the returned <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> value is enabled.</param>
            <returns>A <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> object that can extend the lifetime of the tracked object.</returns>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.ReturnLease">
            <summary>
            Returns a given lease (ie. decrements the ref count for the tracked object).
            </summary>
        </member>
        <member name="T:ComputeSharp.Interop.ReferenceTracker.Lease">
            <summary>
            A reference tracking lease to extend the lifetime of a given <see cref="T:ComputeSharp.Interop.IReferenceTrackedObject"/> instance while in a given scope.
            </summary>
            <remarks>
            This type must always be used in a <see langword="using"/> statement and disposed properly. Not doing
            so is undefined behavior and may result in memory leaks and inability to correctly restore lost devices.
            </remarks>
        </member>
        <member name="F:ComputeSharp.Interop.ReferenceTracker.Lease.trackedObject">
            <summary>
            The <see cref="T:ComputeSharp.Interop.IReferenceTrackedObject"/> instance being wrapped, if any.
            </summary>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.Lease.#ctor(ComputeSharp.Interop.IReferenceTrackedObject)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Interop.ReferenceTracker.Lease"/> instance with the specified parameters.
            </summary>
            <param name="trackedObject">The <see cref="T:ComputeSharp.Interop.IReferenceTrackedObject"/> instance being wrapped, if any.</param>
        </member>
        <member name="M:ComputeSharp.Interop.ReferenceTracker.Lease.Dispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Resources.Buffer`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed buffer stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.Buffer`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Buffer`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.Buffer`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Buffer`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Buffer`1.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Buffer`1.d3D12ResourceDescriptorHandlesForTypedUnorderedAccessView">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource, when a typed UAV is needed.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Buffer`1.SizeInBytes">
            <summary>
            The size in bytes of the current buffer (this value is never negative).
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.UInt32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="P:ComputeSharp.Resources.Buffer`1.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="elementSizeInBytes">The size in bytes of each buffer item (including padding, if any).</param>
            <param name="resourceType">The resource type for the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Buffer`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.Buffer`1.Length">
            <summary>
            Gets the length of the current buffer.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Buffer`1.IsPaddingPresent">
            <summary>
            Gets whether or not there is some padding between elements in the current buffer.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Buffer`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Buffer`1.D3D12GpuDescriptorHandle">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.CopyTo(`0@,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target memory area.
            </summary>
            <param name="destination">The input memory area to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="count">The length of the memory area to write data to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.CopyTo(ComputeSharp.Resources.Buffer{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given range from the current <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.CopyToWithCpuBuffer(ComputeSharp.Resources.Buffer{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given range from the current <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance, using a temporary CPU buffer.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.CopyFrom(`0@,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given memory area to a specified area of the current <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <param name="source">The input memory area to read data from.</param>
            <param name="destinationOffset">The offset to start writing data to.</param>
            <param name="count">The length of the input memory area to read data from.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Buffer`1.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="T:ComputeSharp.Resources.Texture1D`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed 1D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.Texture1D`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.d3D12CommandListType">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE"/> value to use for copy operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.d3D12PlacedSubresourceFootprint">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> description for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture1D`1.d3D12ResourceState">
            <summary>
            The current <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.D3D12_FORMAT_SUPPORT1)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="resourceType">The resource type for the current texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="d3D12FormatSupport">The format support for the current texture type.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Texture1D`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.Texture1D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture1D`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture1D`1.D3D12GpuDescriptorHandle">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.CopyTo(`0@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target memory area.
            </summary>
            <param name="destination">The target memory area to write data to.</param>
            <param name="size">The size of the target memory area to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.CopyTo(ComputeSharp.Resources.Texture1D{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance to write data to.</param>
            <param name="destinationOffsetX">The horizontal offset within <paramref name="destination"/>.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.CopyTo(ComputeSharp.ReadBackTexture1D{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset within <paramref name="destination"/>.</param>
            <param name="width">The width of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.CopyFrom(`0@,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given memory area to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <param name="source">The input memory area to read data from.</param>
            <param name="size">The size of the memory area to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.CopyFrom(ComputeSharp.UploadTexture1D{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset within <paramref name="source"/>.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ThrowIfIsNotInReadOnlyState">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the current resource is not in a readonly state.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture1D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Resources.Texture2D`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed 2D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.Texture2D`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.d3D12CommandListType">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE"/> value to use for copy operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.d3D12PlacedSubresourceFootprint">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> description for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture2D`1.d3D12ResourceState">
            <summary>
            The current <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.D3D12_FORMAT_SUPPORT1)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="resourceType">The resource type for the current texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="d3D12FormatSupport">The format support for the current texture type.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Texture2D`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.Texture2D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture2D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture2D`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture2D`1.D3D12GpuDescriptorHandle">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.CopyTo(`0@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target memory area.
            </summary>
            <param name="destination">The target memory area to write data to.</param>
            <param name="size">The size of the target memory area to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.CopyTo(ComputeSharp.Resources.Texture2D{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance to write data to.</param>
            <param name="destinationOffsetX">The horizontal offset within <paramref name="destination"/>.</param>
            <param name="destinationOffsetY">The vertical offset within <paramref name="destination"/>.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.CopyTo(ComputeSharp.ReadBackTexture2D{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset within <paramref name="destination"/>.</param>
            <param name="destinationOffsetY">The vertical offset within <paramref name="destination"/>.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.CopyFrom(`0@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given memory area to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <param name="source">The input memory area to read data from.</param>
            <param name="size">The size of the memory area to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.CopyFrom(ComputeSharp.UploadTexture2D{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset within <paramref name="source"/>.</param>
            <param name="sourceOffsetY">The vertical offset within <paramref name="source"/>.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ThrowIfIsNotInReadOnlyState">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the current resource is not in a readonly state.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture2D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Resources.Texture3D`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed 3D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.Texture3D`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.d3D12CommandListType">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_COMMAND_LIST_TYPE"/> value to use for copy operations.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.d3D12PlacedSubresourceFootprint">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> description for the current resource.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.Texture3D`1.d3D12ResourceState">
            <summary>
            The current <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode,TerraFX.Interop.DirectX.D3D12_FORMAT_SUPPORT1)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="resourceType">The resource type for the current texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
            <param name="d3D12FormatSupport">The format support for the current texture type.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Texture3D`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.Texture3D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture3D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture3D`1.Depth">
            <summary>
            Gets the depth of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture3D`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.Texture3D`1.D3D12GpuDescriptorHandle">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.CopyTo(`0@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a target memory area.
            </summary>
            <param name="destination">The target memory area to write data to.</param>
            <param name="size">The size of the memory area to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.CopyTo(ComputeSharp.Resources.Texture3D{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset within <paramref name="destination"/>.</param>
            <param name="destinationOffsetY">The vertical offset within <paramref name="destination"/>.</param>
            <param name="destinationOffsetZ">The depthwise offset within <paramref name="destination"/>.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.CopyTo(ComputeSharp.ReadBackTexture3D{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance and writes them into a <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance to write data to.</param>
            <param name="sourceOffsetX">The horizontal offset in the source texture.</param>
            <param name="sourceOffsetY">The vertical offset in the source texture.</param>
            <param name="sourceOffsetZ">The depthwise offset in the source texture.</param>
            <param name="destinationOffsetX">The horizontal offset within <paramref name="destination"/>.</param>
            <param name="destinationOffsetY">The vertical offset within <paramref name="destination"/>.</param>
            <param name="destinationOffsetZ">The depthwise offset within <paramref name="destination"/>.</param>
            <param name="width">The width of the memory area to copy.</param>
            <param name="height">The height of the memory area to copy.</param>
            <param name="depth">The depth of the memory area to copy.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.CopyFrom(`0@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given memory area to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <param name="source">The input memory area to read data from.</param>
            <param name="size">The size of the memory area to read data from.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
            <param name="depth">The depth of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.CopyFrom(ComputeSharp.UploadTexture3D{`0},System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Writes the contents of a given <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to a specified area of the current <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <param name="source">The input <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance to read data from.</param>
            <param name="sourceOffsetX">The horizontal offset within <paramref name="source"/>.</param>
            <param name="sourceOffsetY">The vertical offset within <paramref name="source"/>.</param>
            <param name="sourceOffsetZ">The depthwise offset within <paramref name="source"/>.</param>
            <param name="destinationOffsetX">The horizontal offset in the destination texture.</param>
            <param name="destinationOffsetY">The vertical offset in the destination texture.</param>
            <param name="destinationOffsetZ">The depthwise offset in the destination texture.</param>
            <param name="width">The width of the memory area to write to.</param>
            <param name="height">The height of the memory area to write to.</param>
            <param name="depth">The depth of the memory area to write to.</param>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ThrowIfIsNotInReadOnlyState">
            <summary>
            Throws an <see cref="T:System.InvalidOperationException"/> if the current resource is not in a readonly state.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc cref="M:ComputeSharp.__Internals.GraphicsResourceHelper.IGraphicsResource.ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)"/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.Texture3D`1.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Resources.TransferBuffer`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed buffer stored on CPU memory, that can be used to transfer data to/from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.TransferBuffer`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferBuffer`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.TransferBuffer`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferBuffer`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferBuffer`1.mappedData">
            <summary>
            The pointer to the start of the mapped buffer data.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="P:ComputeSharp.Resources.TransferBuffer`1.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="resourceType">The resource type for the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.Length">
            <summary>
            Gets the length of the current buffer.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.MappedData">
            <summary>
            Gets the pointer to the start of the mapped buffer data.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.Memory">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.Span">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.TransferBuffer`1.MemoryManager">
            <summary>
            A <see cref="T:System.Buffers.MemoryManager`1"/> implementation wrapping a <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.buffer">
            <summary>
            The <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> in use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.#ctor(ComputeSharp.Resources.TransferBuffer{`0})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.TransferBuffer`1.MemoryManager"/> instance for a given buffer.
            </summary>
            <param name="buffer">The <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> in use.</param>
        </member>
        <member name="P:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.Memory">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.GetSpan">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.Pin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.Unpin">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferBuffer`1.MemoryManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Resources.TransferTexture1D`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed 1D texture stored on on CPU memory, that can be used to transfer data to/from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture1D`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture1D`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.TransferTexture1D`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture1D`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture1D`1.mappedData">
            <summary>
            The pointer to the start of the mapped buffer data.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture1D`1.d3D12PlacedSubresourceFootprint">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> description for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="resourceType">The resource type for the current texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.D3D12PlacedSubresourceFootprint">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> value for the current resource.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.Memory">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.Span">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager">
            <summary>
            A <see cref="T:System.Buffers.MemoryManager`1"/> implementation wrapping a <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.buffer">
            <summary>
            The <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> in use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.#ctor(ComputeSharp.Resources.TransferTexture1D{`0})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager"/> instance for a given buffer.
            </summary>
            <param name="buffer">The <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> in use.</param>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.Memory">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.GetSpan">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.Pin(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.Unpin">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture1D`1.MemoryManager.Dispose(System.Boolean)">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Resources.TransferTexture2D`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed 2D texture stored on on CPU memory, that can be used to transfer data to/from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture2D`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture2D`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.TransferTexture2D`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture2D`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture2D`1.mappedData">
            <summary>
            The pointer to the start of the mapped buffer data.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture2D`1.d3D12PlacedSubresourceFootprint">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> description for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.TransferTexture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="resourceType">The resource type for the current texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture2D`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture2D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture2D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture2D`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture2D`1.D3D12PlacedSubresourceFootprint">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> value for the current resource.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture2D`1.View">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture2D`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.TransferTexture3D`1">
            <inheritdoc/>
            <summary>
            A <see langword="class"/> representing a typed 3D texture stored on on CPU memory, that can be used to transfer data to/from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.Finalize">
            <summary>
            Releases unmanaged resources and performs other cleanup operations.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.GetReferenceTracker">
            <inheritdoc cref="M:ComputeSharp.Interop.IReferenceTrackedObject.GetReferenceTracker"/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.ComputeSharp#Interop#IReferenceTrackedObject#GetReferenceTracker">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture3D`1.referenceTracker">
            <summary>
            The <see cref="T:ComputeSharp.Interop.ReferenceTracker"/> value for the current instance.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture3D`1.allocation">
            <summary>
            The <see cref="T:ComputeSharp.Interop.Allocation.ID3D12Allocation"/> instance used to retrieve <see cref="F:ComputeSharp.Resources.TransferTexture3D`1.d3D12Resource"/>, if available.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture3D`1.d3D12Resource">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture3D`1.mappedData">
            <summary>
            The pointer to the start of the mapped buffer data.
            </summary>
        </member>
        <member name="F:ComputeSharp.Resources.TransferTexture3D`1.d3D12PlacedSubresourceFootprint">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> description for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.TransferTexture3D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="resourceType">The resource type for the current texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.Depth">
            <summary>
            Gets the depth of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.D3D12Resource">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> instance currently mapped.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.D3D12PlacedSubresourceFootprint">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.D3D12_PLACED_SUBRESOURCE_FOOTPRINT"/> value for the current resource.
            </summary>
        </member>
        <member name="P:ComputeSharp.Resources.TransferTexture3D`1.View">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.ComputeSharp#Interop#IReferenceTrackedObject#DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.TransferTexture3D`1.ThrowIfDeviceMismatch(ComputeSharp.GraphicsDevice)">
            <summary>
            Throws a <see cref="T:ComputeSharp.Exceptions.GraphicsDeviceMismatchException"/> if the target device doesn't match the current one.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.StructuredBuffer`1">
            <summary>
            A <see langword="class"/> representing a typed structured buffer stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.StructuredBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.Graphics.Resources.Enums.ResourceType,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="resourceType">The buffer type for the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.Resources.StructuredBuffer`1.CopyTo(`0@,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.StructuredBuffer`1.CopyTo(ComputeSharp.Resources.Buffer{`0},System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.StructuredBuffer`1.CopyTo(ComputeSharp.ReadBackBuffer{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from the current <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance and writes them into a target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance to write data to.</param>
            <param name="sourceOffset">The offset to start reading data from.</param>
            <param name="destinationOffset">The starting offset within <paramref name="destination"/> to write data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="M:ComputeSharp.Resources.StructuredBuffer`1.CopyFrom(`0@,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Resources.StructuredBuffer`1.CopyFrom(ComputeSharp.UploadBuffer{`0},System.Int32,System.Int32,System.Int32)">
            <summary>
            Reads the contents of the specified range from an input <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance and writes them to the current the current <see cref="T:ComputeSharp.Resources.StructuredBuffer`1"/> instance.
            </summary>
            <param name="source">The input <see cref="T:ComputeSharp.UploadBuffer`1"/> instance to read data from.</param>
            <param name="sourceOffset">The starting offset within <paramref name="source"/> to read data from.</param>
            <param name="destinationOffset">The offset to start reading writing data to.</param>
            <param name="count">The number of items to read.</param>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.BufferDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.BufferDebugView`1.#ctor(ComputeSharp.Resources.Buffer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.BufferDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.Buffer`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.BufferDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.Texture1DDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.Texture1DDebugView`1.#ctor(ComputeSharp.Resources.Texture1D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.Texture1DDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture1D`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.Texture1DDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.Texture2DDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.Texture2DDebugView`1.#ctor(ComputeSharp.Resources.Texture2D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.Texture2DDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture2D`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.Texture2DDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.Texture3DDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.Texture3DDebugView`1.#ctor(ComputeSharp.Resources.Texture3D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.Texture3DDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.Texture3D`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.Texture3DDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.TransferBufferDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.TransferBufferDebugView`1.#ctor(ComputeSharp.Resources.TransferBuffer{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.TransferBufferDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="buffer">The input <see cref="T:ComputeSharp.Resources.TransferBuffer`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.TransferBufferDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.TransferTexture1DDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.TransferTexture1DDebugView`1.#ctor(ComputeSharp.Resources.TransferTexture1D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.TransferTexture1DDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture1D`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.TransferTexture1DDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.TransferTexture2DDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.TransferTexture2D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.TransferTexture2DDebugView`1.#ctor(ComputeSharp.Resources.TransferTexture2D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.TransferTexture2DDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture2D`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.TransferTexture2DDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Resources.Debug.TransferTexture3DDebugView`1">
            <summary>
            A debug proxy used to display items in a <see cref="T:ComputeSharp.Resources.TransferTexture3D`1"/> instance.
            </summary>
            <typeparam name="T">The type of items to display.</typeparam>
        </member>
        <member name="M:ComputeSharp.Resources.Debug.TransferTexture3DDebugView`1.#ctor(ComputeSharp.Resources.TransferTexture3D{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.Resources.Debug.TransferTexture3DDebugView`1"/> class with the specified parameters.
            </summary>
            <param name="texture">The input <see cref="T:ComputeSharp.Resources.TransferTexture3D`1"/> instance with the items to display.</param>
        </member>
        <member name="P:ComputeSharp.Resources.Debug.TransferTexture3DDebugView`1.Items">
            <summary>
            Gets the items to display for the current instance.
            </summary>
        </member>
        <member name="T:ComputeSharp.Luid">
            <summary>
            A locally unique identifier for a graphics device.
            </summary>
        </member>
        <member name="F:ComputeSharp.Luid.lowPart">
            <summary>
            The low bits of the luid.
            </summary>
        </member>
        <member name="F:ComputeSharp.Luid.highPart">
            <summary>
            The high bits of the luid.
            </summary>
        </member>
        <member name="M:ComputeSharp.Luid.FromLUID(TerraFX.Interop.Windows.LUID)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Luid"/> instance from a raw <see cref="T:TerraFX.Interop.Windows.LUID"/> value.
            </summary>
            <param name="luid">The input <see cref="T:TerraFX.Interop.Windows.LUID"/> value.</param>
            <returns>A <see cref="T:ComputeSharp.Luid"/> instance with the same value.</returns>
        </member>
        <member name="M:ComputeSharp.Luid.Equals(ComputeSharp.Luid)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Luid.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Luid.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Luid.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Luid.op_Equality(ComputeSharp.Luid,ComputeSharp.Luid)">
            <summary>
            Check whether two <see cref="T:ComputeSharp.Luid"/> values are equal.
            </summary>
            <param name="a">The first <see cref="T:ComputeSharp.Luid"/> value to compare.</param>
            <param name="b">The second <see cref="T:ComputeSharp.Luid"/> value to compare.</param>
            <returns>Whether <paramref name="a"/> and <paramref name="b"/> are the same.</returns>
        </member>
        <member name="M:ComputeSharp.Luid.op_Inequality(ComputeSharp.Luid,ComputeSharp.Luid)">
            <summary>
            Check whether two <see cref="T:ComputeSharp.Luid"/> values are different.
            </summary>
            <param name="a">The first <see cref="T:ComputeSharp.Luid"/> value to compare.</param>
            <param name="b">The second <see cref="T:ComputeSharp.Luid"/> value to compare.</param>
            <returns>Whether <paramref name="a"/> and <paramref name="b"/> are different.</returns>
        </member>
        <member name="T:ComputeSharp.ConstantBuffer`1">
            <summary>
            A <see langword="class"/> representing a typed read write buffer stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="F:ComputeSharp.ConstantBuffer`1.ElementAlignment">
            <summary>
            The alignment boundary for elements in a constant buffer.
            </summary>
        </member>
        <member name="M:ComputeSharp.ConstantBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ConstantBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ConstantBuffer`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current constant buffer.
            </summary>
            <param name="i">The index of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ConstantBuffer`1.GetPaddedSize">
            <summary>
            Gets the right padded size for <typeparamref name="T"/> elements to store in the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.ConstantBuffer`1.CopyTo(`0@,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ConstantBuffer`1.CopyTo(ComputeSharp.Resources.Buffer{`0},System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ConstantBuffer`1.CopyFrom(`0@,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ConstantBuffer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.AllocationMode">
            <summary>
            An <see langword="enum"/> that indicates a mode to use when allocating resources.
            </summary>
        </member>
        <member name="F:ComputeSharp.AllocationMode.Default">
            <summary>
            The default allocation mode for graphics resources. Allocated buffers are not explicitly cleared when created.
            They can still be cleared for security reasons in some situations, but this step will be skipped whenever possible.
            As such, always make sure not to read directly to buffers created this way before writing data to them first.
            </summary>
        </member>
        <member name="F:ComputeSharp.AllocationMode.Clear">
            <summary>
            Clear allocated buffers when creating them.
            </summary>
        </member>
        <member name="T:ComputeSharp.ResourceState">
            <summary>
            An <see langword="enum"/> that indicates the state of a resource after a given transition.
            </summary>
        </member>
        <member name="F:ComputeSharp.ResourceState.ReadOnly">
            <summary>
            A readonly resource, that can only be read from by the GPU and supports texture sampling.
            </summary>
        </member>
        <member name="F:ComputeSharp.ResourceState.ReadWrite">
            <summary>
            A read write resource, with both read and write access for the GPU, but without support for texture sampling.
            </summary>
        </member>
        <member name="T:ComputeSharp.IGraphicsResource">
            <summary>
            An interface representing a graphics resource associated to a given <see cref="P:ComputeSharp.IGraphicsResource.GraphicsDevice"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.IGraphicsResource.GraphicsDevice">
            <summary>
            Gets the <see cref="T:ComputeSharp.GraphicsDevice"/> instance associated with the current resource.
            </summary>
        </member>
        <member name="T:ComputeSharp.IReadOnlyNormalizedTexture1D`1">
            <summary>
            An interface representing a typed readonly 1D texture containing normalized pixel data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instances.
            </summary>
            <typeparam name="TPixel">The type of normalized pixels used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture1D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture1D`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyNormalizedTexture1D`1.Sample(System.Single)">
            <summary>
            Retrieves a single <typeparamref name="TPixel"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="u">The horizontal normalized offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadOnlyNormalizedTexture2D`1">
            <summary>
            An interface representing a typed readonly 2D texture containing normalized pixel data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instances.
            </summary>
            <typeparam name="TPixel">The type of normalized pixels used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture2D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture2D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture2D`1.Item(ComputeSharp.Int2)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current readonly texture.
            </summary>
            <param name="xy">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyNormalizedTexture2D`1.Sample(System.Single,System.Single)">
            <summary>
            Retrieves a single <typeparamref name="TPixel"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="u">The horizontal normalized offset of the value to get.</param>
            <param name="v">The vertical normalized offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyNormalizedTexture2D`1.Sample(ComputeSharp.Float2)">
            <summary>
            Retrieves a single <typeparamref name="TPixel"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="uv">The normalized coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadOnlyNormalizedTexture3D`1">
            <summary>
            An interface representing a typed readonly 3D texture containing normalized pixel data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instances.
            </summary>
            <typeparam name="TPixel">The type of normalized pixels used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Depth">
            <summary>
            Gets the depth of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <param name="z">The depthwise offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Item(ComputeSharp.Int3)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current readonly texture.
            </summary>
            <param name="xyz">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Sample(System.Single,System.Single,System.Single)">
            <summary>
            Retrieves a single <typeparamref name="TPixel"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="u">The horizontal normalized offset of the value to get.</param>
            <param name="v">The vertical normalized offset of the value to get.</param>
            <param name="w">The depthwise normalized offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyNormalizedTexture3D`1.Sample(ComputeSharp.Float3)">
            <summary>
            Retrieves a single <typeparamref name="TPixel"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="uvw">The normalized coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadOnlyTexture1D`1">
            <summary>
            An interface representing a typed readonly 1D texture containing raw data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instances.
            </summary>
            <typeparam name="T">The type of raw data used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture1D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture1D`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyTexture1D`1.Sample(System.Single)">
            <summary>
            Retrieves a single <typeparamref name="T"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="u">The horizontal normalized offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadOnlyTexture2D`1">
            <summary>
            An interface representing a typed readonly 2D texture containing raw data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instances.
            </summary>
            <typeparam name="T">The type of raw data used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture2D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture2D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture2D`1.Item(ComputeSharp.Int2)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="xy">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyTexture2D`1.Sample(System.Single,System.Single)">
            <summary>
            Retrieves a single <typeparamref name="T"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="u">The horizontal normalized offset of the value to get.</param>
            <param name="v">The vertical normalized offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyTexture2D`1.Sample(ComputeSharp.Float2)">
            <summary>
            Retrieves a single <typeparamref name="T"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="uv">The normalized coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadOnlyTexture3D`1">
            <summary>
            An interface representing a typed readonly 3D texture containing raw data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instances.
            </summary>
            <typeparam name="T">The type of raw data used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture3D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture3D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture3D`1.Depth">
            <summary>
            Gets the depth of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <param name="z">The depthwise offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.IReadOnlyTexture3D`1.Item(ComputeSharp.Int3)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="xyz">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyTexture3D`1.Sample(System.Single,System.Single,System.Single)">
            <summary>
            Retrieves a single <typeparamref name="T"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="u">The horizontal normalized offset of the value to get.</param>
            <param name="v">The vertical normalized offset of the value to get.</param>
            <param name="w">The depthwise normalized offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.IReadOnlyTexture3D`1.Sample(ComputeSharp.Float3)">
            <summary>
            Retrieves a single <typeparamref name="T"/> value from the current readonly texture with linear sampling.
            </summary>
            <param name="uvw">The normalized coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadWriteNormalizedTexture1D`1">
            <summary>
            An interface representing a typed writeable 1D texture containing normalized pixel data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instances.
            </summary>
            <typeparam name="TPixel">The type of normalized pixels used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture1D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture1D`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current writeable texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadWriteNormalizedTexture2D`1">
            <summary>
            An interface representing a typed writeable 2D texture containing normalized pixel data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instances.
            </summary>
            <typeparam name="TPixel">The type of normalized pixels used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture2D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture2D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current writeable texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture2D`1.Item(ComputeSharp.Int2)">
            <summary>
            Gets or sets a single <typeparamref name="TPixel"/> value from the current writeable texture.
            </summary>
            <param name="xy">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.IReadWriteNormalizedTexture3D`1">
            <summary>
            An interface representing a typed writeable 2D texture containing normalized pixel data stored on GPU memory.
            This interface can only be used to wrap <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instances.
            </summary>
            <typeparam name="TPixel">The type of normalized pixels used on the GPU side.</typeparam>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture3D`1.Width">
            <summary>
            Gets the width of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture3D`1.Height">
            <summary>
            Gets the height of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture3D`1.Depth">
            <summary>
            Gets the depth of the current texture.
            </summary>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current writeable texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <param name="z">The depthwise offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.IReadWriteNormalizedTexture3D`1.Item(ComputeSharp.Int3)">
            <summary>
            Gets a single <typeparamref name="TPixel"/> value from the current writeable texture.
            </summary>
            <param name="xyz">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="T:ComputeSharp.ReadBackBuffer`1">
            <summary>
            A <see langword="class"/> representing a typed buffer stored on CPU memory, that can be used to transfer back from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadBackBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadBackBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackBuffer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadBackTexture1D`1">
            <summary>
            A <see langword="class"/> representing a typed 1D texture stored on CPU memory, that can be used to transfer back from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture1D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadBackTexture1D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture1D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadBackTexture2D`1">
            <summary>
            A <see langword="class"/> representing a typed 2D texture stored on CPU memory, that can be used to transfer back from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadBackTexture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture2D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadBackTexture3D`1">
            <summary>
            A <see langword="class"/> representing a typed 3D texture stored on CPU memory, that can be used to transfer back from the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture3D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadBackTexture3D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.ReadBackTexture3D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyBuffer`1">
            <summary>
            A <see langword="class"/> representing a typed readonly buffer stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyBuffer`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly buffer.
            </summary>
            <param name="i">The index of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadOnlyBuffer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyTexture1D`2">
            <summary>
            A <see langword="class"/> representing a typed readonly 1D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture1D`2.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture1D`2"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture1D`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture1D`2.Sample(System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture1D`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyTexture1D`1">
            <summary>
            A <see langword="class"/> representing a typed readonly 1D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture1D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture1D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture1D`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture1D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyTexture2D`2">
            <summary>
            A <see langword="class"/> representing a typed readonly 2D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture2D`2.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture2D`2.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture2D`2.Item(ComputeSharp.Int2)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture2D`2.Sample(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture2D`2.Sample(ComputeSharp.Float2)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture2D`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyTexture2D`1">
            <summary>
            A <see langword="class"/> representing a typed readonly 2D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture2D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture2D`1.Item(ComputeSharp.Int2)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="xy">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture2D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyTexture3D`2">
            <summary>
            A <see langword="class"/> representing a typed readonly 3D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture3D`2.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture3D`2"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture3D`2.Item(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture3D`2.Item(ComputeSharp.Int3)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture3D`2.Sample(System.Single,System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture3D`2.Sample(ComputeSharp.Float3)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture3D`2.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadOnlyTexture3D`1">
            <summary>
            A <see langword="class"/> representing a typed readonly 3D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture3D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture3D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <param name="z">The depthwise offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.ReadOnlyTexture3D`1.Item(ComputeSharp.Int3)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current readonly texture.
            </summary>
            <param name="xyz">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadOnlyTexture3D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteBuffer`1">
            <summary>
            A <see langword="class"/> representing a typed read write buffer stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.ReadWriteBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteBuffer`1.Item(System.Int32)">
            <summary>
            Gets or sets a single <typeparamref name="T"/> value from the current writeable buffer.
            </summary>
            <param name="i">The index of the value to get or set.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadWriteBuffer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture1D`2">
            <summary>
            A <see langword="class"/> representing a typed read write 1D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`2.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture1D`2.readOnlyWrapper">
            <summary>
            The wrapping <see cref="T:ComputeSharp.ReadWriteTexture1D`2.ReadOnly"/> instance, if available.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.AsReadOnly">
            <inheritdoc cref="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly``2(ComputeSharp.ReadWriteTexture1D{``0,``1})"/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture1D`2.ReadOnly">
            <summary>
            A wrapper for a <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> resource that has been temporarily transitioned to readonly.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.owner">
            <summary>
            The owning <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance being wrapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.#ctor(ComputeSharp.ReadWriteTexture1D{`0,`1})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture1D`2.ReadOnly"/> instance with the specified parameters.
            </summary>
            <param name="owner">The owning <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.Sample(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.Width">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`2.ReadOnly.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture1D`1">
            <summary>
            A <see langword="class"/> representing a typed read write 1D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`1.Item(System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current writeable texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture1D`1.readOnlyWrapper">
            <summary>
            The wrapping <see cref="T:ComputeSharp.ReadWriteTexture1D`1.ReadOnly"/> instance, if available.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.AsReadOnly">
            <inheritdoc cref="M:ComputeSharp.ReadWriteTexture1DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture1D{System.Single})"/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture1D`1.ReadOnly">
            <summary>
            A wrapper for a <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> resource that has been temporarily transitioned to readonly.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.owner">
            <summary>
            The owning <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance being wrapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.#ctor(ComputeSharp.ReadWriteTexture1D{`0})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture1D`1.ReadOnly"/> instance with the specified parameters.
            </summary>
            <param name="owner">The owning <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.Item(System.Int32)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.Sample(System.Single)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.Width">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture1D`1.ReadOnly.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture2D`2">
            <summary>
            A <see langword="class"/> representing a typed read write 2D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.Item(ComputeSharp.Int2)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture2D`2.readOnlyWrapper">
            <summary>
            The wrapping <see cref="T:ComputeSharp.ReadWriteTexture2D`2.ReadOnly"/> instance, if available.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.AsReadOnly">
            <inheritdoc cref="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly``2(ComputeSharp.ReadWriteTexture2D{``0,``1})"/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture2D`2.ReadOnly">
            <summary>
            A wrapper for a <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> resource that has been temporarily transitioned to readonly.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.owner">
            <summary>
            The owning <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance being wrapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.#ctor(ComputeSharp.ReadWriteTexture2D{`0,`1})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture2D`2.ReadOnly"/> instance with the specified parameters.
            </summary>
            <param name="owner">The owning <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.Item(ComputeSharp.Int2)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.Sample(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.Sample(ComputeSharp.Float2)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.Width">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.Height">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`2.ReadOnly.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture2D`1">
            <summary>
            A <see langword="class"/> representing a typed read write 2D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current writeable texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.Item(ComputeSharp.Int2)">
            <summary>
            Gets or sets a single <typeparamref name="T"/> value from the current writeable texture.
            </summary>
            <param name="xy">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture2D`1.readOnlyWrapper">
            <summary>
            The wrapping <see cref="T:ComputeSharp.ReadWriteTexture2D`1.ReadOnly"/> instance, if available.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.AsReadOnly">
            <inheritdoc cref="M:ComputeSharp.ReadWriteTexture2DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture2D{System.Single})"/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture2D`1.ReadOnly">
            <summary>
            A wrapper for a <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> resource that has been temporarily transitioned to readonly.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.owner">
            <summary>
            The owning <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance being wrapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.#ctor(ComputeSharp.ReadWriteTexture2D{`0})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture2D`1.ReadOnly"/> instance with the specified parameters.
            </summary>
            <param name="owner">The owning <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.Item(System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.Item(ComputeSharp.Int2)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.Sample(System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.Sample(ComputeSharp.Float2)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.Width">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.Height">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture2D`1.ReadOnly.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture3D`2">
            <summary>
            A <see langword="class"/> representing a typed readonly 3D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture2D`2"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.Item(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.Item(ComputeSharp.Int3)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture3D`2.readOnlyWrapper">
            <summary>
            The wrapping <see cref="T:ComputeSharp.ReadWriteTexture3D`2.ReadOnly"/> instance, if available.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.AsReadOnly">
            <inheritdoc cref="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly``2(ComputeSharp.ReadWriteTexture3D{``0,``1})"/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture3D`2.ReadOnly">
            <summary>
            A wrapper for a <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> resource that has been temporarily transitioned to readonly.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.owner">
            <summary>
            The owning <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance being wrapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.#ctor(ComputeSharp.ReadWriteTexture3D{`0,`1})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture3D`2.ReadOnly"/> instance with the specified parameters.
            </summary>
            <param name="owner">The owning <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Item(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Item(ComputeSharp.Int3)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Sample(System.Single,System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Sample(ComputeSharp.Float3)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Width">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Height">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.Depth">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`2.ReadOnly.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture3D`1">
            <summary>
            A <see langword="class"/> representing a typed readonly 3D texture stored on GPU memory.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadOnlyTexture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current writeable texture.
            </summary>
            <param name="x">The horizontal offset of the value to get.</param>
            <param name="y">The vertical offset of the value to get.</param>
            <param name="z">The depthwise offset of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.Item(ComputeSharp.Int3)">
            <summary>
            Gets a single <typeparamref name="T"/> value from the current writeable texture.
            </summary>
            <param name="xyz">The coordinates of the value to get.</param>
            <remarks>This API can only be used from a compute shader, and will always throw if used anywhere else.</remarks>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture3D`1.readOnlyWrapper">
            <summary>
            The wrapping <see cref="T:ComputeSharp.ReadWriteTexture3D`1.ReadOnly"/> instance, if available.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.AsReadOnly">
            <inheritdoc cref="M:ComputeSharp.ReadWriteTexture3DExtensions.AsReadOnly(ComputeSharp.ReadWriteTexture3D{System.Single})"/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ReadWriteTexture3D`1.ReadOnly">
            <summary>
            A wrapper for a <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> resource that has been temporarily transitioned to readonly.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.owner">
            <summary>
            The owning <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance being wrapped.
            </summary>
        </member>
        <member name="F:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.d3D12ResourceDescriptorHandles">
            <summary>
            The <see cref="T:ComputeSharp.Graphics.Commands.Interop.ID3D12ResourceDescriptorHandles"/> instance for the current resource.
            </summary>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.#ctor(ComputeSharp.ReadWriteTexture3D{`0})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ReadWriteTexture3D`1.ReadOnly"/> instance with the specified parameters.
            </summary>
            <param name="owner">The owning <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Item(System.Int32,System.Int32,System.Int32)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Item(ComputeSharp.Int3)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Sample(System.Single,System.Single,System.Single)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Sample(ComputeSharp.Float3)">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Width">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Height">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.Depth">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.GraphicsDevice">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuDescriptorHandle(ComputeSharp.GraphicsDevice)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetGpuAndCpuDescriptorHandlesForClear(ComputeSharp.GraphicsDevice,System.Boolean@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12Resource(ComputeSharp.GraphicsDevice,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.ComputeSharp#__Internals#GraphicsResourceHelper#IGraphicsResource#ValidateAndGetID3D12ResourceAndTransitionStates(ComputeSharp.GraphicsDevice,ComputeSharp.ResourceState,TerraFX.Interop.DirectX.ID3D12Resource*@,ComputeSharp.Interop.ReferenceTracker.Lease@)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ReadWriteTexture3D`1.ReadOnly.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.UploadBuffer`1">
            <summary>
            A <see langword="class"/> representing a typed buffer stored on CPU memory, that can be used to transfer data to the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
        </member>
        <member name="M:ComputeSharp.UploadBuffer`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.UploadBuffer`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="length">The number of items to store in the current buffer.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.UploadBuffer`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.UploadTexture1D`1">
            <summary>
            A <see langword="class"/> representing a typed 1D texture stored on CPU memory, that can be used to transfer data to the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.UploadTexture1D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.UploadTexture1D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture1D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.UploadTexture2D`1">
            <summary>
            A <see langword="class"/> representing a typed 2D texture stored on CPU memory, that can be used to transfer data to the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.UploadTexture2D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.UploadTexture2D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture2D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.UploadTexture3D`1">
            <summary>
            A <see langword="class"/> representing a typed 3D texture stored on CPU memory, that can be used to transfer data to the GPU.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
        </member>
        <member name="M:ComputeSharp.UploadTexture3D`1.#ctor(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,ComputeSharp.AllocationMode)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.UploadTexture3D`1"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.</param>
            <param name="width">The width of the texture.</param>
            <param name="height">The height of the texture.</param>
            <param name="depth">The depth of the texture.</param>
            <param name="allocationMode">The allocation mode to use for the new resource.</param>
        </member>
        <member name="M:ComputeSharp.UploadTexture3D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.TextureView2D`1">
            <summary>
            The <see cref="T:ComputeSharp.TextureView2D`1"/> type represents a view over a 2D texture allocated on host memory, providing APIs to
            easily manipulate its contents without having to manually deal with the internal alignment requirements of textures.
            As such, one key difference with <see cref="T:System.Span`1"/> and arrays is that the underlying buffer for a <see cref="T:ComputeSharp.TextureView2D`1"/>
            instance might not be contiguous in memory. All this logic is handled internally by the <see cref="T:ComputeSharp.TextureView2D`1"/>
            type and it is transparent to the user, but note that working over discontiguous buffers has a performance impact.
            It is recommended to execute as much computation on the GPU side as possible.
            </summary>
            <typeparam name="T">The type of items in the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance.</typeparam>
        </member>
        <member name="F:ComputeSharp.TextureView2D`1.pointer">
            <summary>
            The pointer to the first element of the target 2D region.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView2D`1.width">
            <summary>
            The width of the specified 2D texture.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView2D`1.height">
            <summary>
            The height of the specified 2D region.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView2D`1.strideInBytes">
            <summary>
            The row pitch of the specified 2D region.
            </summary>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.#ctor(`0*,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.TextureView2D`1"/> struct with the specified parameters.
            </summary>
            <param name="pointer">The pointer to the start of the memory area to map.</param>
            <param name="width">The width of the 2D memory area to map.</param>
            <param name="height">The height of the 2D memory area to map.</param>
            <param name="pitchInBytes">The row pitch in bytes of the 2D memory area to map.</param>
        </member>
        <member name="P:ComputeSharp.TextureView2D`1.Empty">
            <summary>
            Gets an empty <see cref="T:ComputeSharp.TextureView2D`1"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView2D`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance is empty.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView2D`1.Length">
            <summary>
            Gets the total length of the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView2D`1.Width">
            <summary>
            Gets the width of the underlying 2D memory area.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView2D`1.Height">
            <summary>
            Gets the height of the underlying 2D memory area.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView2D`1.Item(System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified zero-based indices.
            </summary>
            <param name="x">The target column to get the element from.</param>
            <param name="y">The target row to get the element from.</param>
            <returns>A reference to the element at the specified indices.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when either <paramref name="x"/> or <paramref name="y"/> are invalid.
            </exception>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.Clear">
            <summary>
            Clears the contents of the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.CopyTo(System.Span{`0})">
            <summary>
            Copies the contents of this <see cref="T:ComputeSharp.TextureView2D`1"/> into a destination <see cref="T:System.Span`1"/> instance.
            </summary>
            <param name="destination">The destination <see cref="T:System.Span`1"/> instance.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="destination" /> is shorter than the source <see cref="T:ComputeSharp.TextureView2D`1"/> instance.
            </exception>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.CopyTo(ComputeSharp.TextureView2D{`0})">
            <summary>
            Copies the contents of this <see cref="T:ComputeSharp.TextureView2D`1"/> into a destination <see cref="T:ComputeSharp.TextureView2D`1"/> instance.
            For this API to succeed, the target <see cref="T:ComputeSharp.TextureView2D`1"/> has to have the same shape as the current one.
            </summary>
            <param name="destination">The destination <see cref="T:ComputeSharp.TextureView2D`1"/> instance.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="destination"/> doesn't match the size of the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance.</exception>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.TryCopyTo(System.Span{`0})">
            <summary>
            Attempts to copy the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance to a destination <see cref="T:System.Span`1"/>.
            </summary>
            <param name="destination">The target <see cref="T:System.Span`1"/> of the copy operation.</param>
            <returns>Whether or not the operation was successful.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.TryCopyTo(ComputeSharp.TextureView2D{`0})">
            <summary>
            Attempts to copy the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance to a destination <see cref="T:ComputeSharp.TextureView2D`1"/>.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.TextureView2D`1"/> of the copy operation.</param>
            <returns>Whether or not the operation was successful.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.Fill(`0)">
            <summary>
            Fills the elements of this span with a specified value.
            </summary>
            <param name="value">The value to assign to each element of the <see cref="T:ComputeSharp.TextureView2D`1"/> instance.</param>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.DangerousGetAddressAndByteStride(System.Int32@)">
            <summary>
            Returns a reference to the first element within the current instance, with no bounds check.
            </summary>
            <returns>A reference to the first element within the current instance.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.GetRowSpan(System.Int32)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for a specified row.
            </summary>
            <param name="y">The index of the target row to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="y"/> is out of range.</exception>
            <returns>The resulting row <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.TryGetSpan(System.Span{`0}@)">
            <summary>
            Tries to get a <see cref="T:System.Span`1"/> instance, if the underlying buffer is contiguous and small enough.
            </summary>
            <param name="span">The resulting <see cref="T:System.Span`1"/>, in case of success.</param>
            <returns>Whether or not <paramref name="span"/> was correctly assigned.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.ToArray">
            <summary>
            Copies the contents of the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance into a new 2D array.
            </summary>
            <returns>A 2D array containing the data in the current <see cref="T:ComputeSharp.TextureView2D`1"/> instance.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Span`1.Equals(System.Object)"/>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.GetHashCode">
            <inheritdoc cref="M:System.Span`1.GetHashCode"/>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.op_Equality(ComputeSharp.TextureView2D{`0},ComputeSharp.TextureView2D{`0})">
            <summary>
            Checks whether two <see cref="T:ComputeSharp.TextureView2D`1"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:ComputeSharp.TextureView2D`1"/> instance to compare.</param>
            <param name="right">The second <see cref="T:ComputeSharp.TextureView2D`1"/> instance to compare.</param>
            <returns>Whether or not <paramref name="left"/> and <paramref name="right"/> are equal.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView2D`1.op_Inequality(ComputeSharp.TextureView2D{`0},ComputeSharp.TextureView2D{`0})">
            <summary>
            Checks whether two <see cref="T:ComputeSharp.TextureView2D`1"/> instances are not equal.
            </summary>
            <param name="left">The first <see cref="T:ComputeSharp.TextureView2D`1"/> instance to compare.</param>
            <param name="right">The second <see cref="T:ComputeSharp.TextureView2D`1"/> instance to compare.</param>
            <returns>Whether or not <paramref name="left"/> and <paramref name="right"/> are not equal.</returns>
        </member>
        <member name="T:ComputeSharp.TextureView3D`1">
            <summary>
            The <see cref="T:ComputeSharp.TextureView3D`1"/> mirrors the <see cref="T:ComputeSharp.TextureView3D`1"/> type but representing a memory
            area spanning 3 dimensions. The underlying buffer can be discontiguous across both the height and the depth.
            It is recommended to execute as much computation on the GPU side as possible.
            </summary>
            <typeparam name="T">The type of items in the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance.</typeparam>
        </member>
        <member name="F:ComputeSharp.TextureView3D`1.pointer">
            <summary>
            The pointer to the first element of the target 3D region.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView3D`1.width">
            <summary>
            The width of the specified 3D texture.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView3D`1.height">
            <summary>
            The height of the specified 3D region.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView3D`1.depth">
            <summary>
            The depth of the specified 3D region.
            </summary>
        </member>
        <member name="F:ComputeSharp.TextureView3D`1.strideInBytes">
            <summary>
            The stride of the specified 3D region.
            </summary>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.#ctor(`0*,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:ComputeSharp.TextureView3D`1"/> struct with the specified parameters.
            </summary>
            <param name="pointer">The pointer to the start of the memory area to map.</param>
            <param name="width">The width of the 3D memory area to map.</param>
            <param name="height">The height of the 3D memory area to map.</param>
            <param name="depth">The depth of the 3D memory area to map.</param>
            <param name="strideInBytes">The stride in bytes of the 3D memory area to map.</param>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.Empty">
            <summary>
            Gets an empty <see cref="T:ComputeSharp.TextureView3D`1"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.IsEmpty">
            <summary>
            Gets a value indicating whether the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance is empty.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.Length">
            <summary>
            Gets the total length of the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.Width">
            <summary>
            Gets the width of the underlying 3D memory area.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.Height">
            <summary>
            Gets the height of the underlying 3D memory area.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.Depth">
            <summary>
            Gets the depth of the underlying 3D memory area.
            </summary>
        </member>
        <member name="P:ComputeSharp.TextureView3D`1.Item(System.Int32,System.Int32,System.Int32)">
            <summary>
            Gets the element at the specified zero-based indices.
            </summary>
            <param name="x">The target column to get the element from.</param>
            <param name="y">The target row to get the element from.</param>
            <param name="z">The target depth to get the element from.</param>
            <returns>A reference to the element at the specified indices.</returns>
            <exception cref="T:System.IndexOutOfRangeException">
            Thrown when either <paramref name="x"/>, <paramref name="y"/> or <paramref name="y"/> are invalid.
            </exception>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.Clear">
            <summary>
            Clears the contents of the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.CopyTo(System.Span{`0})">
            <summary>
            Copies the contents of this <see cref="T:ComputeSharp.TextureView3D`1"/> into a destination <see cref="T:System.Span`1"/> instance.
            </summary>
            <param name="destination">The destination <see cref="T:System.Span`1"/> instance.</param>
            <exception cref="T:System.ArgumentException">
            Thrown when <paramref name="destination" /> is shorter than the source <see cref="T:ComputeSharp.TextureView3D`1"/> instance.
            </exception>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.CopyTo(ComputeSharp.TextureView3D{`0})">
            <summary>
            Copies the contents of this <see cref="T:ComputeSharp.TextureView3D`1"/> into a destination <see cref="T:ComputeSharp.TextureView3D`1"/> instance.
            For this API to succeed, the target <see cref="T:ComputeSharp.TextureView3D`1"/> has to have the same shape as the current one.
            </summary>
            <param name="destination">The destination <see cref="T:ComputeSharp.TextureView3D`1"/> instance.</param>
            <exception cref="T:System.ArgumentException">Thrown when <paramref name="destination"/> doesn't match the size of the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance.</exception>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.TryCopyTo(System.Span{`0})">
            <summary>
            Attempts to copy the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance to a destination <see cref="T:System.Span`1"/>.
            </summary>
            <param name="destination">The target <see cref="T:System.Span`1"/> of the copy operation.</param>
            <returns>Whether or not the operation was successful.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.TryCopyTo(ComputeSharp.TextureView3D{`0})">
            <summary>
            Attempts to copy the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance to a destination <see cref="T:ComputeSharp.TextureView3D`1"/>.
            </summary>
            <param name="destination">The target <see cref="T:ComputeSharp.TextureView3D`1"/> of the copy operation.</param>
            <returns>Whether or not the operation was successful.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.Fill(`0)">
            <summary>
            Fills the elements of this span with a specified value.
            </summary>
            <param name="value">The value to assign to each element of the <see cref="T:ComputeSharp.TextureView3D`1"/> instance.</param>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.DangerousGetAddressAndByteStride(System.Int32@)">
            <summary>
            Returns a reference to the first element within the current instance, with no bounds check.
            </summary>
            <returns>A reference to the first element within the current instance.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.GetRowSpan(System.Int32,System.Int32)">
            <summary>
            Gets a <see cref="T:System.Span`1"/> for a specified row.
            </summary>
            <param name="y">The index of the target row to retrieve.</param>
            <param name="z">The depth of the row to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when either <paramref name="y"/> or <paramref name="z"/> are out of range.</exception>
            <returns>The resulting row <see cref="T:System.Span`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.GetDepthView(System.Int32)">
            <summary>
            Gets a <see cref="T:ComputeSharp.TextureView2D`1"/> for a depth layer.
            </summary>
            <param name="z">The depth of the layer to retrieve.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when <paramref name="z"/> is out of range.</exception>
            <returns>The resulting row <see cref="T:ComputeSharp.TextureView2D`1"/>.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.TryGetSpan(System.Span{`0}@)">
            <summary>
            Tries to get a <see cref="T:System.Span`1"/> instance, if the underlying buffer is contiguous and small enough.
            </summary>
            <param name="span">The resulting <see cref="T:System.Span`1"/>, in case of success.</param>
            <returns>Whether or not <paramref name="span"/> was correctly assigned.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.ToArray">
            <summary>
            Copies the contents of the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance into a new 3D array.
            </summary>
            <returns>A 3D array containing the data in the current <see cref="T:ComputeSharp.TextureView3D`1"/> instance.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.Equals(System.Object)">
            <inheritdoc cref="M:System.Span`1.Equals(System.Object)"/>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.GetHashCode">
            <inheritdoc cref="M:System.Span`1.GetHashCode"/>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.ToString">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.op_Equality(ComputeSharp.TextureView3D{`0},ComputeSharp.TextureView3D{`0})">
            <summary>
            Checks whether two <see cref="T:ComputeSharp.TextureView3D`1"/> instances are equal.
            </summary>
            <param name="left">The first <see cref="T:ComputeSharp.TextureView3D`1"/> instance to compare.</param>
            <param name="right">The second <see cref="T:ComputeSharp.TextureView3D`1"/> instance to compare.</param>
            <returns>Whether or not <paramref name="left"/> and <paramref name="right"/> are equal.</returns>
        </member>
        <member name="M:ComputeSharp.TextureView3D`1.op_Inequality(ComputeSharp.TextureView3D{`0},ComputeSharp.TextureView3D{`0})">
            <summary>
            Checks whether two <see cref="T:ComputeSharp.TextureView3D`1"/> instances are not equal.
            </summary>
            <param name="left">The first <see cref="T:ComputeSharp.TextureView3D`1"/> instance to compare.</param>
            <param name="right">The second <see cref="T:ComputeSharp.TextureView3D`1"/> instance to compare.</param>
            <returns>Whether or not <paramref name="left"/> and <paramref name="right"/> are not equal.</returns>
        </member>
        <member name="T:ComputeSharp.ComputeContext">
            <summary>
            A context to batch compute operations in a single invocation, minimizing GPU overhead.
            </summary>
            <remarks>
            <para>
            This type must always be used in a <see langword="using"/> statement and disposed properly.
            Not doing so is undefined behavior and may result in the target device not being disposed correctly.
            </para>
            <para>
            For more documentation on this, see the remarks in <see cref="M:ComputeSharp.GraphicsDeviceExtensions.CreateComputeContext(ComputeSharp.GraphicsDevice)"/>.
            </para>
            </remarks>
        </member>
        <member name="F:ComputeSharp.ComputeContext.device">
            <summary>
            The <see cref="P:ComputeSharp.ComputeContext.GraphicsDevice"/> instance owning the current context.
            </summary>
        </member>
        <member name="F:ComputeSharp.ComputeContext.commandList">
            <summary>
            The current <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance used to dispatch shaders.
            </summary>
        </member>
        <member name="M:ComputeSharp.ComputeContext.#ctor(ComputeSharp.GraphicsDevice)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.ComputeContext"/> instance with the specified parameters.
            </summary>
            <param name="device">The <see cref="P:ComputeSharp.ComputeContext.GraphicsDevice"/> instance owning the current context.</param>
        </member>
        <member name="P:ComputeSharp.ComputeContext.GraphicsDevice">
            <summary>
            Gets the <see cref="T:ComputeSharp.GraphicsDevice"/> associated with the current instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Barrier(TerraFX.Interop.DirectX.ID3D12Resource*)">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Clear(TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE,System.Boolean)">
            <summary>
            Clears a specific resource.
            </summary>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to clear.</param>
            <param name="d3D12GpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="isNormalized">Indicates whether the target resource uses a normalized format.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Fill(TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE,TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE,ComputeSharp.Float4)">
            <summary>
            Fills a specific resource.
            </summary>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to fill.</param>
            <param name="d3D12GpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_GPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="d3D12CpuDescriptorHandle">The <see cref="T:TerraFX.Interop.DirectX.D3D12_CPU_DESCRIPTOR_HANDLE"/> value for the target resource.</param>
            <param name="value">The value to use to fill the resource.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Run``1(System.Int32,``0@)">
            <summary>
            Runs the input shader with the specified parameters.
            </summary>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Run``1(System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader with the specified parameters.
            </summary>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Run``1(System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader with the specified parameters.
            </summary>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Run``1(System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Run``2(ComputeSharp.IReadWriteNormalizedTexture2D{``1},``0@)">
            <summary>
            Runs the input shader with the specified parameters.
            </summary>
            <typeparam name="T">The type of pixel shader to run.</typeparam>
            <typeparam name="TPixel">The type of pixel to work on.</typeparam>
            <param name="texture">The target texture to invoke the pixel shader upon.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the pixel shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Transition(TerraFX.Interop.DirectX.ID3D12Resource*,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES,TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES)">
            <summary>
            Inserts a transition for a specific resource.
            </summary>
            <param name="d3D12Resource">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Resource"/> to change state for.</param>
            <param name="d3D12ResourceStatesBefore">The starting <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the transition.</param>
            <param name="d3D12ResourceStatesAfter">The destnation <see cref="T:TerraFX.Interop.DirectX.D3D12_RESOURCE_STATES"/> value for the transition.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContext.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ComputeContext.DisposeAsync">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.ComputeContext.GetCommandList">
            <summary>
            Gets the current <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance.
            </summary>
            <returns>A reference to the <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance to use.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> has not been initialized yet.</exception>
        </member>
        <member name="M:ComputeSharp.ComputeContext.GetCommandList(TerraFX.Interop.DirectX.ID3D12PipelineState*)">
            <summary>
            Gets the current <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance, and initializes it as needed.
            </summary>
            <param name="pipelineState">The input <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> to load.</param>
            <returns>A reference to the <see cref="T:ComputeSharp.Graphics.Commands.CommandList"/> instance to use.</returns>
        </member>
        <member name="T:ComputeSharp.Shaders.Dispatching.ComputeShaderDispatchDataLoader">
            <summary>
            A data loader for compute shaders.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Dispatching.ComputeShaderDispatchDataLoader.d3D12GraphicsCommandList">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object in use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ComputeShaderDispatchDataLoader.#ctor(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Dispatching.ComputeShaderDispatchDataLoader"/> instance.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object to use.</param>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ComputeShaderDispatchDataLoader.LoadCapturedValues(System.ReadOnlySpan{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ComputeShaderDispatchDataLoader.LoadCapturedResources(System.ReadOnlySpan{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Dispatching.PixelShaderDispatchDataLoader">
            <summary>
            A data loader for pixel shaders.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Dispatching.PixelShaderDispatchDataLoader.d3D12GraphicsCommandList">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object in use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.PixelShaderDispatchDataLoader.#ctor(TerraFX.Interop.DirectX.ID3D12GraphicsCommandList*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Dispatching.PixelShaderDispatchDataLoader"/> instance.
            </summary>
            <param name="d3D12GraphicsCommandList">The <see cref="T:TerraFX.Interop.DirectX.ID3D12GraphicsCommandList"/> object to use.</param>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.PixelShaderDispatchDataLoader.LoadCapturedValues(System.ReadOnlySpan{System.UInt32})">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.PixelShaderDispatchDataLoader.LoadCapturedResources(System.ReadOnlySpan{System.UInt64})">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Dispatching.ShaderBytecodeLoader">
            <summary>
            A bytecode loader for compute shaders.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Dispatching.ShaderBytecodeLoader.cachedShader">
            <summary>
            The current cached shader instance.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ShaderBytecodeLoader.GetCachedShader">
            <summary>
            Gets the current cached shader instance.
            </summary>
            <returns>The current <see cref="T:ComputeSharp.Shaders.Models.ICachedShader"/> instance.</returns>
            <exception cref="T:System.InvalidOperationException">Thrown if the shader has not been initialized.</exception>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ShaderBytecodeLoader.LoadDynamicBytecode(System.IntPtr)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ShaderBytecodeLoader.LoadEmbeddedBytecode(System.ReadOnlySpan{System.Byte})">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Dispatching.ShaderDispatchMetadataLoader">
            <summary>
            A data loader for compute shaders.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Dispatching.ShaderDispatchMetadataLoader.d3D12Device">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object in use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ShaderDispatchMetadataLoader.#ctor(TerraFX.Interop.DirectX.ID3D12Device*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Dispatching.ShaderDispatchMetadataLoader"/> instance.
            </summary>
            <param name="d3D12Device">The <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> object to use.</param>
        </member>
        <member name="M:ComputeSharp.Shaders.Dispatching.ShaderDispatchMetadataLoader.LoadMetadataHandle(System.ReadOnlySpan{System.Byte},System.ReadOnlySpan{ComputeSharp.__Internals.ResourceDescriptor},System.IntPtr@)">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Extensions.ID3D12DeviceExtensions">
            <summary>
            A <see langword="class"/> with extensions for the <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> type.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Extensions.ID3D12DeviceExtensions.CreateRootSignature(TerraFX.Interop.DirectX.ID3D12Device@,System.Int32,System.ReadOnlySpan{TerraFX.Interop.DirectX.D3D12_DESCRIPTOR_RANGE1},System.Boolean)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12RootSignature"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the root signature.</param>
            <param name="d3D12Root32BitConstantsCount">The number of 32 bit root constants to load.</param>
            <param name="d3D12DescriptorRanges1">The input descriptor ranges for the signature to create.</param>
            <param name="isStaticSamplerUsed">Indicates whether or not a static sampler is used.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12RootSignature"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the root signature fails.</exception>
        </member>
        <member name="M:ComputeSharp.Shaders.Extensions.ID3D12DeviceExtensions.CreateComputePipelineState(TerraFX.Interop.DirectX.ID3D12Device@,TerraFX.Interop.DirectX.ID3D12RootSignature*,TerraFX.Interop.DirectX.D3D12_SHADER_BYTECODE)">
            <summary>
            Creates a new <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> for a given device.
            </summary>
            <param name="d3D12Device">The target <see cref="T:TerraFX.Interop.DirectX.ID3D12Device"/> to use to create the pipeline state.</param>
            <param name="d3D12RootSignature">The input root signature to use to create the pipeline state.</param>
            <param name="d3D12ShaderBytecode">The shader bytecode to use for the pipeline state.</param>
            <returns>A pointer to the newly allocated <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance.</returns>
            <exception cref="T:System.Exception">Thrown when the creation of the pipeline state fails.</exception>
        </member>
        <member name="T:ComputeSharp.Shaders.Loading.PipelineDataLoader`1">
            <summary>
            A <see langword="class"/> responsible for performing all the necessary operations to compile and load shader data.
            </summary>
            <typeparam name="T">The type of compute shader to load.</typeparam>
        </member>
        <member name="F:ComputeSharp.Shaders.Loading.PipelineDataLoader`1.ShadersCache">
            <summary>
            The mapping used to cache and reuse compiled shaders.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Loading.PipelineDataLoader`1.GetPipelineData(ComputeSharp.GraphicsDevice,System.Int32,System.Int32,System.Int32,`0@)">
            <summary>
            Gets the <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instance for a given shader.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
            <returns>The <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instance for a given shader.</returns>
        </member>
        <member name="M:ComputeSharp.Shaders.Loading.PipelineDataLoader`1.LoadShader(System.Int32,System.Int32,System.Int32,`0@,ComputeSharp.Shaders.Models.ICachedShader@)">
            <summary>
            Loads a shader with the specified parameters.
            </summary>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
            <param name="shaderData">The <see cref="T:ComputeSharp.Shaders.Models.ICachedShader"/> instance to return with the cached shader data.</param>
        </member>
        <member name="M:ComputeSharp.Shaders.Loading.PipelineDataLoader`1.CreatePipelineData(ComputeSharp.GraphicsDevice,ComputeSharp.Shaders.Models.ICachedShader,ComputeSharp.Shaders.Models.PipelineData@)">
            <summary>
            Creates and caches a <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instance for a given shader.
            </summary>
            <param name="device">The <see cref="T:ComputeSharp.GraphicsDevice"/> to use to run the shader.</param>
            <param name="shaderData">The <see cref="T:ComputeSharp.Shaders.Models.ICachedShader"/> instance with the data on the loaded shader.</param>
            <param name="pipelineData">The resulting <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instance to use to run the shader.</param>
        </member>
        <member name="T:ComputeSharp.Shaders.Models.ICachedShader">
            <summary>
            An interface that contains info on a cached shader.
            </summary>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.ICachedShader.CachedPipelines">
            <summary>
            Gets the map of cached <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instances for each GPU in use.
            </summary>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.ICachedShader.D3D12ShaderBytecode">
            <summary>
            Gets a <see cref="T:TerraFX.Interop.DirectX.D3D12_SHADER_BYTECODE"/> value pointing shader bytecode to use.
            </summary>
        </member>
        <member name="T:ComputeSharp.Shaders.Models.ICachedShader.Embedded">
            <summary>
            An <see cref="T:ComputeSharp.Shaders.Models.ICachedShader"/> implementation for an embedded shader.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ICachedShader.Embedded.precompiledBytecodeBuffer">
            <summary>
            The bytecode buffer, if a precompiled shader is used.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ICachedShader.Embedded.precompiledBytecodeSize">
            <summary>
            The buffer size for <see cref="F:ComputeSharp.Shaders.Models.ICachedShader.Embedded.precompiledBytecodeBuffer"/>, if present.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ICachedShader.Embedded.#ctor(System.ReadOnlySpan{System.Byte})">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Models.ICachedShader.Embedded"/> instance with the specified parameters.
            </summary>
            <param name="precompiledBytecode">The shader bytecode buffer to wrap.</param>
            <remarks>
            It is assumed that <paramref name="precompiledBytecode"/> is a static binary block in the <c>.text</c> segment of the
            PE file, which is what Roslyn generates when directly assigning a new array to a <see cref="T:System.ReadOnlySpan`1"/>. As such,
            the underlying buffer is assumed to be pinned, and it will not be properly tracked for GC compactions. If an invalid
            buffer is passed and its contents are moved, the behavior is undefined (access violations will most definitely occurr).
            </remarks>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.ICachedShader.Embedded.CachedPipelines">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.ICachedShader.Embedded.D3D12ShaderBytecode">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Models.ICachedShader.Dynamic">
            <summary>
            An <see cref="T:ComputeSharp.Shaders.Models.ICachedShader"/> implementation for a dynamically compiled shader.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ICachedShader.Dynamic.dxcBlobBytecode">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.IDxcBlob"/> instance currently in use.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ICachedShader.Dynamic.#ctor(TerraFX.Interop.DirectX.IDxcBlob*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Models.ICachedShader.Dynamic"/> instance with the specified parameters.
            </summary>
            <param name="dxcBlobBytecode">The <see cref="T:TerraFX.Interop.DirectX.IDxcBlob"/> bytecode instance to wrap.</param>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.ICachedShader.Dynamic.CachedPipelines">
            <inheritdoc/>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.ICachedShader.Dynamic.D3D12ShaderBytecode">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ICachedShader.Dynamic.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Models.PipelineData">
            <summary>
            A <see langword="class"/> representing a custom pipeline state for a compute operation.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.PipelineData.d3D12RootSignature">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12RootSignature"/> instance for the current <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> object.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.PipelineData.d3D12PipelineState">
            <summary>
            The <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance for the current <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> object.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.PipelineData.#ctor(TerraFX.Interop.DirectX.ID3D12RootSignature*,TerraFX.Interop.DirectX.ID3D12PipelineState*)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> instance with the specified parameters.
            </summary>
            <param name="d3D12RootSignature">The <see cref="T:TerraFX.Interop.DirectX.ID3D12RootSignature"/> value for the current shader.</param>
            <param name="d3D12PipelineState">The compiled pipeline state to reuse for the current shader.</param>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.PipelineData.D3D12RootSignature">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12RootSignature"/> instance for the current <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> object.
            </summary>
        </member>
        <member name="P:ComputeSharp.Shaders.Models.PipelineData.D3D12PipelineState">
            <summary>
            Gets the <see cref="T:TerraFX.Interop.DirectX.ID3D12PipelineState"/> instance for the current <see cref="T:ComputeSharp.Shaders.Models.PipelineData"/> object.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.PipelineData.DangerousOnDispose">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.Shaders.Models.ShaderKey">
            <summary>
            A <see langword="struct"/> representing a key for a given shader.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ShaderKey.id">
            <summary>
            The hashcode of the current shader type.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ShaderKey.threadsX">
            <summary>
            The number of iterations to run on the X axis.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ShaderKey.threadsY">
            <summary>
            The number of iterations to run on the Y axis.
            </summary>
        </member>
        <member name="F:ComputeSharp.Shaders.Models.ShaderKey.threadsZ">
            <summary>
            The number of iterations to run on the Z axis.
            </summary>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ShaderKey.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new <see cref="T:ComputeSharp.Shaders.Models.ShaderKey"/> instance with the specified parameters.
            </summary>
            <param name="id">The hashcode of the current shader type.</param>
            <param name="threadsX">The number of iterations to run on the X axis.</param>
            <param name="threadsY">The number of iterations to run on the Y axis.</param>
            <param name="threadsZ">The number of iterations to run on the Z axis.</param>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ShaderKey.Equals(ComputeSharp.Shaders.Models.ShaderKey)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ShaderKey.Equals(System.Object)">
            <inheritdoc/>
        </member>
        <member name="M:ComputeSharp.Shaders.Models.ShaderKey.GetHashCode">
            <inheritdoc/>
        </member>
        <member name="T:ComputeSharp.ComputeContextExtensions">
            <summary>
            A <see langword="class"/> that contains extension methods for the <see cref="T:ComputeSharp.ComputeContext"/> type, used to run compute shaders.
            </summary>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteBuffer{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="buffer">The input <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0,``1})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0,``1})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0,``1})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture1D{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture1D`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture2D`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Barrier``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture3D{``0})">
            <summary>
            Inserts a resource barrier for a specific resource.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to insert the resource barrier.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture3D`1"/> instance to insert the barrier for.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteBuffer{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the buffer.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="buffer">The input <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteBuffer`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0,``1})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0,``1})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0,``1})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture1D{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture1D`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture2D`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Clear``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture3D{``0})">
            <summary>
            Clears a specific resource.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to clear the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture3D`1"/> instance to clear.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Fill``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0,``1},``0)">
            <summary>
            Fills a specific texture with a given value.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to fill the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance to fill.</param>
            <param name="value">The value to use to fill <paramref name="texture"/>.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Fill``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0,``1},``0)">
            <summary>
            Fills a specific texture with a given value.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to fill the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance to fill.</param>
            <param name="value">The value to use to fill <paramref name="texture"/>.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Fill``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0,``1},``0)">
            <summary>
            Fills a specific texture with a given value.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to fill the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance to fill.</param>
            <param name="value">The value to use to fill <paramref name="texture"/>.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Fill``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture1D{``0},``0)">
            <summary>
            Fills a specific texture with a given value.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to fill the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture1D`1"/> instance to fill.</param>
            <param name="value">The value to use to fill <paramref name="texture"/>.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Fill``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``0},``0)">
            <summary>
            Fills a specific texture with a given value.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to fill the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture2D`1"/> instance to fill.</param>
            <param name="value">The value to use to fill <paramref name="texture"/>.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Fill``1(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture3D{``0},``0)">
            <summary>
            Fills a specific texture with a given value.
            </summary>
            <typeparam name="TPixel">The type of pixels stored on the texture.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to fill the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.IReadWriteNormalizedTexture3D`1"/> instance to fill.</param>
            <param name="value">The value to use to fill <paramref name="texture"/>.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.ComputeContext"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.ComputeContext"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.ComputeContext"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.For``1(ComputeSharp.ComputeContext@,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.ComputeContext"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of compute shader to run.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to run the shader.</param>
            <param name="x">The number of iterations to run on the X axis.</param>
            <param name="y">The number of iterations to run on the Y axis.</param>
            <param name="z">The number of iterations to run on the Z axis.</param>
            <param name="threadsX">The number of threads in each thread group for the X axis.</param>
            <param name="threadsY">The number of threads in each thread group for the Y axis.</param>
            <param name="threadsZ">The number of threads in each thread group for the Z axis.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the compute shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.ForEach``2(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``1})">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.ComputeContext"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of pixel shader to run.</typeparam>
            <typeparam name="TPixel">The type of pixels being processed by the shader.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to run the shader.</param>
            <param name="texture">The target texture to apply the pixel shader to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.ForEach``2(ComputeSharp.ComputeContext@,ComputeSharp.IReadWriteNormalizedTexture2D{``1},``0@)">
            <summary>
            Runs the input shader on a target <see cref="T:ComputeSharp.ComputeContext"/> instance, with the specified parameters.
            </summary>
            <typeparam name="T">The type of pixel shader to run.</typeparam>
            <typeparam name="TPixel">The type of pixels being processed by the shader.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to run the shader.</param>
            <param name="texture">The target texture to apply the pixel shader to.</param>
            <param name="shader">The input <typeparamref name="T"/> instance representing the pixel shader to run.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{System.Single},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float2},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float3},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{ComputeSharp.Float4},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture1D{``0,``1},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture1D`2"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{System.Single},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float2},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float3},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{ComputeSharp.Float4},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture2D{``0,``1},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture2D`2"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{System.Single},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float2},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float3},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{ComputeSharp.Float4},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`1"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="M:ComputeSharp.ComputeContextExtensions.Transition``2(ComputeSharp.ComputeContext@,ComputeSharp.ReadWriteTexture3D{``0,``1},ComputeSharp.ResourceState)">
            <summary>
            Transitions the state of a specific resource.
            </summary>
            <typeparam name="T">The type of items stored on the texture.</typeparam>
            <typeparam name="TPixel">The type of pixels used on the GPU side.</typeparam>
            <param name="context">The <see cref="T:ComputeSharp.ComputeContext"/> to use to transition the resource.</param>
            <param name="texture">The input <see cref="T:ComputeSharp.ReadWriteTexture3D`2"/> instance to transition.</param>
            <param name="resourceState">The state to transition the input resource to.</param>
        </member>
        <member name="T:Configuration">
            <summary>
            A container for all shared <see cref="T:System.AppContext"/> configuration switches for ComputeSharp.
            </summary>
            <remarks>
            <para>
            This type uses a very specific setup for configuration switches to ensure ILLink can work the best.
            This mirrors the architecture of feature switches in the runtime as well, and it's needed so that
            no static constructor is generated for the type.
            </para>
            <para>
            For more info, see <see href="https://github.com/dotnet/runtime/blob/main/docs/workflow/trimming/feature-switches.md#adding-new-feature-switch"/>.
            </para>
            </remarks>
        </member>
        <member name="F:Configuration.IsDebugOutputEnabledPropertyName">
            <summary>
            The configuration property name for <see cref="P:Configuration.IsDebugOutputEnabled"/>.
            </summary>
        </member>
        <member name="F:Configuration.IsDeviceRemovedExtendedDataEnabledPropertyName">
            <summary>
            The configuration property name for <see cref="P:Configuration.IsDeviceRemovedExtendedDataEnabled"/>.
            </summary>
        </member>
        <member name="F:Configuration.IsGpuTimeoutEnabledPropertyName">
            <summary>
            The configuration property name for <see cref="P:Configuration.IsGpuTimeoutEnabled"/>.
            </summary>
        </member>
        <member name="F:Configuration.isDebugOutputEnabledConfigurationValue">
            <summary>
            The backing field for <see cref="P:Configuration.IsDebugOutputEnabled"/>.
            </summary>
        </member>
        <member name="F:Configuration.isDeviceRemovedExtendedDataEnabledConfigurationValue">
            <summary>
            The backing field for <see cref="P:Configuration.IsDeviceRemovedExtendedDataEnabled"/>.
            </summary>
        </member>
        <member name="F:Configuration.isGpuTimeoutEnabledConfigurationValue">
            <summary>
            The backing field for <see cref="P:Configuration.IsGpuTimeoutEnabled"/>.
            </summary>
        </member>
        <member name="P:Configuration.IsDebugOutputEnabled">
            <summary>
            Gets a value indicating whether or not the debug output is enabled (defaults to <see langword="false"/>).
            </summary>
        </member>
        <member name="P:Configuration.IsDeviceRemovedExtendedDataEnabled">
            <summary>
            Gets a value indicating whether or not the debug output is enabled (defaults to <see langword="false"/>).
            </summary>
        </member>
        <member name="P:Configuration.IsGpuTimeoutEnabled">
            <summary>
            Gets a value indicating whether or not the GPU timeout is enabled (defaults to <see langword="true"/>).
            </summary>
        </member>
        <member name="M:Configuration.GetConfigurationValue(System.String,System.Int32@)">
            <summary>
            Gets a configuration value for a specified property.
            </summary>
            <param name="propertyName">The property name to retrieve the value for.</param>
            <param name="cachedResult">The cached result for the target configuration value.</param>
            <returns>The value of the specified configuration setting.</returns>
        </member>
        <member name="M:Configuration.GetDefaultConfigurationValue(System.String)">
            <summary>
            Gets the default configuration value for a given feature switch.
            </summary>
            <param name="propertyName">The property name to retrieve the value for.</param>
            <returns>The default value for the target <paramref name="propertyName"/>.</returns>
        </member>
        <member name="T:TerraFX.Interop.Windows.ComPtr`1">
            <summary>A type that allows working with pointers to COM objects more securely.</summary>
            <typeparam name="T">The type to wrap in the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</typeparam>
            <remarks>While this type is not marked as <see langword="ref"/> so that it can also be used in fields, make sure to keep the reference counts properly tracked if you do store <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instances on the heap.</remarks>
        </member>
        <member name="F:TerraFX.Interop.Windows.ComPtr`1.ptr_">
            <summary>The raw pointer to a COM object, if existing.</summary>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.#ctor(`0*)">
            <summary>Creates a new <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance from a raw pointer and increments the ref count.</summary>
            <param name="other">The raw pointer to wrap.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.#ctor(TerraFX.Interop.Windows.ComPtr{`0})">
            <summary>Creates a new <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance from a second one and increments the ref count.</summary>
            <param name="other">The other <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to copy.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.op_Implicit(`0*)~TerraFX.Interop.Windows.ComPtr{`0}">
            <summary>Converts a raw pointer to a new <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance and increments the ref count.</summary>
            <param name="other">The raw pointer to wrap.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.op_Implicit(TerraFX.Interop.Windows.ComPtr{`0})~`0*">
            <summary>Unwraps a <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance and returns the internal raw pointer.</summary>
            <param name="other">The <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to unwrap.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.As``1(TerraFX.Interop.Windows.ComPtr{``0}*)">
            <summary>Converts the current object reference to type <typeparamref name="U"/> and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <typeparam name="U">The interface type to use to try casting the current COM object.</typeparam>
            <param name="p">A raw pointer to the target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value to write to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target type <typeparamref name="U"/>.</returns>
            <remarks>This method will automatically release the target COM object pointed to by <paramref name="p"/>, if any.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.As``1(TerraFX.Interop.Windows.ComPtr{``0}@)">
            <summary>Converts the current object reference to type <typeparamref name="U"/> and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <typeparam name="U">The interface type to use to try casting the current COM object.</typeparam>
            <param name="other">A reference to the target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value to write to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target type <typeparamref name="U"/>.</returns>
            <remarks>This method will automatically release the target COM object pointed to by <paramref name="other"/>, if any.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.AsIID(System.Guid*,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.Windows.IUnknown}*)">
            <summary>Converts the current object reference to a type indicated by the given IID and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <param name="riid">The IID indicating the interface type to convert the COM object reference to.</param>
            <param name="other">A raw pointer to the target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value to write to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target IID.</returns>
            <remarks>This method will automatically release the target COM object pointed to by <paramref name="other"/>, if any.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.AsIID(System.Guid*,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.Windows.IUnknown}@)">
            <summary>Converts the current object reference to a type indicated by the given IID and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <param name="riid">The IID indicating the interface type to convert the COM object reference to.</param>
            <param name="other">A reference to the target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value to write to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target IID.</returns>
            <remarks>This method will automatically release the target COM object pointed to by <paramref name="other"/>, if any.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Attach(`0*)">
            <summary>Releases the current COM object, if any, and replaces the internal pointer with an input raw pointer.</summary>
            <param name="other">The input raw pointer to wrap.</param>
            <remarks>This method will release the current raw pointer, if any, but it will not increment the references for <paramref name="other"/>.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Detach">
            <summary>Returns the raw pointer wrapped by the current instance, and resets the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <returns>The raw pointer wrapped by the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</returns>
            <remarks>This method will not change the reference count for the COM object in use.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo(`0**)">
            <summary>Increments the reference count for the current COM object, if any, and copies its address to a target raw pointer.</summary>
            <param name="ptr">The target raw pointer to copy the address of the current COM object to.</param>
            <returns>This method always returns <see cref="F:TerraFX.Interop.Windows.S.S_OK"/>.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo(TerraFX.Interop.Windows.ComPtr{`0}*)">
            <summary>Increments the reference count for the current COM object, if any, and copies its address to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/>.</summary>
            <param name="p">The target raw pointer to copy the address of the current COM object to.</param>
            <returns>This method always returns <see cref="F:TerraFX.Interop.Windows.S.S_OK"/>.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo(TerraFX.Interop.Windows.ComPtr{`0}@)">
            <summary>Increments the reference count for the current COM object, if any, and copies its address to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/>.</summary>
            <param name="other">The target reference to copy the address of the current COM object to.</param>
            <returns>This method always returns <see cref="F:TerraFX.Interop.Windows.S.S_OK"/>.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo``1(``0**)">
            <summary>Converts the current COM object reference to a given interface type and assigns that to a target raw pointer.</summary>
            <param name="ptr">The target raw pointer to copy the address of the current COM object to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target type <typeparamref name="U"/>.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo``1(TerraFX.Interop.Windows.ComPtr{``0}*)">
            <summary>Converts the current COM object reference to a given interface type and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/>.</summary>
            <param name="p">The target raw pointer to copy the address of the current COM object to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target type <typeparamref name="U"/>.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo``1(TerraFX.Interop.Windows.ComPtr{``0}@)">
            <summary>Converts the current COM object reference to a given interface type and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/>.</summary>
            <param name="other">The target reference to copy the address of the current COM object to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target type <typeparamref name="U"/>.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo(System.Guid*,System.Void**)">
            <summary>Converts the current object reference to a type indicated by the given IID and assigns that to a target address.</summary>
            <param name="riid">The IID indicating the interface type to convert the COM object reference to.</param>
            <param name="ptr">The target raw pointer to copy the address of the current COM object to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target IID.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo(System.Guid*,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.Windows.IUnknown}*)">
            <summary>Converts the current object reference to a type indicated by the given IID and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <param name="riid">The IID indicating the interface type to convert the COM object reference to.</param>
            <param name="p">The target raw pointer to copy the address of the current COM object to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target IID.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.CopyTo(System.Guid*,TerraFX.Interop.Windows.ComPtr{TerraFX.Interop.Windows.IUnknown}@)">
            <summary>Converts the current object reference to a type indicated by the given IID and assigns that to a target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> value.</summary>
            <param name="riid">The IID indicating the interface type to convert the COM object reference to.</param>
            <param name="other">The target reference to copy the address of the current COM object to.</param>
            <returns>The result of <see cref="M:TerraFX.Interop.Windows.IUnknown.QueryInterface(System.Guid*,System.Void**)"/> for the target IID.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Dispose">
            <inheritdoc/>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Get">
            <summary>Gets the currently wrapped raw pointer to a COM object.</summary>
            <returns>The raw pointer wrapped by the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.GetAddressOf">
            <summary>Gets the address of the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance as a raw <typeparamref name="T"/> double pointer. This method is only valid when the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance is on the stack or pinned.
            </summary>
            <returns>The raw pointer to the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.GetPinnableReference">
            <summary>Gets the address of the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance as a raw <typeparamref name="T"/> double pointer.</summary>
            <returns>The raw pointer to the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.ReleaseAndGetAddressOf">
            <summary>Releases the current COM object in use and gets the address of the <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance as a raw <typeparamref name="T"/> double pointer. This method is only valid when the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance is on the stack or pinned.</summary>
            <returns>The raw pointer to the current <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Reset">
            <summary>Resets the current instance by decrementing the reference count for the target COM object and setting the internal raw pointer to <see langword="null"/>.</summary>
            <returns>The updated reference count for the COM object that was in use, if any.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Swap(TerraFX.Interop.Windows.ComPtr{`0}*)">
            <summary>Swaps the current COM object reference with that of a given <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</summary>
            <param name="r">The target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to swap with the current one.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.ComPtr`1.Swap(TerraFX.Interop.Windows.ComPtr{`0}@)">
            <summary>Swaps the current COM object reference with that of a given <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance.</summary>
            <param name="other">The target <see cref="T:TerraFX.Interop.Windows.ComPtr`1"/> instance to swap with the current one.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.Windows.__uuidof``1(``0)">
            <summary>Retrieves the GUID of of a specified type.</summary>
            <param name="value">A value of type <typeparamref name="T"/>.</param>
            <typeparam name="T">The type to retrieve the GUID for.</typeparam>
            <returns>A <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> value wrapping a pointer to the GUID data for the input type. This value can be either converted to a <see cref="T:System.Guid"/> pointer, or implicitly assigned to a <see cref="T:System.Guid"/> value.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.Windows.__uuidof``1(``0*)">
            <summary>Retrieves the GUID of of a specified type.</summary>
            <param name="value">A pointer to a value of type <typeparamref name="T"/>.</param>
            <typeparam name="T">The type to retrieve the GUID for.</typeparam>
            <returns>A <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> value wrapping a pointer to the GUID data for the input type. This value can be either converted to a <see cref="T:System.Guid"/> pointer, or implicitly assigned to a <see cref="T:System.Guid"/> value.</returns>
        </member>
        <member name="M:TerraFX.Interop.Windows.Windows.__uuidof``1">
            <summary>Retrieves the GUID of of a specified type.</summary>
            <typeparam name="T">The type to retrieve the GUID for.</typeparam>
            <returns>A <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> value wrapping a pointer to the GUID data for the input type. This value can be either converted to a <see cref="T:System.Guid"/> pointer, or implicitly assigned to a <see cref="T:System.Guid"/> value.</returns>
        </member>
        <member name="T:TerraFX.Interop.Windows.Windows.UuidOfType">
            <summary>A proxy type that wraps a pointer to GUID data. Values of this type can be implicitly converted to and assigned to <see cref="T:System.Guid"/>* or <see cref="T:System.Guid"/> parameters.</summary>
        </member>
        <member name="M:TerraFX.Interop.Windows.Windows.UuidOfType.op_Implicit(TerraFX.Interop.Windows.Windows.UuidOfType)~System.Guid">
            <summary>Reads a <see cref="T:System.Guid"/> value from the GUID buffer for a given <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> instance.</summary>
            <param name="guid">The input <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> instance to read data for.</param>
        </member>
        <member name="M:TerraFX.Interop.Windows.Windows.UuidOfType.op_Implicit(TerraFX.Interop.Windows.Windows.UuidOfType)~System.Guid*">
            <summary>Returns the <see cref="T:System.Guid"/>* pointer to the GUID buffer for a given <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> instance.</summary>
            <param name="guid">The input <see cref="T:TerraFX.Interop.Windows.Windows.UuidOfType"/> instance to read data for.</param>
        </member>
        <member name="T:TerraFX.Interop.Windows.Windows.UUID`1">
            <summary>A helper type to provide static GUID buffers for specific types.</summary>
            <typeparam name="T">The type to allocate a GUID buffer for.</typeparam>
        </member>
        <member name="F:TerraFX.Interop.Windows.Windows.UUID`1.RIID">
            <summary>The pointer to the <see cref="T:System.Guid"/> value for the current type.</summary>
            <remarks>The target memory area should never be written to.</remarks>
        </member>
        <member name="M:TerraFX.Interop.Windows.Windows.UUID`1.CreateRIID">
            <summary>Allocates memory for a <see cref="T:System.Guid"/> value and initializes it.</summary>
            <returns>A pointer to memory holding the <see cref="T:System.Guid"/> value for the current type.</returns>
        </member>
        <member name="T:TerraFX.Interop.NativeInheritanceAttribute">
            <summary>Defines the base type of a struct as it was in the native signature.</summary>
        </member>
        <member name="M:TerraFX.Interop.NativeInheritanceAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:TerraFX.Interop.NativeInheritanceAttribute" /> class.</summary>
            <param name="name">The name of the base type that was inherited from in the native signature.</param>
        </member>
        <member name="P:TerraFX.Interop.NativeInheritanceAttribute.Name">
            <summary>Gets the name of the base type that was inherited from in the native signature.</summary>
        </member>
        <member name="T:TerraFX.Interop.NativeTypeNameAttribute">
            <summary>Defines the type of a member as it was used in the native signature.</summary>
        </member>
        <member name="M:TerraFX.Interop.NativeTypeNameAttribute.#ctor(System.String)">
            <summary>Initializes a new instance of the <see cref="T:TerraFX.Interop.NativeTypeNameAttribute" /> class.</summary>
            <param name="name">The name of the type that was used in the native signature.</param>
        </member>
        <member name="P:TerraFX.Interop.NativeTypeNameAttribute.Name">
            <summary>Gets the name of the type that was used in the native signature.</summary>
        </member>
        <member name="T:TerraFX.Interop.VtblIndexAttribute">
            <summary>Defines the vtbl index of a method as it was in the native signature.</summary>
        </member>
        <member name="M:TerraFX.Interop.VtblIndexAttribute.#ctor(System.UInt32)">
            <summary>Initializes a new instance of the <see cref="T:TerraFX.Interop.VtblIndexAttribute" /> class.</summary>
            <param name="index">The vtbl index of a method as it was in the native signature.</param>
        </member>
        <member name="P:TerraFX.Interop.VtblIndexAttribute.Index">
            <summary>Gets the vtbl index of a method as it was in the native signature.</summary>
        </member>
    </members>
</doc>
